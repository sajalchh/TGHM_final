'use strict';
<<<<<<< HEAD
const path = require('path');
const loadJsonFile = require('load-json-file');
const pathType = require('path-type');

module.exports = (fp, opts) => {
	if (typeof fp !== 'string') {
		opts = fp;
		fp = '.';
	}

	opts = opts || {};

	return pathType.dir(fp)
		.then(isDir => {
			if (isDir) {
				fp = path.join(fp, 'package.json');
			}

			return loadJsonFile(fp);
		})
		.then(x => {
			if (opts.normalize !== false) {
				require('normalize-package-data')(x);
			}

			return x;
		});
};

module.exports.sync = (fp, opts) => {
	if (typeof fp !== 'string') {
		opts = fp;
		fp = '.';
	}

	opts = opts || {};
	fp = pathType.dirSync(fp) ? path.join(fp, 'package.json') : fp;

	const x = loadJsonFile.sync(fp);

	if (opts.normalize !== false) {
		require('normalize-package-data')(x);
	}

	return x;
=======
const {promisify} = require('util');
const fs = require('fs');
const path = require('path');
const parseJson = require('parse-json');

const readFileAsync = promisify(fs.readFile);

module.exports = async options => {
	options = {
		cwd: process.cwd(),
		normalize: true,
		...options
	};

	const filePath = path.resolve(options.cwd, 'package.json');
	const json = parseJson(await readFileAsync(filePath, 'utf8'));

	if (options.normalize) {
		require('normalize-package-data')(json);
	}

	return json;
};

module.exports.sync = options => {
	options = {
		cwd: process.cwd(),
		normalize: true,
		...options
	};

	const filePath = path.resolve(options.cwd, 'package.json');
	const json = parseJson(fs.readFileSync(filePath, 'utf8'));

	if (options.normalize) {
		require('normalize-package-data')(json);
	}

	return json;
>>>>>>> c9839472c444f6ec2829e00bb0169a884834f986
};
