[{"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\index.tsx":"1","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\reportWebVitals.js":"2","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\App.js":"3","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\MasterRouter.js":"4","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\addingData.ts":"5","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Management.ts":"6","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Hooks\\useToken.js":"7","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Login\\Login.js":"8","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Dashboard\\Dashboard.js":"9","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Database.ts":"10","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\Registration.js":"11","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Agent.ts":"12","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Customer.ts":"13","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Station.ts":"14","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Restaurant.ts":"15","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Train.ts":"16","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Time.ts":"17","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Order.ts":"18","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Account.ts":"19","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Enum.ts":"20","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\RegistrationRouter.js":"21","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Design\\Colors.js":"22","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\AccountDashRoutes\\AgentDashRouter.js":"23","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\AccountDashRoutes\\RestaurantDashRouter.js":"24","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\AccountDashRoutes\\ManagementDashRouter.js":"25","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\AccountDashRoutes\\PassengerDashRouter.js":"26","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\System.ts":"27","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Components\\DashBoard\\DashBoard.js":"28","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Menu.ts":"29","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Item.ts":"30","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\PassengerForm.js":"31","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\RestaurantForm.js":"32","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Agent\\AgentHomePage.js":"33","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Restaurant\\RestaurantHomePage.js":"34","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Restaurant\\RestaurantOrdersPage.js":"35","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Agent\\AgentOrderPage.js":"36","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Restaurant\\RestaurantMenuPage.js":"37","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Restaurant\\RestaurantAgentsPage.js":"38","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Management\\ManagementHomePage.js":"39","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Management\\ManagementStatsPage.js":"40","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerHomePage.js":"41","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerOrderPage.js":"42","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Management\\ManagementRailwaysPage.js":"43","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Components\\LogoutButton\\LogoutButton.js":"44","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\RouteForm.js":"45","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\StationForm.js":"46","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerBookingPage.js":"47","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerItemPage.js":"48","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerStationPage.js":"49","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\AgentForm.js":"50","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\RestaurantMenuForm.js":"51","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Components\\DashBoard\\DashBoardCard.js":"52"},{"size":517,"mtime":1617433095650,"results":"53","hashOfConfig":"54"},{"size":375,"mtime":1617432552405,"results":"55","hashOfConfig":"54"},{"size":1501,"mtime":1618384442294,"results":"56","hashOfConfig":"54"},{"size":1769,"mtime":1618383307414,"results":"57","hashOfConfig":"54"},{"size":5044,"mtime":1618384916781,"results":"58","hashOfConfig":"54"},{"size":2534,"mtime":1618384116859,"results":"59","hashOfConfig":"54"},{"size":757,"mtime":1618381391115,"results":"60","hashOfConfig":"54"},{"size":8093,"mtime":1618384116852,"results":"61","hashOfConfig":"54"},{"size":4046,"mtime":1617647877590,"results":"62","hashOfConfig":"54"},{"size":7728,"mtime":1618384116844,"results":"63","hashOfConfig":"54"},{"size":2227,"mtime":1618381391261,"results":"64","hashOfConfig":"54"},{"size":2201,"mtime":1618384976410,"results":"65","hashOfConfig":"54"},{"size":2529,"mtime":1618384853013,"results":"66","hashOfConfig":"54"},{"size":1153,"mtime":1618381540810,"results":"67","hashOfConfig":"54"},{"size":4668,"mtime":1618385015386,"results":"68","hashOfConfig":"54"},{"size":1780,"mtime":1618385037117,"results":"69","hashOfConfig":"54"},{"size":1991,"mtime":1618380086589,"results":"70","hashOfConfig":"54"},{"size":6665,"mtime":1618381540806,"results":"71","hashOfConfig":"54"},{"size":974,"mtime":1618381540797,"results":"72","hashOfConfig":"54"},{"size":892,"mtime":1618380086584,"results":"73","hashOfConfig":"54"},{"size":864,"mtime":1618381391266,"results":"74","hashOfConfig":"54"},{"size":180,"mtime":1617604685451,"results":"75","hashOfConfig":"54"},{"size":848,"mtime":1617604685497,"results":"76","hashOfConfig":"54"},{"size":1370,"mtime":1617604685500,"results":"77","hashOfConfig":"54"},{"size":1142,"mtime":1617604685498,"results":"78","hashOfConfig":"54"},{"size":891,"mtime":1617604685500,"results":"79","hashOfConfig":"54"},{"size":135,"mtime":1618380086589,"results":"80","hashOfConfig":"54"},{"size":2322,"mtime":1617604685447,"results":"81","hashOfConfig":"54"},{"size":862,"mtime":1618380086586,"results":"82","hashOfConfig":"54"},{"size":436,"mtime":1618380086585,"results":"83","hashOfConfig":"54"},{"size":8579,"mtime":1618385218240,"results":"84","hashOfConfig":"54"},{"size":7481,"mtime":1617647877594,"results":"85","hashOfConfig":"54"},{"size":1042,"mtime":1617647877577,"results":"86","hashOfConfig":"54"},{"size":994,"mtime":1617604685489,"results":"87","hashOfConfig":"54"},{"size":4763,"mtime":1617647877589,"results":"88","hashOfConfig":"54"},{"size":1976,"mtime":1617647877579,"results":"89","hashOfConfig":"54"},{"size":1457,"mtime":1618381391256,"results":"90","hashOfConfig":"54"},{"size":1562,"mtime":1618381391255,"results":"91","hashOfConfig":"54"},{"size":1030,"mtime":1618381391249,"results":"92","hashOfConfig":"54"},{"size":133,"mtime":1617604685481,"results":"93","hashOfConfig":"54"},{"size":1201,"mtime":1617604685484,"results":"94","hashOfConfig":"54"},{"size":2565,"mtime":1618381391252,"results":"95","hashOfConfig":"54"},{"size":727,"mtime":1618381391250,"results":"96","hashOfConfig":"54"},{"size":416,"mtime":1617604685449,"results":"97","hashOfConfig":"54"},{"size":4049,"mtime":1618381391263,"results":"98","hashOfConfig":"54"},{"size":3036,"mtime":1618381391264,"results":"99","hashOfConfig":"54"},{"size":2061,"mtime":1617628992269,"results":"100","hashOfConfig":"54"},{"size":2423,"mtime":1617647877581,"results":"101","hashOfConfig":"54"},{"size":2953,"mtime":1617628378243,"results":"102","hashOfConfig":"54"},{"size":7904,"mtime":1618381391259,"results":"103","hashOfConfig":"54"},{"size":3618,"mtime":1618381391262,"results":"104","hashOfConfig":"54"},{"size":516,"mtime":1617432552392,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"nx65xg",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"111"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"111"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"108"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"111"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"111"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"108"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"108"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"108"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"108"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"108"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"108"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"108"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"111"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"111"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"111"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"111"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"111"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"111"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"111"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"111"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"111"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\index.tsx",[],["237","238"],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\reportWebVitals.js",[],["239","240"],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\App.js",["241","242"],"import React, {useState} from 'react';\r\nimport './App.css';\r\nimport \"antd/dist/antd.css\";\r\nimport MasterRouter from \"./Routers/MasterRouter\";\r\nimport {AddData} from \"./Logic/addingData\";\r\nimport {Management} from \"./Logic/Management\";\r\nimport {Database} from \"./Logic/Database\";\r\n\r\n// function App() {\r\n//     // Database.readState();\r\n//     const [management, setManagement] = useState();\r\n//     setManagement(Management);\r\n//     AddData();\r\n//     return (\r\n//         <MasterRouter />\r\n//         )\r\n// }\r\n\r\nclass App extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            management: Management.getInstance()\r\n        };\r\n    }\r\n\r\n    // setManagement(manage){\r\n    //     this.setState()\r\n    //     this.setState({management: ${manage}});\r\n    // }\r\n\r\n    componentWillMount() {\r\n        AddData();\r\n        // this.setManagement(Management.getInstance());\r\n        this.setState({management: Management.getInstance()});\r\n        console.log(this.state.management.Customers);\r\n        // Database.readState();\r\n        // sessionStorage.setItem('management', JSON.stringify(Management.getInstance()))\r\n        // console.log(sessionStorage.getItem('management'))\r\n    }\r\n\r\n    render(){\r\n        let manageHook = {management: this.state.management, setManagement: (management) => this.setState({management: management})}\r\n        return(\r\n            <MasterRouter manageHook={manageHook}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\MasterRouter.js",["243","244","245"],"import React, {useState} from 'react';\r\nimport {BrowserRouter, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport Login from \"../Pages/Login/Login\";\r\nimport Registration from \"../Pages/Registration/Registration\";\r\nimport Dashboard from \"../Pages/Dashboard/Dashboard\";\r\nimport useToken from \"../Hooks/useToken\";\r\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\r\nimport {Database} from \"../Logic/Database\";\r\nimport {Management} from \"../Logic/Management\";\r\n\r\nexport default function MasterRouter({manageHook}){\r\n    const { token, setToken } = useToken();\r\n\r\n    const restrictedPage = (restrictedComponent, redirectComponent) => {\r\n        return token ? restrictedComponent : redirectComponent;\r\n    }\r\n\r\n    const timeout = { enter: 800, exit: 400 };\r\n    return(\r\n        <div className=\"master-router-wrapper\">\r\n            <TransitionGroup component=\"div\">\r\n                <CSSTransition timeout={timeout} classNames=\"pageSlider\" mountOnEnter={false} unmountOnExit={true}>\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        {!token ? <Login setToken={setToken} manageHook={manageHook} /> : <Redirect to=\"/dashboard\" />}\r\n                    </Route>\r\n                    <Route path=\"/registration\">\r\n                        <Registration manageHook={manageHook}/>\r\n                    </Route>\r\n                    <Route path=\"/dashboard\">\r\n                        {restrictedPage(<Dashboard manageHook={manageHook} />, <Login setToken={setToken} manageHook={manageHook} /> )}\r\n                    </Route>\r\n                </Switch>\r\n            </BrowserRouter>\r\n                    </CSSTransition>\r\n            </TransitionGroup>\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\addingData.ts",["246","247","248","249","250","251","252","253","254","255","256","257","258","259"],"\r\nimport { Agent } from './Agent';\r\nimport { Customer } from './Customer';\r\nimport { AccountType } from './Enum';\r\nimport { Item } from './Item';\r\nimport { Menu } from './Menu';\r\nimport { Restaurant } from './Restaurant';\r\nimport { Station } from './Station';\r\nimport { Time } from './Time';\r\nimport {Train} from './Train';\r\nimport {Management} from './Management';\r\nimport { readFile } from 'node:fs';\r\nimport { Database } from './Database';\r\nimport {Order} from \"./Order\";\r\n\r\n//Database.readState();\r\nexport function AddData() {\r\n    let m = Management.getInstance();\r\n    let c1 = new Customer(\"sajal\", \"sajalchh\", \"hello\", \"9293945535\", -1, m);\r\n    let c2 = new Customer(\"shaswat\", \"shaswat621\", \"kgpianboy\", \"9293945235\", -1, m);\r\n    let c3 = new Customer(\"abhishek\", \"gandhi\", \"baba\", \"91885665571\", -1, m);\r\n\r\n    let t1 = new Train(\"mumbai rajdhani\", \"12951\", new Map<string, Time>(), new Map<string, number>());\r\n    let t2 = new Train(\"Howrah Express\", \"12833\", new Map<string, Time>(), new Map<string, number>());\r\n\r\n    let s1 = new Station(\"Mumbai\");\r\n    let s2 = new Station(\"Delhi\");\r\n    let s3 = new Station(\"Kolkata\");\r\n    let s4 = new Station(\"Raipur\");\r\n    let s5 = new Station(\"Nagpur\");\r\n    let s6 = new Station(\"Ahmedabad\");\r\n    let s7 = new Station(\"Durg\");\r\n    let s8 = new Station(\"Surat\");\r\n    let s9 = new Station(\"Kota\");\r\n\r\n    t1.addStation(s1, new Time(7, 53));\r\n    t1.addStation(s2, new Time(8, 35));\r\n    t1.addStation(s8, new Time(3, 31));\r\n    t1.addStation(s9, new Time(16, 30));\r\n\r\n    t2.addStation(s1, new Time(0, 15));\r\n    t2.addStation(s3, new Time(23, 59));\r\n    t2.addStation(s4, new Time(22, 55));\r\n    t2.addStation(s5, new Time(17, 45));\r\n    t2.addStation(s6, new Time(10, 5));\r\n    t2.addStation(s7, new Time(22, 10));\r\n\r\n    let r1 = new Restaurant(\"sajal dhaba\", \"dhaba\", \"123\",s1);\r\n    let r2 = new Restaurant(\"club mahindra\", \"mahindra\", \"123\",s2);\r\n    let r3 = new Restaurant(\"dominos\", \"domi\", \"123\",s3);\r\n    let r4 = new Restaurant(\"foodbuz\", \"food\", \"123\",s4);\r\n    let r5 = new Restaurant(\"swastam\", \"swami\", \"123\",s5);\r\n    let r6 = new Restaurant(\"Mio Amore\", \"mio_me\", \"123\",s6);\r\n    let r7 = new Restaurant(\"Arabian Nights\", \"nights\", \"123\",s7);\r\n    let r8 = new Restaurant(\"KFC\", \"kfc\", \"123\",s8);\r\n\r\n    m.updateRestarantStatus(r1, 1);\r\n    m.updateRestarantStatus(r2, 1);\r\n    m.updateRestarantStatus(r3, 1);\r\n    m.updateRestarantStatus(r4, 1);\r\n    m.updateRestarantStatus(r5, 1);\r\n    m.updateRestarantStatus(r6, 1);\r\n    m.updateRestarantStatus(r7, 1);\r\n    m.updateRestarantStatus(r8, 1);\r\n\r\n    let a1 = new Agent(\"ramesh\", \"ramesh\", \"123\", r1);\r\n    let a2 = new Agent(\"ramu\", \"ramu\", \"123\", r2);\r\n    let a3 = new Agent(\"mahesh\", \"mahesh\", \"123\", r3);\r\n    let a4 = new Agent(\"ganesh\", \"ganesh\", \"123\", r4);\r\n    let a5 = new Agent(\"sham\", \"sham\", \"123\", r5);\r\n    let a6 = new Agent(\"shamu\", \"shamu\", \"123\", r6);\r\n    let a7 = new Agent(\"lalit\", \"lalu\", \"123\", r7);\r\n\r\n    /*r1.addStation(s1, new Time(0, 30));\r\n    r2.addStation(s2, new Time(0, 30));\r\n    r2.addStation(s3, new Time(0, 40));\r\n    r3.addStation(s4, new Time(0, 30));\r\n    r4.addStation(s5, new Time(0, 30));\r\n    r5.addStation(s6, new Time(0, 30));\r\n    r6.addStation(s7, new Time(0, 20));\r\n    r7.addStation(s8, new Time(0, 50));\r\n    r7.addStation(s9, new Time(0, 10));\r\n    r8.addStation(s1, new Time(0, 60));\r\n    r8.addStation(s2, new Time(0, 40));\r\n    r8.addStation(s5, new Time(0, 10));\r\n    */\r\n\r\n    r1.addItem(\"cheese fries\", 60, 8);\r\n    r1.addItem(\"veggie potato burger\", 60, 0);\r\n    r1.addItem(\"chicken burger\", 60, 0);\r\n    r1.addItem(\"veg whopper\", 60, 0);\r\n    r1.addItem(\"Mc veggie\", 60, 0);\r\n    r1.addItem(\"coke\", 60, 5);\r\n    r1.addItem(\"veg momos\", 60, 4);\r\n\r\n    r2.addItem(\"veg rolls\", 60, 2);\r\n    r2.addItem(\"dahi chaat\", 60, 3);\r\n    r2.addItem(\"hara bhara kabab\", 60, 12);\r\n    r2.addItem(\"chicken rolls\", 60, 2);\r\n\r\n    r3.addItem(\"Margerita\", 60, 1);\r\n    r3.addItem(\"Paneer pizza\", 60, 1);\r\n    r3.addItem(\"corn pizza\", 60, 1);\r\n    r3.addItem(\"lava cake\", 60, 21);\r\n\r\n    r4.addItem(\"butterchoch cake\", 260, 5);\r\n    r4.addItem(\"chocalate cake\", 560, 5);\r\n    r4.addItem(\"pineapple cake\", 600, 5);\r\n    r4.addItem(\"oreo milkshake\", 60, 13);\r\n\r\n    r5.addItem(\"samosa\", 430, 6);\r\n    r5.addItem(\"raj kajori\", 450, 6);\r\n    r5.addItem(\"allu tikki\", 500, 6);\r\n    r5.addItem(\"masala soda\", 40, 22);\r\n\r\n    r6.addItem(\"Brownie\", 60, 21);\r\n    r6.addItem(\"coffee\", 60, 22);\r\n    r6.addItem(\"Chicken nuggets\", 60, 20);\r\n    r6.addItem(\"pastry\", 60, 21);\r\n\r\n    r7.addItem(\"hot sour soup\", 200, 15);\r\n    r7.addItem(\"biryani\", 60, 21);\r\n    r7.addItem(\"chicken biryani\", 360, 10);\r\n    r7.addItem(\"green salad\", 100, 14);\r\n\r\n    r8.addItem(\"chicken burger\", 200, 0);\r\n    r8.addItem(\"chicken noodles\", 60, 9);\r\n    r8.addItem(\"fish nuggets\", 360, 17);\r\n    r8.addItem(\"prawns\", 700, 20);\r\n\r\n    console.log(r1);\r\n\r\n    let order1 = new Order(c1,0,r1.Menu.getMenuItems(),\"1\",t1.getID(),null);\r\n    order1.updateOrderStatus(1);\r\n    // Database.writeState();\r\n}\r\n","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Management.ts",["260","261"],"import {Account} from \"./Account\";\r\nimport {AccountType, ApprovalStatus} from \"./Enum\";\r\nimport {Station} from \"./Station\";\r\nimport {Train} from \"./Train\";\r\nimport {Restaurant} from \"./Restaurant\";\r\nimport { Customer } from \"./Customer\";\r\nimport { Agent } from \"./Agent\";\r\nexport class Management extends Account{\r\n    static instance: Management|null = null;\r\n    ApprovedRestaurants : Map<number,Restaurant> = new Map<number,Restaurant>();\r\n    Application: Array<Restaurant> = [];\r\n    Customers :Map<number,Customer> = new Map<number,Customer>();\r\n    stationList: Map<number,Station> = new Map<number,Station>();\r\n    trainList: Map<number,Train> = new Map<number,Train>();\r\n    agentList : Map<number,Agent> = new Map<number,Agent>();\r\n\r\n    loginC : Map<string, Customer> = new Map<string, Customer>();\r\n    loginR : Map<string, Restaurant> = new Map<string, Restaurant>();\r\n    loginA : Map<string, Agent> = new Map<string, Agent>();\r\n    trainNo : Map<string,Train> = new Map<string,Train>();\r\n\r\n    static CustomersForStoring :Array<Customer> = new Array<Customer>();\r\n    static stationListForStoring: Array<Station> = new Array<Station>();\r\n    static trainListForStoring: Array<Train> = new Array<Train>();\r\n    static agentListForStoring : Array<Agent> = new Array<Agent>();\r\n    static restaurantForStoring : Array<Restaurant> = new Array<Restaurant>();\r\n\r\n    private constructor(){\r\n        super(\"Management\",\"Manager\",new Date(),AccountType.Management,\"admin\");\r\n    }\r\n    static getInstance() : Management{\r\n        if (this.instance==null){\r\n            this.instance = new Management();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n\r\n    addStation(Station:Station) : void{\r\n        this.stationList.set(Station.getID(),(Station));\r\n       \r\n    }\r\n    removeStation(Station:Station) : void{\r\n        this.stationList.delete(Station.getID());\r\n    }\r\n    addTrain(Train:Train) : void{\r\n        this.trainList.set(Train.getID(),(Train));\r\n\r\n    }\r\n    removeTrain(Train:Train) : void{\r\n        this.trainList.delete(Train.getID());\r\n    }\r\n\r\n    updateRestarantStatus(Restarant:Restaurant,status:number) : void{\r\n        let x = this.Application.indexOf(Restarant);\r\n        Restarant.accetanceStatus = ApprovalStatus[status];\r\n        this.Application.splice(x,1);\r\n        if(status != ApprovalStatus.Rejected){\r\n            this.ApprovedRestaurants.set(Restarant.getID(),(Restarant));\r\n            Management.restaurantForStoring.push(Restarant);\r\n        }\r\n    }\r\n}\r\nvar m = Management.getInstance();","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Hooks\\useToken.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Login\\Login.js",["262","263","264","265","266","267","268","269","270","271"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Login.css';\r\nimport {Button, Card, Carousel, Checkbox, Form, Input, Row, Col, Image} from \"antd\";\r\nimport Colors from \"../../Design/Colors\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Management} from \"../../Logic/Management\";\r\nimport {Database} from \"../../Logic/Database\";\r\nimport Bg1 from \"../../Img/bg1.png\";\r\nimport Bg2 from \"../../Img/bg2.png\";\r\nimport Bg3 from \"../../Img/bg3.png\";\r\nimport Bg4 from \"../../Img/bg4.png\";\r\nimport Bg5 from \"../../Img/bg5.png\";\r\n\r\n// const AgentTest = {\r\n//     id: 1,\r\n//     name: \"David\",\r\n//     type: \"Agent\",\r\n//     username: \"David123\",\r\n//     password: \"123\",\r\n// }\r\n\r\n\r\nasync function loginUser(credentials, management){\r\n    // return fetch('http://localhost:8080/login', {\r\n    //     method: 'POST',\r\n    //     headers: {\r\n    //         'Content-Type': 'application/json'\r\n    //     },\r\n    //     body: JSON.stringify(credentials)\r\n    // })\r\n    //     .then(data => data.json())\r\n    // if ((credentials.username === AgentTest.username)&&(credentials.password === AgentTest.password)) {\r\n    //     return {\r\n    //         'token': AgentTest.id\r\n    //     };\r\n    // }\r\n    console.log(credentials.username);\r\n    let isAuthenticID = Database.AuthenticateUser(credentials.username, credentials.password, management);\r\n    console.log(isAuthenticID);\r\n    if (isAuthenticID){\r\n        return{\r\n            'token': isAuthenticID\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default function Login({setToken, manageHook}){\r\n    const [username, setUserName] = useState();\r\n    const [password, setPassword] = useState();\r\n\r\n    // const handleSubmit = async (values) => {\r\n    //     // values.preventDefault();\r\n    //     const result = await loginUser({'username': username, 'password': password});\r\n    //     setToken(result.token);\r\n    // }\r\n\r\n\r\n    const handleSubmit = async e => {\r\n        // e.preventDefault();\r\n        console.log(\"Hi\");\r\n        const token = await loginUser({\r\n          'username': username,\r\n          'password': password\r\n        }, manageHook.management);\r\n        console.log(`Username: ${username} , Password: ${password}`);\r\n        setToken(token.token);\r\n      }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed: ',errorInfo);\r\n    }\r\n\r\n    const CarouselStyle = {\r\n        height: window.innerHeight-10,\r\n        width: '100%',\r\n        color: '#fff',\r\n        lineHeight: '160px',\r\n        textAlign: 'center',\r\n        background: '#364d79',\r\n    }\r\n\r\n    const wrapperStyle = {\r\n        height: window.innerHeight - 10,\r\n    }\r\n\r\n    const colStyle = {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    }\r\n\r\n    const colorStyles = {\r\n        white: Colors.white,\r\n        grey: Colors.lightgrey\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"login-wrapper\" style={wrapperStyle}>\r\n                <Row style={colStyle}>\r\n                    <Col style={colStyle} span={12}>\r\n                        <Col style={colStyle} span={16} offset={4}>\r\n                            <div className=\"login-card-wrapper\" style={{backgroundColor: colorStyles.white}}>\r\n                            <Card className=\"login-card\" style={{width: \"100%\", borderColor: colorStyles.white}}>\r\n                                {/*<Form*/}\r\n                                {/*    name=\"basic\"*/}\r\n                                {/*    initialValues={{*/}\r\n                                {/*        remember: true,*/}\r\n                                {/*    }}*/}\r\n                                {/*    onFinish={handleSubmit}*/}\r\n                                {/*    onFinishFailed={onFinishFailed}>*/}\r\n                                {/*        <Form.Item*/}\r\n                                {/*        label=\"Username\"*/}\r\n                                {/*        name=\"username\"*/}\r\n                                {/*        rules={[*/}\r\n                                {/*            {*/}\r\n                                {/*                required: true,*/}\r\n                                {/*                message: 'Please input your username',*/}\r\n                                {/*            }*/}\r\n                                {/*        ]}>*/}\r\n                                {/*            <Input onChange={e => setUserName(e.target.value)} />*/}\r\n                                {/*        </Form.Item>*/}\r\n                                {/*        <Form.Item*/}\r\n                                {/*        label=\"Password\"*/}\r\n                                {/*        name=\"password\"*/}\r\n                                {/*        rules={[*/}\r\n                                {/*            {*/}\r\n                                {/*                required: true,*/}\r\n                                {/*                message: 'Please input your password',*/}\r\n                                {/*            }*/}\r\n                                {/*        ]}*/}\r\n                                {/*        >*/}\r\n                                {/*            <Input.Password onChange={e => setPassword(e.target.value)} />*/}\r\n                                {/*        </Form.Item>*/}\r\n                                {/*        <Form.Item  name=\"remember\" valuePropName=\"checked\">*/}\r\n                                {/*            <Checkbox>Remember Me</Checkbox>*/}\r\n                                {/*        </Form.Item>*/}\r\n                                {/*        <Form.Item>*/}\r\n                                {/*            <Button type=\"primary\" htmlType=\"submit\">*/}\r\n                                {/*                Submit*/}\r\n                                {/*            </Button>*/}\r\n                                {/*        </Form.Item>*/}\r\n                                {/*</Form>*/}\r\n                                <form onSubmit={handleSubmit}>\r\n                                    <label>\r\n                                      <p>Username</p>\r\n                                      <input type=\"text\" onChange={e => setUserName(e.target.value)} />\r\n                                    </label>\r\n                                    <label>\r\n                                      <p>Password</p>\r\n                                      <input type=\"password\" onChange={e => setPassword(e.target.value)} />\r\n                                    </label>\r\n                                    <div>\r\n                                      <button type=\"submit\">Submit</button>\r\n                                    </div>\r\n                                  </form>\r\n                                {/*<Link to={\"/dashboard\"}>Go to Next Page</Link>*/}\r\n                                <Link to={\"/registration\"}>Sign Up</Link>\r\n                            </Card>\r\n                            </div>\r\n                        </Col>\r\n                    </Col>\r\n                    <Col style={colStyle} span={12}>\r\n                        <div className=\"login-header-wrapper\">\r\n                            <div className=\"login-header\" style={{color: colorStyles.white}}>\r\n                                Technology in Good Health\r\n                            </div>\r\n                            <div className=\"login-content\" style={{color: colorStyles.grey}}>\r\n                                Order your food on the move <br />\r\n                                <span style={{fontSize: \"1.2rem\"}}>Or <Link to={\"/registration/restaurant\"}>Join Us</Link></span>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            <Carousel autoplay>\r\n                <div>\r\n                    <Image src={Bg1} />\r\n                </div>\r\n                <div>\r\n                    <Image src={Bg2} />\r\n                </div>\r\n                <div>\r\n                    <Image src={Bg4} />\r\n                </div>\r\n            </Carousel>\r\n        </div>\r\n    )\r\n}\r\n\r\nLogin.propTypes = {\r\n    setToken: PropTypes.func.isRequired\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Dashboard\\Dashboard.js",["272","273"],"import React from 'react';\r\nimport DashBoard from \"../../Components/DashBoard/DashBoard\";\r\nimport AgentDashRouter from \"../../Routers/AccountDashRoutes/AgentDashRouter\";\r\nimport RestaurantDashRouter from \"../../Routers/AccountDashRoutes/RestaurantDashRouter\";\r\nimport ManagementDashRouter from \"../../Routers/AccountDashRoutes/ManagementDashRouter\";\r\nimport PassengerDashRouter from \"../../Routers/AccountDashRoutes/PassengerDashRouter\";\r\nimport {Management} from \"../../Logic/Management\";\r\nimport {Customer} from \"../../Logic/Customer\";\r\nimport {AccountType} from \"../../Logic/Enum\";\r\n\r\nconst allAccounts = [\r\n    {\r\n        id: 1,\r\n        name: \"David\",\r\n        type: \"\",\r\n        username: \"David123\",\r\n        password: \"123\",\r\n    },\r\n]\r\n\r\nconst AgentLinks = [\r\n    {link: \"/dashboard/\", item:\"Home\"},\r\n    {link: \"/dashboard/order\", item:\"Orders\"},\r\n]\r\n\r\nconst RestaurantLinks = [\r\n    {link: \"/dashboard/\", item:\"Home\"},\r\n    {link: \"/dashboard/orders\", item:\"Orders\"},\r\n    {link: \"/dashboard/menu\", item:\"Menu\"},\r\n    {link: \"/dashboard/agents\", item:\"Agents\"},\r\n]\r\n\r\nconst ManagementLinks = [\r\n    {link: \"/dashboard/\", item:\"Home\"},\r\n    {link: \"/dashboard/stats\", item:\"Statistics\"},\r\n    {link: \"/dashboard/railway\", item:\"Railways\"},\r\n]\r\n\r\nconst PassengerLinks = [\r\n    {link: \"/dashboard/\", item:\"Home\"},\r\n    {link: \"/dashboard/order\", item:\"Order\"}\r\n]\r\n\r\nexport default class Dashboard extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {}\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        let tokenString = sessionStorage.getItem('token');\r\n        if (!tokenString){\r\n            tokenString = localStorage.getItem('token');\r\n        }\r\n        const userToken = JSON.parse(tokenString);\r\n        console.log(userToken);\r\n        if (userToken === \"manager\"){\r\n            this.setState({account: Management.getInstance()})\r\n        }\r\n        let l = Management.loginC.get(userToken);\r\n        console.log(l);\r\n        if (l !== undefined){\r\n            this.setState({account: l});\r\n        }\r\n        let r = Management.loginR.get(userToken);\r\n        console.log(r);\r\n        if (r !== undefined){\r\n            this.setState({account: r});\r\n        }\r\n        let a = Management.loginA.get(userToken);\r\n        if (a !== undefined){\r\n            this.setState({account: a});\r\n        }\r\n    };\r\n\r\n    renderDashBoard(){\r\n        if (this.state.account.getType() === AccountType.Agent){\r\n            return (\r\n                <DashBoard menu={AgentLinks}>\r\n                    <div style={{minHeight: \"90vh\"}}>\r\n                        <AgentDashRouter account = {this.state.account} />\r\n                    </div>\r\n                </DashBoard>\r\n            );\r\n        }\r\n        if (this.state.account.getType() === AccountType.Restaurant){\r\n            return (\r\n                <DashBoard menu={RestaurantLinks}>\r\n                    <div style={{minHeight: \"90vh\"}}>\r\n                        <RestaurantDashRouter account = {this.state.account} />\r\n                    </div>\r\n                </DashBoard>\r\n            );\r\n        }\r\n        if (this.state.account.getType() === AccountType.Management){\r\n            return (\r\n                <DashBoard menu={ManagementLinks}>\r\n                    <div style={{minHeight: \"90vh\"}}>\r\n                        <ManagementDashRouter account = {this.state.account} />\r\n                    </div>\r\n                </DashBoard>\r\n            )\r\n        }\r\n        if (this.state.account.getType() === AccountType.Customer){\r\n            return (\r\n                <DashBoard menu={PassengerLinks}>\r\n                    <div style={{minHeight: \"90vh\"}}>\r\n                        <PassengerDashRouter account = {this.state.account} />\r\n                    </div>\r\n                </DashBoard>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log(this.state);\r\n        return(\r\n            <div>\r\n                {this.renderDashBoard()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Database.ts",["274","275","276","277","278","279","280","281","282","283","284","285","286"],"\r\nimport { Agent } from './Agent';\r\nimport { Customer } from './Customer';\r\nimport { AccountType } from './Enum';\r\nimport { Item } from './Item';\r\nimport { Menu } from './Menu';\r\nimport { Restaurant } from './Restaurant';\r\nimport { Station } from './Station';\r\nimport { Time } from './Time';\r\nimport {Train} from './Train';\r\nimport {Management} from './Management';\r\nimport { readFile } from 'node:fs';\r\nimport { Account } from './Account';\r\nimport { System } from './System';\r\nimport CustomerData from \"./data/Customers.json\";\r\nimport RestaurantData from \"./data/Restaurants.json\";\r\nimport StationsData from \"./data/Stations.json\";\r\nimport TrainsData from \"./data/Trains.json\";\r\nimport AgentData from \"./data/Agents.json\";\r\n\r\n\r\n// const fs = require(\"fs\");\r\n// const CircularJSON = require('circular-json');\r\n\r\n\r\nexport class Database{\r\n    static instance: Database|null = null;\r\n\r\n    private constructor(){\r\n    }\r\n\r\n    static getInstance() : Database{\r\n        if (this.instance==null){\r\n            this.instance = new Database();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    // static async writeState() {\r\n    //     try {\r\n    //         var FileSaver = require('file-saver');\r\n    //         FileSaver.saveFile(\"./data/Customers.json\", JSON.stringify(Management.getInstance().Customers), function (){})\r\n    //         FileSaver.writeFile(\"./data/Restaurants.json\", JSON.stringify(Management.getInstance().Application), function (){})\r\n    //         FileSaver.writeFile(\"./data/Stations.json\", JSON.stringify(Management.stationList), function (){})\r\n    //         FileSaver.writeFile(\"./data/Trains.json\", JSON.stringify(Management.trainList), function (){})\r\n    //         FileSaver.writeFile('./data/Customers.json', JSON.stringify(Management.Customers));\r\n    //         console.log(Management.Customers);\r\n    //     } catch (err) {\r\n    //         console.error(err)\r\n    //     }\r\n    // }\r\n\r\n\r\n    static readState(){\r\n        try {\r\n            \r\n            }\r\n    catch (err) {\r\n    console.error(err)\r\n            return false\r\n        }\r\n    }\r\n\r\n/*\r\n    static readState(){\r\n        try {\r\n            let arrCust = CustomerData;\r\n            for (let i=0;i<arrCust.length;i++){\r\n                let x = Object.setPrototypeOf(arrCust[i], Customer.prototype);\r\n                Management.Customers.set(x.getID(),(x));\r\n                Management.loginC.set(x.getUsername(),x);\r\n                Account.unique= Math.max(x.getID(),Account.unique);\r\n                Account.unique++;\r\n            }\r\n            let arrRest = RestaurantData;\r\n            for (let i=0;i<arrRest.length;i++){\r\n                let x = Object.setPrototypeOf(arrRest[i], Restaurant.prototype);\r\n                Management.ApprovedRestaurants.set(x.getID(),(x));\r\n                Management.loginR.set(x.getUsername(), x);\r\n                Account.unique= Math.max(x.getID(),Account.unique);\r\n                Account.unique++;\r\n            }\r\n            let arrStation = StationsData;\r\n            for (let i=0;i<arrStation.length;i++){\r\n                let x = Object.setPrototypeOf(arrStation[i], Station.prototype)\r\n                Management.stationList.set(x.getID(), (x));\r\n            }\r\n            let arrTrains = TrainsData;\r\n            for (let i=0;i<arrTrains.length;i++){\r\n                let x = Object.setPrototypeOf(arrTrains[i], Train.prototype);\r\n                Management.trainList.set(x.getID(), (x));\r\n                Management.trainNo.set(x.TrainNo, x);\r\n            }\r\n            Management.trainListForStoring = Array.from(Management.trainList.values());\r\n            let arrAgent = AgentData;\r\n            for (let i=0;i<arrAgent.length;i++){\r\n                let x = Object.setPrototypeOf(arrAgent[i], Agent.prototype);\r\n                Management.agentList.set(x.getID(), (x));\r\n                Management.loginA.set(x.getUsername(), x);\r\n                System.active_agent.push(x);\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n            return false\r\n        }\r\n    }\r\n*/\r\n    static AuthenticateUser(username:string, password:string, management:Management): string|null{\r\n        let l = management.loginC.get(username);\r\n        console.log(l);\r\n        if (l !== undefined){\r\n            if (l.checkPassword(password)) return l.getUsername();\r\n        }\r\n        let r = management.loginR.get(username);\r\n        console.log(management.loginR);\r\n        console.log(r);\r\n        if (r !== undefined){\r\n            if (r.checkPassword(password)) return r.getUsername();\r\n        }\r\n        let a = management.loginA.get(username);\r\n        if (a !== undefined){\r\n            if (a.checkPassword(password)) return a.getUsername();\r\n        }\r\n        if (username===\"manager\"){\r\n            if (password===\"123\"){\r\n                return \"manager\";\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static getMenu(train : Train,  timemax : Time=new Time(23,59)) : [Map<string,Array<Item>>,Map<string,Array<Time>>]{\r\n        let timemin = new Time();\r\n        timemin.updateTime();\r\n        const rStation=train.Return_RouteStation();\r\n        let rTime:Map<string, Time> = new Map<string, Time> (train.Return_RouteTime());\r\n        let reqStations = [];\r\n        let time = [];\r\n        // console.log(rTime);\r\n        // console.log(timemin);\r\n        // console.log(timemax);\r\n        // console.log(typeof rTime);\r\n        // console.log(rTime.keys());\r\n        for(let key of Array.from(train.routeTime.keys())) {\r\n            let t = rTime.get(key);\r\n            // console.log(t);\r\n            if(t){\r\n                if(t.lessThanEqual(timemax)&&timemin.lessThanEqual(t)){\r\n                    reqStations.push(key);\r\n                    time.push(t);\r\n                }\r\n            }\r\n        }\r\n        console.log(reqStations);\r\n        let items= Array <Item>();\r\n        let times =  Array <Time>();\r\n        let i=0;\r\n        for(let stat of reqStations){\r\n            // console.log(stat);\r\n            let rs=rStation.get(stat);\r\n            // console.log(rs);\r\n            if(rs){\r\n                let ms=Management.getInstance().stationList.get(rs);\r\n                console.log(typeof ms);\r\n                if(ms){\r\n                    console.log(ms.getID());\r\n                    Array.prototype.push.apply(items,ms.getItem());\r\n                    for(let x of ms.getItem()){\r\n                        times.push(time[i]);\r\n                    }\r\n                    // console.log(ms.getItem());\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        let final=new Map<string,Array<Item>>([]);\r\n        let final2 = new Map<string,Array<Time>>([]);\r\n        i=0;\r\n        for(let x of items){\r\n            let c = final.get(x.type);\r\n            let d = final2.get(x.type);\r\n            if(c && d) {\r\n                c.push(x);\r\n                d.push(times[i]);\r\n                final.set(x.type, c);\r\n                final2.set(x.type, d);\r\n            }\r\n            else{\r\n                c = new Array<Item>();\r\n                c.push(x);\r\n                final.set(x.type, c);\r\n                d = new Array<Time>();\r\n                d.push(times[i]);\r\n                final2.set(x.type, d);\r\n            }\r\n            i++;\r\n        }\r\n        console.log(items);\r\n        // console.log(final);\r\n        return [final,final2];\r\n    }\r\n    getRestaurant(username:string) : Restaurant|null{\r\n        return null;    \r\n    }\r\n    getAgent(username:string) : Agent|null{\r\n        return null;\r\n    }\r\n}\r\n\r\n// let c = new Customer(\"Shashvat\", \"Shash\", \"123\", \"123456789\");\r\n// let r = new Restaurant(\"Dominos\", \"Dom\", \"234\", 15);\r\n// Database.writeState();\r\n//\r\n//\r\n//\r\n// Database.readState();\r\n","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\Registration.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Agent.ts",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Customer.ts",["287"],"import {Account} from \"./Account\"\r\nimport { Agent } from \"./Agent\";\r\nimport { AccountType } from \"./Enum\"\r\nimport { Management } from \"./Management\";\r\nimport { Order } from \"./Order\";\r\nimport {Train} from \"./Train\"\r\n\r\nexport class Customer extends Account{\r\n    private __seatNO : string | undefined;\r\n    private __Train : Train | undefined;\r\n    private __Orders : Array<Order> = [];\r\n    private __allotedAgent : Agent | undefined;\r\n    private __phoneNumber : string;\r\n    constructor(name:string,username : string, password:string, phoneNo : string, ID : number = -1, management:Management){\r\n        super(name,username,new Date(),AccountType.Customer,password,ID);\r\n        this.__phoneNumber = phoneNo;\r\n        management.loginC.set(this._username, this);\r\n        // let m = Management.getInstance();\r\n        management.Customers.set(this.getID(),(this));\r\n        // management.CustomersForStoring.push(this);\r\n    }\r\n    addOrder(Order:Order) : void{\r\n        this.__Orders.push(Order);\r\n    }\r\n    updateOrderStatus(orderId : number, status : number) : void{\r\n        for(let i of this.__Orders){\r\n            if(i.orderId === orderId){\r\n                i.updateOrderStatus(status);\r\n            }\r\n        }\r\n    }\r\n    getReciept(orderId : number){\r\n        for(let i of this.__Orders){\r\n            if(i.orderId === orderId){\r\n                return i.getReciept();\r\n            }\r\n        }\r\n    }\r\n    getOrder(orderId : number) : Order|null{\r\n        for(let i of this.__Orders){\r\n            if(i.orderId === orderId){\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    updateTrain(seatNo : string, train : Train){\r\n        this.__Train = train;\r\n        this.__seatNO = seatNo;\r\n    }\r\n\r\n    getOrderStatus(orderId : number){\r\n        for(let i of this.__Orders){\r\n            if(i.orderId == orderId){\r\n                return i.getOrderStatus();\r\n            }\r\n        }\r\n    }\r\n    checkPasswords(userName : string,password : string){\r\n\r\n    }\r\n    getOrderList() : Array<Order>{\r\n        return this.__Orders;\r\n    }\r\n    // static ReadCustomer(customer : Customer){\r\n    //     let x = new Customer(customer[\"_name\"],customer[\"_username\"],customer[\"_password\"],customer[\"__phoneNumber\"]);\r\n    //     x.__Train = customer[\"__Train\"];\r\n    //     x.__seatNO = customer[\"__seatNO\"];\r\n    //     x.__allotedAgent = customer[\"__allotedAgent\"];\r\n    //     x._ID = customer[\"_ID\"];\r\n    //     for(let i of x.__Orders)\r\n    //         Order.readOrder(i,x);\r\n    // }\r\n}\r\n","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Station.ts",["288"],"import {Restaurant} from \"./Restaurant\";\r\nimport {Item} from \"./Item\";\r\nimport { Management } from \"./Management\";\r\nimport { Account } from \"./Account\";\r\n\r\nexport class Station{\r\n    name;\r\n    private __restaurant: Array<number> = [];\r\n    private __food = new Set<Item>();\r\n    private __ID : number;\r\n    deliveredCount : number = 0;\r\n    failedCount : number = 0;\r\n    constructor(name:string,ID:number = -1){\r\n        this.name = name;\r\n        if(ID==-1)\r\n            this.__ID  = Account.unique++;\r\n        else\r\n            this.__ID  = ID;\r\n        let m = Management.getInstance();\r\n        m.stationList.set(this.__ID,(this));\r\n        Management.stationListForStoring.push(this);\r\n    }\r\n    addRestaurant(restaurant:Restaurant){\r\n        this.__restaurant.push(restaurant.getID());\r\n    }\r\n    getRestaurant(){\r\n        return this.__restaurant;\r\n    }\r\n    addItem(item: Item){\r\n        this.__food.add(item);\r\n    }\r\n    removeItem(item: Item){\r\n        this.__food.delete(item);\r\n    }\r\n    getItem(){\r\n        //console.log(this.__food);\r\n        return Array.from(this.__food);\r\n    }\r\n    getID(){\r\n        return this.__ID;\r\n    }\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Restaurant.ts",["289","290","291","292","293","294"],"import {Account} from \"./Account\"\r\nimport {AccountType,AgentStatus,ApprovalStatus,FoodType} from \"./Enum\"\r\nimport {Menu} from \"./Menu\"\r\nimport {Management} from \"./Management\"\r\nimport {Item} from \"./Item\"\r\nimport {Agent} from \"./Agent\"\r\nimport {Certi} from \"./Certificate\"\r\nimport {Station} from \"./Station\"\r\nimport {Order} from \"./Order\"\r\nimport {System} from \"./System\"\r\nimport { Time } from \"./Time\"\r\n\r\nexport class Restaurant extends Account{\r\n    orderlist : Array<Order> = [];\r\n    private __timeToReach : Array<Time> = [];\r\n    private __agent : Array<number> = [];\r\n    private __agentStatus: Array<string> = [];\r\n    //private __agentTimeToGetBack : Array<number> = [];\r\n    accetanceStatus = ApprovalStatus[0];\r\n    Menu = new Menu();\r\n    certi: Array<Certi> = [];\r\n    servingStation : number;\r\n    \r\n    constructor(name:string,username:string,password:string,station:Station,ID:number = -1) {\r\n        super(name,username,new Date(),AccountType.Restaurant,password,ID);\r\n        let m = Management.getInstance();\r\n        m.Application.push(this);\r\n        //this.__timeToReach = timeToReach;\r\n        this.servingStation = station.getID();\r\n        m.loginR.set(username, this);\r\n    }\r\n    getPrice(s : string){\r\n        return this.Menu.getPrice(s);\r\n    }\r\n    addItem(s : string , price : number, type:number){\r\n        let item = new Item(s, price, type, this.getID());\r\n        this.Menu.addItem(item);\r\n        let m = Management.getInstance();\r\n        let ms=m.stationList.get(this.servingStation);\r\n        if(ms)\r\n        ms.addItem(item);\r\n    }\r\n    removeItem(item:Item){\r\n        this.Menu.removeItem(item);\r\n        let m = Management.getInstance();\r\n        let ms=m.stationList.get(this.servingStation);\r\n        if(ms)\r\n        ms.removeItem(item);\r\n    }\r\n    provideCerti(file : Certi){\r\n        this.certi.push(file);\r\n    }\r\n    AddAgent(agent : Agent){\r\n        this.__agent.push(agent.getID());\r\n        this.__agentStatus.push(AgentStatus[0]);\r\n        System.active_agent.push(agent);\r\n        agent.addRestaurant(this);\r\n    }\r\n    removeAgent(agent : Agent){\r\n        let index = this.__agent.indexOf(agent.getID());\r\n        this.__agent.slice(index);\r\n        //this.__agentTimeToGetBack.slice(index);\r\n        this.__agentStatus.splice(index);\r\n        System.active_agent.slice(System.active_agent.indexOf(agent));\r\n    }\r\n\r\n    getAgents(){\r\n        return this.__agent;\r\n    }\r\n\r\n    //getClosestAgent(){\r\n    //    return Math.min.apply(Math,this.__agentTimeToGetBack);   \r\n    //}\r\n    allotAgent(order: Order,agent : Agent,time : number|null = null){\r\n        let index = this.__agent.indexOf(agent.getID());\r\n        let m = Management.getInstance();\r\n        let ag=m.agentList.get(this.__agent[index]);\r\n        if(ag)\r\n            ag.updateAllotedOrder(order);\r\n         \r\n    }\r\n    updateOrderStatus(orderId : number,status : number, Item : Item){\r\n        for(let i of this.orderlist){\r\n            if(i.orderId ==orderId){\r\n                i.updateOrderStatus(status,Item);\r\n            }\r\n        }\r\n    }\r\n    //addStation(Station : Station, time:Time){\r\n    //    Station.addRestaurant(this);\r\n    //    this.__timeToReach.push(time);\r\n    //    for(let i of this.Menu.getMenuItems()){\r\n    //        Station.addItem(i);\r\n    //    }\r\n    //    this.servingStation.push(Station.getID());\r\n    // }\r\n    addBrand(newuser : string,password : string,Station : Station){\r\n        let s = new Restaurant(this._name,newuser,password,Station);\r\n        for(let i of this.Menu.getMenuItems()){\r\n            let type : string = i.type\r\n            s.addItem(i.name,i.price,(<any>FoodType)[i.type]);\r\n        }\r\n    }\r\n    getOrderDetails(orderId : number){\r\n        for(let i of this.orderlist){\r\n            if(i.orderId ==orderId){\r\n                return i.getItemList(this);\r\n            }\r\n        }\r\n    }\r\n    getOrderStations(orderId: number){\r\n        for(let i of this.orderlist){\r\n            if(i.orderId ==orderId){\r\n                return this.servingStation;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    updateAgentStatus(agent : Agent,status: number){\r\n        let index = this.__agent.indexOf(agent.getID());\r\n        this.__agentStatus[index] = AgentStatus[status];\r\n    }\r\n\r\n    getFreeAgents() : Array<Agent>{\r\n        let i=0;\r\n        let v : Array<Agent> = [];\r\n        for(let x of this.__agentStatus){\r\n            if(x==AgentStatus[0]){\r\n                let m = Management.getInstance();\r\n                let y = m.agentList.get(this.__agent[i]);\r\n                if(y)\r\n                v.push(y);\r\n            }\r\n            i++;\r\n        }\r\n        return v;\r\n    }\r\n\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Train.ts",["295","296"],"import { Account } from \"./Account\";\r\nimport { Management } from \"./Management\";\r\nimport {Station} from \"./Station\";\r\nimport { Time } from \"./Time\";\r\n    \r\nexport class Train{\r\n    Name:string;\r\n    TrainNo : string;\r\n    routeTime:Map<string, Time>;\r\n    routeStation:Map<string,number>;\r\n    private __Id : number;\r\n    constructor(name:string,TrainNo:string,route:Map<string, Time>,routeStation:Map<string, number>,ID:number = -1){\r\n        this.Name=name;\r\n        this.routeTime = new Map(route);\r\n        this.routeStation = new Map(routeStation);\r\n        this.TrainNo = TrainNo;\r\n        if(ID==-1)\r\n            this.__Id  = Account.unique++;\r\n        else\r\n            this.__Id  = ID;   \r\n        let m = Management.getInstance();\r\n        m.trainList.set(this.__Id,(this));\r\n        m.trainNo.set(TrainNo,this);\r\n        Management.trainListForStoring.push(this);\r\n    }\r\n    addStation(station:Station, time : Time){\r\n        this.routeTime.set(station.name,time);\r\n        this.routeStation.set(station.name,station.getID());\r\n        //console.log(this.routeTime);\r\n    }\r\n    Return_RouteTime(): Map<string, Time>{\r\n        return this.routeTime;\r\n    }\r\n    Return_RouteStation(): Map<string, number>{\r\n        return this.routeStation;\r\n    }\r\n    getID(){\r\n        return this.__Id;\r\n    }\r\n    static readTrain(train : Train){\r\n        let x = new Train(train[\"Name\"], train[\"TrainNo\"],new Map<string, Time>(), new Map<string, number>());\r\n        let i = 0;\r\n        x.__Id = train[\"__Id\"];\r\n        for(let k of Object.keys( train[\"routeTime\"])){\r\n            let m = Management.getInstance();\r\n            x.addStation(m.stationList.get(train[\"routeStation\"].get(k)!)!,Object.setPrototypeOf(train[\"routeTime\"].get(k), Time.prototype));\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Time.ts",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Order.ts",["297","298","299","300","301","302","303","304"],"import {Agent} from \"./Agent\";\r\nimport {Customer} from \"./Customer\";\r\nimport {AgentStatus, OrderStatus} from \"./Enum\";\r\nimport { Item } from \"./Item\";\r\nimport { Management } from \"./Management\";\r\nimport {Restaurant} from \"./Restaurant\";\r\nimport {Station} from \"./Station\";\r\nimport {Train} from \"./Train\";\r\nimport {Time} from \"./Time\";\r\n\r\nexport class Order{\r\n    static unique =0;\r\n    private __customer:Customer;\r\n    Order_Status:Array<string> = [];\r\n    private __agent: Array<number> = [];\r\n    private __seatNumber: string;\r\n    private __train: number;\r\n    private __deliveryStation: number|null;\r\n    private __selectedItems : Array<Item> = [];\r\n    private __Restaurants = new Set<Restaurant>();\r\n    __OrderTime : Time;\r\n    orderId;\r\n    constructor(customer:Customer,status:number=0,items:Array<Item>,seat_Number:string,train:number, delivery_station:number|null = null){\r\n        this.__customer=customer;\r\n        customer.addOrder(this);\r\n        this.__seatNumber=seat_Number;\r\n        this.__train=train;\r\n        this.__deliveryStation=delivery_station;\r\n        this.__selectedItems=items;\r\n        for(let i in items){\r\n            this.Order_Status.push(OrderStatus[0]);\r\n        }\r\n        this.__OrderTime = Time.getCurrentTime();\r\n        this.orderId = Order.unique++;\r\n        customer.addOrder(this);\r\n        let m = Management.getInstance();\r\n        for(let i of items){\r\n            let x  = m.ApprovedRestaurants.get(i.restaurant);\r\n            if(x)\r\n            this.__Restaurants.add(x);\r\n        }\r\n    }\r\n\r\n    setDeliveryStation(station : number){\r\n        this.__deliveryStation = station;\r\n    }\r\n\r\n    addAgent(Agent : number){\r\n        this.__agent.push(Agent);\r\n    }\r\n\r\n    addItem(Item : Item){\r\n        this.__selectedItems.push(Item);\r\n        let m = Management.getInstance();\r\n        let ar=m.ApprovedRestaurants.get(Item.restaurant);\r\n        if(ar){\r\n        this.__Restaurants.add(ar);\r\n        }\r\n        this.Order_Status.push(OrderStatus[0]);\r\n    }\r\n\r\n    Track_Order(){\r\n        return this.Order_Status;\r\n    }\r\n\r\n    updateOrderStatus(status:number, Item : Item|null = null){\r\n        switch (status){\r\n            case 0:\r\n                break;\r\n            case 1:\r\n                for(let i of this.Order_Status)\r\n                    i=OrderStatus[status];\r\n                for(let i of Array.from(this.__Restaurants)){\r\n                    i.orderlist.push(this);\r\n                }\r\n                break;\r\n            case 2:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n            case 3:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n            case 4:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n            case 5:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n            case 6:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    getCustomer(){\r\n        return this.__customer;\r\n    }\r\n\r\n    getAgent(){\r\n        return this.__agent;\r\n    }\r\n\r\n    getSeatNumber(){\r\n        return this.__seatNumber;\r\n    }\r\n\r\n    getTrain(){\r\n        return this.__train;\r\n    }\r\n\r\n    getDeliveryStation(){\r\n        return this.__deliveryStation;\r\n    }\r\n\r\n    getItems(){\r\n        return this.__selectedItems;\r\n    }\r\n\r\n    getReciept(){\r\n        return this.orderId;\r\n    }\r\n\r\n    getItemList(Restaurant : Restaurant) : Array<Item>{\r\n        let x = [];\r\n        for(let i of this.__selectedItems){\r\n            let m = Management.getInstance();\r\n            if(m.ApprovedRestaurants.get(i.restaurant)==Restaurant){\r\n                x.push(i);\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n\r\n    getOrderStatus() : [Array<Item>, Array<string>]{\r\n        if(!this.__OrderTime.sum(new Time(0,15)).lessThanEqual(Time.getCurrentTime())){\r\n            let j=0;\r\n            for(let i of this.__selectedItems){\r\n                if(this.Order_Status[j]==OrderStatus[1]){\r\n                    this.updateOrderStatus(3,i);\r\n                }\r\n            }\r\n        }\r\n        return [this.__selectedItems,this.Order_Status];\r\n    }\r\n    //getOrderStations(Restaurant : Restaurant) : Array<Station>{\r\n    //    let list = new Set<Station>();\r\n    //    let route = this.__train.Return_RouteStation();\r\n    //    let time = this.__train.Return_RouteTime();\r\n    //    for (let i of Array.from(route.keys())){\r\n    //        if(time.get(i)?.lessThanEqual(Time.getCurrentTime())){\r\n    //            for(let k of this.__selectedItems){\r\n    //                let temp = route.get(i);\r\n    //                if(temp)\r\n    //                if(Management.stationList.get(temp)?.getItem().indexOf(k)!=-1 && Restaurant.getPrice(k.name)!=-1){\r\n    //                    let temp2 = Management.stationList.get(temp);\r\n    //                    if(temp2)\r\n    //                    list.add(temp2);\r\n    //                }\r\n    //            }\r\n    //        }\r\n    //    }\r\n    //    return Array.from(list);\r\n    //}\r\n    static readOrder(order : Order,customer : Customer){\r\n        let x = new Order(customer,0,new Array<Item>(),order[\"__seatNumber\"],order[\"__train\"]);\r\n        for(let i of order[\"__selectedItems\"])\r\n            x.addItem(Object.setPrototypeOf(i, Item.prototype));\r\n            x.__OrderTime = Object.setPrototypeOf(order[\"__OrderTime\"], Time.prototype);\r\n            x.Order_Status = order[\"Order_Status\"];\r\n            x.__agent = order[\"__agent\"];\r\n            x.orderId = order[\"orderId\"];\r\n            x.__deliveryStation = order[\"__deliveryStation\"];  \r\n            Customer.unique = Math.max(Customer.unique,order[\"orderId\"]+1);\r\n    }\r\n\r\n}\r\n// var c= new Customer(\"a\",\"B\",\"C\",\"d\");\r\n// var n= new Agent();\r\n// var m=new Map();\r\n// m.set(\"!1\",\"Try\");\r\n// var t=new Train(\"train\",m);\r\n// var s=new Station(\"asdd\");\r\n// var item=[\"x\",\"y\",\"z\"];\r\n// var o= new Order(c,1,n,\"a11\",t,s,item);\r\n// console.log(o.Track_Order());\r\n","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Account.ts",["305"],"import {AccountType} from \"./Enum\";\r\n\r\nexport class Account{\r\n    static unique = 0;  \r\n    protected _ID;\r\n    protected _name;\r\n    protected _type;\r\n    protected _openDate;\r\n    protected _password;\r\n    protected _username;\r\n    constructor(name:string,username:string,Date:Date,Type:AccountType,Password:string, ID:number = -1){\r\n        if(ID==-1)\r\n            this._ID = Account.unique++;\r\n        else\r\n            this._ID = ID;\r\n        this._name = name;\r\n        this._type = Type;\r\n        this._username = username;\r\n        this._openDate = Date;\r\n        this._password = Password;\r\n    }\r\n    getID(){\r\n        return this._ID;\r\n    }\r\n    getType(){\r\n        return this._type;\r\n    }\r\n    getName(){\r\n        return this._name;\r\n    }\r\n    getOpenDate(){\r\n        return this._openDate;\r\n    }\r\n    checkPassword(password:string):boolean{\r\n        return (this._password === password);\r\n    }\r\n    getUsername(){\r\n        return this._username;\r\n    }\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Enum.ts",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\RegistrationRouter.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Design\\Colors.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\AccountDashRoutes\\AgentDashRouter.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\AccountDashRoutes\\RestaurantDashRouter.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\AccountDashRoutes\\ManagementDashRouter.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Routers\\AccountDashRoutes\\PassengerDashRouter.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\System.ts",["306"],"import {Agent} from \"./Agent\";\r\n\r\nexport class System{\r\n    static active_agent: Array<Agent> = [];\r\n    constructor(){\r\n    }\r\n    \r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Components\\DashBoard\\DashBoard.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Menu.ts",["307","308","309","310","311"],"import { readSync } from \"node:fs\";\r\nimport {Item} from \"./Item\"\r\nimport { Restaurant } from \"./Restaurant\";\r\nexport class Menu{\r\n    private __Items : Array<Item> = [];\r\n    constructor(){\r\n    }\r\n    getMenuItems(){\r\n        return this.__Items;\r\n    }\r\n    getPrice(s:string){\r\n        for (let i of this.__Items){\r\n            if(i.name==s){\r\n                return i.price;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    addItem(Item : Item){\r\n        this.__Items.push(Item);\r\n    }\r\n    addItembyName(name:string , price:number, type: number, restaurant : number){\r\n        let item = new Item(name, price, type,restaurant);\r\n        this.__Items.push(item);\r\n    }\r\n    removeItem(item: Item){\r\n        this.__Items.forEach((value,index)=>{\r\n            if(value==item) this.__Items.splice(index,1);\r\n            return;\r\n        });\r\n    }\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Logic\\Item.ts",["312","313"],"import {FoodType} from \"./Enum\"\r\nimport { Restaurant } from \"./Restaurant\";\r\nimport { Time } from \"./Time\";\r\nexport class Item{\r\n    name: string;\r\n    price: number;\r\n    type : string;\r\n    restaurant : number;\r\n    constructor(name : string,price : number,type : number,restaurant : number){\r\n        this.name = name;\r\n        this.price = price;\r\n        this.type = FoodType[type];\r\n        this.restaurant = restaurant;\r\n    }\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\PassengerForm.js",["314","315","316"],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\RestaurantForm.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Agent\\AgentHomePage.js",["317"],"import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport Colors from \"../../../Design/Colors\";\r\nimport {Col, Row, Avatar} from \"antd\";\r\nimport AvatarImage from \"../../../Img/avatar.png\";\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\n\r\nexport default function AgentHomePage(props){\r\n    const colorStyles = {\r\n        headingColor: Colors.black,\r\n    }\r\n\r\n    const Heading = styled.h1`\r\n        font-size: 2rem;\r\n        font-weight: 600;\r\n        color: ${colorStyles.headingColor};\r\n    `\r\n\r\n    return(\r\n        <div className=\"agent-account-home\">\r\n            <Row>\r\n                <Col span={12}>\r\n                    <Avatar\r\n                        size={{ xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 100 }}\r\n                        icon={<UserOutlined/>}\r\n                    />\r\n                    <Heading>\r\n                        {props.account.getName()}\r\n                    </Heading>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Restaurant\\RestaurantHomePage.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Restaurant\\RestaurantOrdersPage.js",["318","319"],"import React from 'react';\r\nimport DashBoardCard from \"../../../Components/DashBoard/DashBoardCard\";\r\nimport {Button, Card, Form, List, message, Select} from \"antd\";\r\nimport {Management} from \"../../../Logic/Management\";\r\n\r\nexport default function RestaurantOrderPage(props){\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed: ',errorInfo);\r\n    }\r\n\r\n    const computeCost = (order) => {\r\n        let cost = 0;\r\n        for (let i = 0;i<props.account.getOrderDetails(order.orderId).length;i++){\r\n            cost += props.account.getOrderDetails(order.orderId)[i].price;\r\n        }\r\n        return cost;\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.account.orderlist.map(function(value, index){\r\n                    console.log(value);\r\n                    return (\r\n                        <Card title={\"Order ID \" + value.orderId} style={{ minWidth: \"2rem\", maxWidth:\"32%\" }}>\r\n                              <List\r\n                                  style={{margin: \"1rem\"}}\r\n                                  size=\"small\"\r\n                                  header={<div>All Items</div>}\r\n                                  bordered\r\n                                  dataSource={props.account.getOrderDetails(value.orderId)}\r\n                                  renderItem={item => (\r\n                                      <List.Item style={{borderWidth: \"1px\", borderStyle: \"solid\"}}>\r\n                                          <p>{item.name}</p>\r\n                                      </List.Item>\r\n                                  )}\r\n                              />\r\n                              <div>\r\n                                  <div style={{textAlign: \"center\", padding: \"0 0 1rem\"}}>\r\n                                      Total Cost: {computeCost(value)}\r\n                                  </div>\r\n                                  <Form\r\n                                        name=\"basic\"\r\n                                        onFinish={(values) => {\r\n                                            value.addAgent(values.agent);\r\n                                            // for (let i = 0;i<props.account.getOrderDetails(value.orderId).length;i++){\r\n                                            //     value.updateOrderStatus(2, props.account.getOrderDetails(value.orderId)[i])\r\n                                            // }\r\n                                            message.success(\"Agent Assigned\");\r\n                                        }}\r\n                                        onFinishFailed={onFinishFailed}\r\n                                        scrollToFirstError\r\n                                    >\r\n                                      <Form.Item\r\n                                        label=\"Input Agent: \"\r\n                                        name=\"agent\"\r\n                                        rules = {[\r\n                                            {\r\n                                                required: true,\r\n                                                message: \"Input Station to get Items List\",\r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Select\r\n                                            showSearch\r\n                                            style={{ width: 200 }}\r\n                                            placeholder=\"Select an Agent: \"\r\n                                            optionFilterProp=\"children\"\r\n                                            filterOption={(input, option) =>\r\n                                              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            {\r\n                                                props.account.getFreeAgents().map((agent, index) => (\r\n                                                    <Select.Option key={agent.getID()} value={agent.getID()}>{agent.getName()}</Select.Option>\r\n                                                ))\r\n                                            }\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                      <Form.Item>\r\n                                          <Button type=\"primary\" htmlType=\"submit\">Select Agent</Button>\r\n                                      </Form.Item>\r\n                                  </Form>\r\n                              </div>\r\n                        </Card>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Agent\\AgentOrderPage.js",["320","321"],"import React from 'react';\r\nimport {Row, Col, Card, List} from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport {Management} from \"../../../Logic/Management\";\r\nimport {Order} from \"../../../Logic/Order\";\r\n\r\n\r\n\r\nexport default function AgentOrderPage(props){\r\n    // let allotedOrder = props.account.getAllotedOrder();\r\n    let allotedOrder = props.account.getAllotedOrder();\r\n    let restaurant = Management.ApprovedRestaurants.get(props.account.restaurant);\r\n    // console.log(allotedOrder);\r\n    const MenuItem = styled.p`\r\n        font-weight: 600;\r\n        margin-left: 5rem\r\n    `\r\n\r\n    return(\r\n        <div className=\"agent-account-order\">\r\n            <Row>\r\n                <Col span={12}>\r\n                    <h1>Order Summary</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {\r\n                    allotedOrder &&\r\n                        <List\r\n                  size=\"large\"\r\n                  header={<h1 style={{fontSize: \"2rem\"}}>Order Id {allotedOrder.orderId}</h1>}\r\n                  bordered\r\n                  dataSource={restaurant.getOrderDetails(allotedOrder.orderId)}\r\n                  renderItem={item => (\r\n                      <List.Item style={{borderWidth: \"1px 0 1px 0\", borderStyle: \"solid\"}}>\r\n                          <Row style={{width: \"100%\", fontSize: \"1.3rem\"}}>\r\n                              <Col span={12}>\r\n                                  <MenuItem>{item.name}</MenuItem>\r\n                              </Col>\r\n                              <Col span={12}>\r\n                                  <p style={{float: \"right\", marginRight: \"5rem\"}}>Price: {item.price}Rs</p>\r\n                              </Col>\r\n                          </Row>\r\n                      </List.Item>\r\n                  )}\r\n                />\r\n                }\r\n                {\r\n                    !allotedOrder && <p>No Order Alloted</p>\r\n                }\r\n            </Row>\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Restaurant\\RestaurantMenuPage.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Restaurant\\RestaurantAgentsPage.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Management\\ManagementHomePage.js",["322"],"import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport Colors from \"../../../Design/Colors\";\r\nimport {Col, Row, Avatar} from \"antd\";\r\nimport AvatarImage from \"../../../Img/avatar.png\";\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\n\r\nexport default function ManagementHomePage(props){\r\n    const colorStyles = {\r\n        headingColor: Colors.black,\r\n    }\r\n\r\n    const Heading = styled.h1`\r\n        font-size: 2rem;\r\n        font-weight: 600;\r\n        color: ${colorStyles.headingColor};\r\n    `\r\n\r\n    return(\r\n        <div className=\"agent-account-home\">\r\n            <Row>\r\n                <Col span={12}>\r\n                    <Avatar\r\n                        size={{ xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 100 }}\r\n                        icon={<UserOutlined/>}\r\n                    />\r\n                    <Heading>\r\n                        Management\r\n                    </Heading>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n\r\n            </Row>\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Management\\ManagementStatsPage.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerHomePage.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerOrderPage.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Management\\ManagementRailwaysPage.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Components\\LogoutButton\\LogoutButton.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\RouteForm.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\StationForm.js",["323","324"],"import React from 'react';\r\nimport {DatePicker, Col, Form, Input, Row, Button, message} from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport {Agent} from \"../../Logic/Agent\";\r\n\r\nexport default function AgentForm({restaurant}){\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed: ',errorInfo);\r\n    }\r\n\r\n    const handleSubmit = (values) => {\r\n        // Function to Add Station\r\n\r\n        message.success(\"Station Created\");\r\n    }\r\n\r\n    const HeadingStyled = styled.h2`\r\n        font-size: 1.5rem;\r\n        font-weight: 600;\r\n    `\r\n\r\n    return (\r\n        <div>\r\n            <HeadingStyled>Fill in the form to add a Station</HeadingStyled>\r\n            <Form\r\n                name=\"basic\"\r\n                onFinish={handleSubmit}\r\n                onFinishFailed={onFinishFailed}\r\n                scrollToFirstError\r\n            >\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={24}>\r\n                        <Form.Item\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Name required\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Captcha\"\r\n                            extra=\"We make sure that you are human\"\r\n                        >\r\n                            <Row gutter={8}>\r\n                                <Col span={12}>\r\n                                    <Form.Item\r\n                                        name=\"captcha\"\r\n                                        noStyle\r\n                                        rules={[\r\n                                        ]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Button>Get Captcha</Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col span={5}>\r\n                                    <Form.Item >\r\n                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                            Submit\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerBookingPage.js",["325"],"import React, {useEffect} from 'react';\r\nimport {Button, Card, Col, Collapse, Row} from \"antd\";\r\nimport {func} from \"prop-types\";\r\n\r\nexport default function PassengerBookingPage(props){\r\n\r\n    const removeItem = (item) => {\r\n        let newOrderList = props.orderItems;\r\n        let index = newOrderList.indexOf(item);\r\n        if (index > -1) {\r\n            newOrderList.splice(index, 1);\r\n        }\r\n        props.setOrderItems(newOrderList);\r\n    }\r\n\r\n    const calculateCost = () => {\r\n        let cost = 0;\r\n        for (let i = 0; i<props.orderItems.length;i++){\r\n            cost += props.orderItems[i].price;\r\n        }\r\n        return cost;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n    }, [props.orderlist])\r\n\r\n    console.log(props.orderItems);\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={12}>\r\n                    <Card title=\"Cart\" className=\"cart-card\">\r\n                        <Collapse accordion>\r\n                            {\r\n                                props.orderItems.map(function (value, index){\r\n                                    return(\r\n                                        <Collapse.Panel key={index} header={value.name}>\r\n                                            <p>\r\n                                                Price: {value.price} <br/>\r\n                                                <Button onClick={() => {removeItem(value)}}>Remove from Cart</Button>\r\n                                            </p>\r\n                                        </Collapse.Panel>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Collapse>\r\n                    </Card>\r\n                </Col>\r\n                <Col span = {12}>\r\n                    <Card title=\"Booking Summary\" className=\"booking-card\">\r\n                        <p>\r\n                            Total Cost: {calculateCost()}\r\n                        </p>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerItemPage.js",["326"],"import React from 'react';\r\nimport {Database} from \"../../../Logic/Database\";\r\nimport {Management} from \"../../../Logic/Management\";\r\nimport {Time} from \"../../../Logic/Time\";\r\nimport {Button, Collapse, message} from \"antd\";\r\nimport {Item} from \"../../../Logic/Item\";\r\n\r\nexport default function PassengerItemPage(props){\r\n\r\n    let [mapD, mapP] = Database.getMenu(props.train, new Time(23, 59));\r\n\r\n    const handleClick = (item) => {\r\n        let newOrderList = props.orderItems;\r\n        newOrderList.push(item);\r\n        message.success(item.name + ' added to cart.');\r\n        props.setOrderItems(newOrderList);\r\n    }\r\n\r\n    const renderList = () => {\r\n        let rows = [];\r\n        console.log(mapD);\r\n        for (const [keys, values] of mapD.entries()){\r\n            rows.push(\r\n                <Collapse.Panel header={keys} key={keys}>\r\n                    <Collapse accordion>\r\n                        {\r\n                            values.map(function (item, index){\r\n                                let l = Management.ApprovedRestaurants.get(item.restaurant);\r\n                                let name;\r\n                                if (l){\r\n                                    name = l.getName();\r\n                                }\r\n                                else{\r\n                                    name = null;\r\n                                }\r\n                                return (\r\n                                    <Collapse.Panel key={index} header={item.name}>\r\n                                    <p>\r\n                                        Price: {item.price}<br/>\r\n                                        Restaurant: {name}<br/>\r\n                                        Expected Time of Delivery: {mapP.get(keys)[index].hour}:{mapP.get(keys)[index].min} <br />\r\n                                        <Button onClick={(e) => handleClick(item)}>Add to Cart</Button>\r\n                                    </p>\r\n                                </Collapse.Panel>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Collapse>\r\n                </Collapse.Panel>\r\n            );\r\n        }\r\n        console.log(rows);\r\n        return rows;\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Collapse accordion style={{margin: \"2rem\"}}>\r\n                {renderList()}\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\DashBoardPages\\Passenger\\PassengerStationPage.js",[],"C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\AgentForm.js",["327"],"import React from 'react';\r\nimport {DatePicker, Col, Form, Input, Row, Button, message} from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport {Agent} from \"../../Logic/Agent\";\r\n\r\nexport default function AgentForm({restaurant}){\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed: ',errorInfo);\r\n    }\r\n\r\n    const handleSubmit = (values) => {\r\n        let a = new Agent(values.firstname + \" \" + values.lastname, values.username, values.password, restaurant, null, null);\r\n        message.success(\"Agent Created\");\r\n    }\r\n\r\n    const HeadingStyled = styled.h2`\r\n        text-align: center;\r\n        font-size: 1.5rem;\r\n        font-weight: 600;\r\n    `\r\n\r\n    return (\r\n        <div>\r\n            <HeadingStyled>Fill in the form to sign up as Agent</HeadingStyled>\r\n            <Form\r\n                name=\"basic\"\r\n                onFinish={handleSubmit}\r\n                onFinishFailed={onFinishFailed}\r\n                scrollToFirstError\r\n            >\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={24}>\r\n                        <Form.Item\r\n                            label=\"First Name\"\r\n                            name=\"firstName\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Name required\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={24}>\r\n                        <Form.Item\r\n                            label=\"Last Name: \"\r\n                            name=\"lastName\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Name required\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{width:\"100%\"}}>\r\n                    <Col span={24}>\r\n                        <Form.Item\r\n                            label=\"E-mail\"\r\n                            name=\"email\"\r\n                            rules={[\r\n                                {\r\n                                    type: 'email',\r\n                                    message: 'The input is not valid Email',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={24}>\r\n                        <Form.Item\r\n                            label=\"Enter Username: \"\r\n                            name=\"username\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Username needed\",\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Enter Password: \"\r\n                            name=\"password\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Password needed\",\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Input.Password />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Confirm Password: \"\r\n                            name=\"confirm\"\r\n                            dependencies={['password']}\r\n                            hasFeedback\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please confirm password'\r\n                                },\r\n                                ({ getFieldValue }) => ({\r\n                                    validator(_, value){\r\n                                        if (!value || getFieldValue('password') === value){\r\n                                            return Promise.resolve();\r\n                                        }\r\n\r\n                                        return Promise.reject(new Error(\"Passwords don't match\"))\r\n                                    }\r\n                                })\r\n                            ]}\r\n                        >\r\n                            <Input.Password />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Phone Number: \"\r\n                            name=\"phoneNo\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Phone Number required\",\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6} offset={3} style={{objectAlign: \"center\"}}>\r\n                        <Form.Item\r\n                            label=\"Date of Birth: \"\r\n                            name=\"dob\"\r\n                            rules={[\r\n                            ]}\r\n                        >\r\n                            <DatePicker />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Captcha\"\r\n                            extra=\"We make sure that you are human\"\r\n                        >\r\n                            <Row gutter={8}>\r\n                                <Col span={12}>\r\n                                    <Form.Item\r\n                                        name=\"captcha\"\r\n                                        noStyle\r\n                                        rules={[\r\n                                        ]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Button>Get Captcha</Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col span={5}>\r\n                                    <Form.Item >\r\n                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                            Submit\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Pages\\Registration\\RestaurantMenuForm.js",["328","329","330"],"import React from 'react';\r\nimport {DatePicker, Col, Form, Input, Row, Button, message, InputNumber, Select} from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport {Management} from \"../../Logic/Management\";\r\nimport {FoodType} from \"../../Logic/Enum\";\r\n\r\nexport default function RestaurantMenuForm(){\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed: ',errorInfo);\r\n    }\r\n\r\n    const handleSubmit = (values) => {\r\n        // Function to Add Station\r\n\r\n        message.success(\"Item Created\");\r\n    }\r\n\r\n    const HeadingStyled = styled.h2`\r\n        font-size: 1.5rem;\r\n        font-weight: 600;\r\n    `\r\n    const StringIsNotNumber = value => isNaN(Number(value)) === true;\r\n\r\n    return (\r\n        <div>\r\n            <HeadingStyled>Fill in the form to add an Item</HeadingStyled>\r\n            <Form\r\n                name=\"basic\"\r\n                onFinish={handleSubmit}\r\n                onFinishFailed={onFinishFailed}\r\n                scrollToFirstError\r\n            >\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={24}>\r\n                        <Form.Item\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Name required\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{width: \"100%\"}}>\r\n                    <Col span={8}>\r\n                        <Form.Item\r\n                            label=\"Price\"\r\n                            name=\"price\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Price required\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <InputNumber />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Form.Item\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Name required\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Select\r\n                                showSearch\r\n                                style={{ width: 200 }}\r\n                                placeholder=\"Select an Item type\"\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                            }\r\n                        >\r\n                            {\r\n                                Object.keys(FoodType).filter(StringIsNotNumber).map((type, index) => (\r\n                                    <Select.Option value={index} key={index}>{type}</Select.Option>\r\n                                ))\r\n                            }\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\shash\\OneDrive\\Desktop\\Gits\\TGHM_final\\src\\Components\\DashBoard\\DashBoardCard.js",[],{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","replacedBy":"334"},{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","replacedBy":"334"},{"ruleId":"335","severity":1,"message":"336","line":1,"column":16,"nodeType":"337","messageId":"338","endLine":1,"endColumn":24},{"ruleId":"335","severity":1,"message":"339","line":7,"column":9,"nodeType":"337","messageId":"338","endLine":7,"endColumn":17},{"ruleId":"335","severity":1,"message":"336","line":1,"column":16,"nodeType":"337","messageId":"338","endLine":1,"endColumn":24},{"ruleId":"335","severity":1,"message":"339","line":8,"column":9,"nodeType":"337","messageId":"338","endLine":8,"endColumn":17},{"ruleId":"335","severity":1,"message":"340","line":9,"column":9,"nodeType":"337","messageId":"338","endLine":9,"endColumn":19},{"ruleId":"341","severity":1,"message":"342","line":4,"column":10,"nodeType":"337","messageId":"338","endLine":4,"endColumn":21},{"ruleId":"341","severity":1,"message":"343","line":5,"column":10,"nodeType":"337","messageId":"338","endLine":5,"endColumn":14},{"ruleId":"341","severity":1,"message":"344","line":6,"column":10,"nodeType":"337","messageId":"338","endLine":6,"endColumn":14},{"ruleId":"341","severity":1,"message":"345","line":12,"column":10,"nodeType":"337","messageId":"338","endLine":12,"endColumn":18},{"ruleId":"341","severity":1,"message":"339","line":13,"column":10,"nodeType":"337","messageId":"338","endLine":13,"endColumn":18},{"ruleId":"341","severity":1,"message":"346","line":20,"column":9,"nodeType":"337","messageId":"338","endLine":20,"endColumn":11},{"ruleId":"341","severity":1,"message":"347","line":21,"column":9,"nodeType":"337","messageId":"338","endLine":21,"endColumn":11},{"ruleId":"341","severity":1,"message":"348","line":66,"column":9,"nodeType":"337","messageId":"338","endLine":66,"endColumn":11},{"ruleId":"341","severity":1,"message":"349","line":67,"column":9,"nodeType":"337","messageId":"338","endLine":67,"endColumn":11},{"ruleId":"341","severity":1,"message":"350","line":68,"column":9,"nodeType":"337","messageId":"338","endLine":68,"endColumn":11},{"ruleId":"341","severity":1,"message":"351","line":69,"column":9,"nodeType":"337","messageId":"338","endLine":69,"endColumn":11},{"ruleId":"341","severity":1,"message":"352","line":70,"column":9,"nodeType":"337","messageId":"338","endLine":70,"endColumn":11},{"ruleId":"341","severity":1,"message":"353","line":71,"column":9,"nodeType":"337","messageId":"338","endLine":71,"endColumn":11},{"ruleId":"341","severity":1,"message":"354","line":72,"column":9,"nodeType":"337","messageId":"338","endLine":72,"endColumn":11},{"ruleId":"355","severity":1,"message":"356","line":58,"column":19,"nodeType":"357","messageId":"358","endLine":58,"endColumn":21},{"ruleId":"341","severity":1,"message":"359","line":64,"column":5,"nodeType":"337","messageId":"338","endLine":64,"endColumn":6},{"ruleId":"335","severity":1,"message":"360","line":1,"column":16,"nodeType":"337","messageId":"338","endLine":1,"endColumn":25},{"ruleId":"335","severity":1,"message":"361","line":4,"column":9,"nodeType":"337","messageId":"338","endLine":4,"endColumn":15},{"ruleId":"335","severity":1,"message":"362","line":4,"column":33,"nodeType":"337","messageId":"338","endLine":4,"endColumn":41},{"ruleId":"335","severity":1,"message":"363","line":4,"column":43,"nodeType":"337","messageId":"338","endLine":4,"endColumn":47},{"ruleId":"335","severity":1,"message":"364","line":4,"column":49,"nodeType":"337","messageId":"338","endLine":4,"endColumn":54},{"ruleId":"335","severity":1,"message":"340","line":7,"column":9,"nodeType":"337","messageId":"338","endLine":7,"endColumn":19},{"ruleId":"335","severity":1,"message":"365","line":11,"column":8,"nodeType":"337","messageId":"338","endLine":11,"endColumn":11},{"ruleId":"335","severity":1,"message":"366","line":13,"column":8,"nodeType":"337","messageId":"338","endLine":13,"endColumn":11},{"ruleId":"335","severity":1,"message":"367","line":71,"column":11,"nodeType":"337","messageId":"338","endLine":71,"endColumn":25},{"ruleId":"335","severity":1,"message":"368","line":75,"column":11,"nodeType":"337","messageId":"338","endLine":75,"endColumn":24},{"ruleId":"335","severity":1,"message":"369","line":8,"column":9,"nodeType":"337","messageId":"338","endLine":8,"endColumn":17},{"ruleId":"335","severity":1,"message":"370","line":11,"column":7,"nodeType":"337","messageId":"338","endLine":11,"endColumn":18},{"ruleId":"341","severity":1,"message":"369","line":3,"column":10,"nodeType":"337","messageId":"338","endLine":3,"endColumn":18},{"ruleId":"341","severity":1,"message":"342","line":4,"column":10,"nodeType":"337","messageId":"338","endLine":4,"endColumn":21},{"ruleId":"341","severity":1,"message":"344","line":6,"column":10,"nodeType":"337","messageId":"338","endLine":6,"endColumn":14},{"ruleId":"341","severity":1,"message":"371","line":8,"column":10,"nodeType":"337","messageId":"338","endLine":8,"endColumn":17},{"ruleId":"341","severity":1,"message":"345","line":12,"column":10,"nodeType":"337","messageId":"338","endLine":12,"endColumn":18},{"ruleId":"341","severity":1,"message":"372","line":13,"column":10,"nodeType":"337","messageId":"338","endLine":13,"endColumn":17},{"ruleId":"341","severity":1,"message":"373","line":14,"column":10,"nodeType":"337","messageId":"338","endLine":14,"endColumn":16},{"ruleId":"341","severity":1,"message":"374","line":15,"column":8,"nodeType":"337","messageId":"338","endLine":15,"endColumn":20},{"ruleId":"341","severity":1,"message":"375","line":16,"column":8,"nodeType":"337","messageId":"338","endLine":16,"endColumn":22},{"ruleId":"341","severity":1,"message":"376","line":17,"column":8,"nodeType":"337","messageId":"338","endLine":17,"endColumn":20},{"ruleId":"341","severity":1,"message":"377","line":18,"column":8,"nodeType":"337","messageId":"338","endLine":18,"endColumn":18},{"ruleId":"341","severity":1,"message":"378","line":19,"column":8,"nodeType":"337","messageId":"338","endLine":19,"endColumn":17},{"ruleId":"341","severity":1,"message":"379","line":168,"column":29,"nodeType":"337","messageId":"338","endLine":168,"endColumn":30},{"ruleId":"355","severity":1,"message":"380","line":54,"column":26,"nodeType":"357","messageId":"358","endLine":54,"endColumn":28},{"ruleId":"355","severity":1,"message":"380","line":15,"column":14,"nodeType":"357","messageId":"358","endLine":15,"endColumn":16},{"ruleId":"355","severity":1,"message":"380","line":84,"column":26,"nodeType":"357","messageId":"358","endLine":84,"endColumn":28},{"ruleId":"341","severity":1,"message":"381","line":100,"column":17,"nodeType":"337","messageId":"338","endLine":100,"endColumn":30},{"ruleId":"382","severity":1,"message":"383","line":101,"column":39,"nodeType":"384","messageId":"385","endLine":101,"endColumn":52},{"ruleId":"355","severity":1,"message":"380","line":106,"column":26,"nodeType":"357","messageId":"358","endLine":106,"endColumn":28},{"ruleId":"355","severity":1,"message":"380","line":113,"column":26,"nodeType":"357","messageId":"358","endLine":113,"endColumn":28},{"ruleId":"355","severity":1,"message":"380","line":128,"column":17,"nodeType":"357","messageId":"358","endLine":128,"endColumn":19},{"ruleId":"355","severity":1,"message":"380","line":17,"column":14,"nodeType":"357","messageId":"358","endLine":17,"endColumn":16},{"ruleId":"341","severity":1,"message":"386","line":42,"column":13,"nodeType":"337","messageId":"338","endLine":42,"endColumn":14},{"ruleId":"341","severity":1,"message":"387","line":1,"column":9,"nodeType":"337","messageId":"338","endLine":1,"endColumn":14},{"ruleId":"341","severity":1,"message":"388","line":3,"column":9,"nodeType":"337","messageId":"338","endLine":3,"endColumn":20},{"ruleId":"341","severity":1,"message":"371","line":7,"column":9,"nodeType":"337","messageId":"338","endLine":7,"endColumn":16},{"ruleId":"341","severity":1,"message":"389","line":8,"column":9,"nodeType":"337","messageId":"338","endLine":8,"endColumn":14},{"ruleId":"341","severity":1,"message":"386","line":30,"column":17,"nodeType":"337","messageId":"338","endLine":30,"endColumn":18},{"ruleId":"341","severity":1,"message":"386","line":72,"column":21,"nodeType":"337","messageId":"338","endLine":72,"endColumn":22},{"ruleId":"355","severity":1,"message":"380","line":142,"column":55,"nodeType":"357","messageId":"358","endLine":142,"endColumn":57},{"ruleId":"355","severity":1,"message":"380","line":153,"column":40,"nodeType":"357","messageId":"358","endLine":153,"endColumn":42},{"ruleId":"355","severity":1,"message":"380","line":12,"column":14,"nodeType":"357","messageId":"358","endLine":12,"endColumn":16},{"ruleId":"390","severity":1,"message":"391","line":5,"column":5,"nodeType":"392","messageId":"393","endLine":6,"endColumn":6},{"ruleId":"341","severity":1,"message":"394","line":1,"column":10,"nodeType":"337","messageId":"338","endLine":1,"endColumn":18},{"ruleId":"341","severity":1,"message":"395","line":3,"column":10,"nodeType":"337","messageId":"338","endLine":3,"endColumn":20},{"ruleId":"390","severity":1,"message":"391","line":6,"column":5,"nodeType":"392","messageId":"393","endLine":7,"endColumn":6},{"ruleId":"355","severity":1,"message":"380","line":13,"column":22,"nodeType":"357","messageId":"358","endLine":13,"endColumn":24},{"ruleId":"355","severity":1,"message":"380","line":28,"column":21,"nodeType":"357","messageId":"358","endLine":28,"endColumn":23},{"ruleId":"341","severity":1,"message":"395","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":20},{"ruleId":"341","severity":1,"message":"396","line":3,"column":10,"nodeType":"337","messageId":"338","endLine":3,"endColumn":14},{"ruleId":"335","severity":1,"message":"339","line":5,"column":9,"nodeType":"337","messageId":"338","endLine":5,"endColumn":17},{"ruleId":"335","severity":1,"message":"340","line":6,"column":9,"nodeType":"337","messageId":"338","endLine":6,"endColumn":19},{"ruleId":"335","severity":1,"message":"397","line":16,"column":13,"nodeType":"337","messageId":"338","endLine":16,"endColumn":14},{"ruleId":"335","severity":1,"message":"398","line":5,"column":8,"nodeType":"337","messageId":"338","endLine":5,"endColumn":19},{"ruleId":"335","severity":1,"message":"399","line":2,"column":8,"nodeType":"337","messageId":"338","endLine":2,"endColumn":21},{"ruleId":"335","severity":1,"message":"340","line":4,"column":9,"nodeType":"337","messageId":"338","endLine":4,"endColumn":19},{"ruleId":"335","severity":1,"message":"400","line":2,"column":19,"nodeType":"337","messageId":"338","endLine":2,"endColumn":23},{"ruleId":"335","severity":1,"message":"401","line":5,"column":9,"nodeType":"337","messageId":"338","endLine":5,"endColumn":14},{"ruleId":"335","severity":1,"message":"398","line":5,"column":8,"nodeType":"337","messageId":"338","endLine":5,"endColumn":19},{"ruleId":"335","severity":1,"message":"402","line":2,"column":9,"nodeType":"337","messageId":"338","endLine":2,"endColumn":19},{"ruleId":"335","severity":1,"message":"387","line":4,"column":9,"nodeType":"337","messageId":"338","endLine":4,"endColumn":14},{"ruleId":"335","severity":1,"message":"403","line":3,"column":9,"nodeType":"337","messageId":"338","endLine":3,"endColumn":13},{"ruleId":"335","severity":1,"message":"343","line":6,"column":9,"nodeType":"337","messageId":"338","endLine":6,"endColumn":13},{"ruleId":"335","severity":1,"message":"404","line":13,"column":13,"nodeType":"337","messageId":"338","endLine":13,"endColumn":14},{"ruleId":"335","severity":1,"message":"402","line":2,"column":9,"nodeType":"337","messageId":"338","endLine":2,"endColumn":19},{"ruleId":"335","severity":1,"message":"361","line":2,"column":44,"nodeType":"337","messageId":"338","endLine":2,"endColumn":50},{"ruleId":"335","severity":1,"message":"340","line":4,"column":9,"nodeType":"337","messageId":"338","endLine":4,"endColumn":19},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Database' is defined but never used.","'Management' is defined but never used.","@typescript-eslint/no-unused-vars","'AccountType' is defined but never used.","'Item' is defined but never used.","'Menu' is defined but never used.","'readFile' is defined but never used.","'c2' is assigned a value but never used.","'c3' is assigned a value but never used.","'a1' is assigned a value but never used.","'a2' is assigned a value but never used.","'a3' is assigned a value but never used.","'a4' is assigned a value but never used.","'a5' is assigned a value but never used.","'a6' is assigned a value but never used.","'a7' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'m' is assigned a value but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'Checkbox' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'Bg3' is defined but never used.","'Bg5' is defined but never used.","'onFinishFailed' is assigned a value but never used.","'CarouselStyle' is assigned a value but never used.","'Customer' is defined but never used.","'allAccounts' is assigned a value but never used.","'Station' is defined but never used.","'Account' is defined but never used.","'System' is defined but never used.","'CustomerData' is defined but never used.","'RestaurantData' is defined but never used.","'StationsData' is defined but never used.","'TrainsData' is defined but never used.","'AgentData' is defined but never used.","'x' is assigned a value but never used.","Expected '===' and instead saw '=='.","'type' is assigned a value but never used.","@typescript-eslint/consistent-type-assertions","Use 'as any' instead of '<any>'.","TSTypeAssertion","as","'i' is assigned a value but never used.","'Agent' is defined but never used.","'AgentStatus' is defined but never used.","'Train' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'readSync' is defined but never used.","'Restaurant' is defined but never used.","'Time' is defined but never used.","'c' is assigned a value but never used.","'AvatarImage' is defined but never used.","'DashBoardCard' is defined but never used.","'Card' is defined but never used.","'Order' is defined but never used.","'DatePicker' is defined but never used.","'func' is defined but never used.","'a' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]