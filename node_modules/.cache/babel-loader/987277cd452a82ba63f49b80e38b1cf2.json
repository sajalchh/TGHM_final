{"ast":null,"code":"import { Customer } from \"./Customer\";\nimport { OrderStatus } from \"./Enum\";\nimport { Item } from \"./Item\";\nimport { Management } from \"./Management\";\nimport { Time } from \"./Time\";\nexport class Order {\n  constructor(customer, status = 0, items, seat_Number, train, delivery_station = null) {\n    this.__customer = void 0;\n    this.Order_Status = [];\n    this.__agent = [];\n    this.__seatNumber = void 0;\n    this.__train = void 0;\n    this.__deliveryStation = void 0;\n    this.__selectedItems = [];\n    this.__Restaurants = new Set();\n    this.__OrderTime = void 0;\n    this.orderId = void 0;\n    this.__customer = customer;\n    customer.addOrder(this);\n    this.__seatNumber = seat_Number;\n    this.__train = train;\n    this.__deliveryStation = delivery_station;\n    this.__selectedItems = items;\n\n    for (let i in items) {\n      this.Order_Status.push(OrderStatus[0]);\n    }\n\n    this.__OrderTime = Time.getCurrentTime();\n    this.orderId = Order.unique++;\n    customer.addOrder(this);\n\n    for (let i of items) {\n      let x = Management.ApprovedRestaurants.get(i.restaurant);\n      if (x) this.__Restaurants.add(x);\n    }\n  }\n\n  setDeliveryStation(station) {\n    this.__deliveryStation = station;\n  }\n\n  addAgent(Agent) {\n    this.__agent.push(Agent);\n  }\n\n  addItem(Item) {\n    this.__selectedItems.push(Item);\n\n    let ar = Management.ApprovedRestaurants.get(Item.restaurant);\n\n    if (ar) {\n      this.__Restaurants.add(ar);\n    }\n\n    this.Order_Status.push(OrderStatus[0]);\n  }\n\n  Track_Order() {\n    return this.Order_Status;\n  }\n\n  updateOrderStatus(status, Item = null) {\n    switch (status) {\n      case 0:\n        break;\n\n      case 1:\n        for (let i of this.Order_Status) i = OrderStatus[status];\n\n        for (let i of Array.from(this.__Restaurants)) {\n          i.orderlist.push(this);\n        }\n\n        break;\n\n      case 2:\n        if (Item != null) {\n          let index = this.__selectedItems.indexOf(Item);\n\n          this.Order_Status[index] = OrderStatus[index];\n        }\n\n        break;\n\n      case 3:\n        if (Item != null) {\n          let index = this.__selectedItems.indexOf(Item);\n\n          this.Order_Status[index] = OrderStatus[index];\n        }\n\n        break;\n\n      case 4:\n        if (Item != null) {\n          let index = this.__selectedItems.indexOf(Item);\n\n          this.Order_Status[index] = OrderStatus[index];\n        }\n\n        break;\n\n      case 5:\n        if (Item != null) {\n          let index = this.__selectedItems.indexOf(Item);\n\n          this.Order_Status[index] = OrderStatus[index];\n        }\n\n        break;\n\n      case 6:\n        if (Item != null) {\n          let index = this.__selectedItems.indexOf(Item);\n\n          this.Order_Status[index] = OrderStatus[index];\n        }\n\n        break;\n    }\n  }\n\n  getCustomer() {\n    return this.__customer;\n  }\n\n  getAgent() {\n    return this.__agent;\n  }\n\n  getSeatNumber() {\n    return this.__seatNumber;\n  }\n\n  getTrain() {\n    return this.__train;\n  }\n\n  getDeliveryStation() {\n    return this.__deliveryStation;\n  }\n\n  getItems() {\n    return this.__selectedItems;\n  }\n\n  getReciept() {\n    return this.orderId;\n  }\n\n  getItemList(Restaurant) {\n    let x = [];\n\n    for (let i of this.__selectedItems) {\n      if (Management.ApprovedRestaurants.get(i.restaurant) == Restaurant) {\n        x.push(i);\n      }\n    }\n\n    return x;\n  }\n\n  getOrderStatus() {\n    if (!this.__OrderTime.sum(new Time(0, 15)).lessThanEqual(Time.getCurrentTime())) {\n      let j = 0;\n\n      for (let i of this.__selectedItems) {\n        if (this.Order_Status[j] == OrderStatus[1]) {\n          this.updateOrderStatus(3, i);\n        }\n      }\n    }\n\n    return [this.__selectedItems, this.Order_Status];\n  } //getOrderStations(Restaurant : Restaurant) : Array<Station>{\n  //    let list = new Set<Station>();\n  //    let route = this.__train.Return_RouteStation();\n  //    let time = this.__train.Return_RouteTime();\n  //    for (let i of Array.from(route.keys())){\n  //        if(time.get(i)?.lessThanEqual(Time.getCurrentTime())){\n  //            for(let k of this.__selectedItems){\n  //                let temp = route.get(i);\n  //                if(temp)\n  //                if(Management.stationList.get(temp)?.getItem().indexOf(k)!=-1 && Restaurant.getPrice(k.name)!=-1){\n  //                    let temp2 = Management.stationList.get(temp);\n  //                    if(temp2)\n  //                    list.add(temp2);\n  //                }\n  //            }\n  //        }\n  //    }\n  //    return Array.from(list);\n  //}\n\n\n  static readOrder(order, customer) {\n    let x = new Order(customer, 0, new Array(), order[\"__seatNumber\"], order[\"__train\"]);\n\n    for (let i of order[\"__selectedItems\"]) x.addItem(Object.setPrototypeOf(i, Item.prototype));\n\n    x.__OrderTime = Object.setPrototypeOf(order[\"__OrderTime\"], Time.prototype);\n    x.Order_Status = order[\"Order_Status\"];\n    x.__agent = order[\"__agent\"];\n    x.orderId = order[\"orderId\"];\n    x.__deliveryStation = order[\"__deliveryStation\"];\n    Customer.unique = Math.max(Customer.unique, order[\"orderId\"] + 1);\n  }\n\n} // var c= new Customer(\"a\",\"B\",\"C\",\"d\");\n// var n= new Agent();\n// var m=new Map();\n// m.set(\"!1\",\"Try\");\n// var t=new Train(\"train\",m);\n// var s=new Station(\"asdd\");\n// var item=[\"x\",\"y\",\"z\"];\n// var o= new Order(c,1,n,\"a11\",t,s,item);\n// console.log(o.Track_Order());\n\nOrder.unique = 0;","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Order.ts"],"names":["Customer","OrderStatus","Item","Management","Time","Order","constructor","customer","status","items","seat_Number","train","delivery_station","__customer","Order_Status","__agent","__seatNumber","__train","__deliveryStation","__selectedItems","__Restaurants","Set","__OrderTime","orderId","addOrder","i","push","getCurrentTime","unique","x","ApprovedRestaurants","get","restaurant","add","setDeliveryStation","station","addAgent","Agent","addItem","ar","Track_Order","updateOrderStatus","Array","from","orderlist","index","indexOf","getCustomer","getAgent","getSeatNumber","getTrain","getDeliveryStation","getItems","getReciept","getItemList","Restaurant","getOrderStatus","sum","lessThanEqual","j","readOrder","order","Object","setPrototypeOf","prototype","Math","max"],"mappings":"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","sourcesContent":["import {Agent} from \"./Agent\";\r\nimport {Customer} from \"./Customer\";\r\nimport {AgentStatus, OrderStatus} from \"./Enum\";\r\nimport { Item } from \"./Item\";\r\nimport { Management } from \"./Management\";\r\nimport {Restaurant} from \"./Restaurant\";\r\nimport {Station} from \"./Station\";\r\nimport {Train} from \"./Train\";\r\nimport {Time} from \"./Time\";\r\n\r\nexport class Order{\r\n    static unique =0;\r\n    private __customer:Customer;\r\n    Order_Status:Array<string> = [];\r\n    private __agent: Array<number> = [];\r\n    private __seatNumber: string;\r\n    private __train: number;\r\n    private __deliveryStation: number|null;\r\n    private __selectedItems : Array<Item> = [];\r\n    private __Restaurants = new Set<Restaurant>();\r\n    __OrderTime : Time;\r\n    orderId;\r\n    constructor(customer:Customer,status:number=0,items:Array<Item>,seat_Number:string,train:number, delivery_station:number|null = null){\r\n        this.__customer=customer;\r\n        customer.addOrder(this);\r\n        this.__seatNumber=seat_Number;\r\n        this.__train=train;\r\n        this.__deliveryStation=delivery_station;\r\n        this.__selectedItems=items;\r\n        for(let i in items){\r\n            this.Order_Status.push(OrderStatus[0]);\r\n        }\r\n        this.__OrderTime = Time.getCurrentTime();\r\n        this.orderId = Order.unique++;\r\n        customer.addOrder(this);\r\n        for(let i of items){\r\n            let x  = Management.ApprovedRestaurants.get(i.restaurant);\r\n            if(x)\r\n            this.__Restaurants.add(x);\r\n        }\r\n    }\r\n\r\n    setDeliveryStation(station : number){\r\n        this.__deliveryStation = station;\r\n    }\r\n\r\n    addAgent(Agent : number){\r\n        this.__agent.push(Agent);\r\n    }\r\n\r\n    addItem(Item : Item){\r\n        this.__selectedItems.push(Item);\r\n        let ar=Management.ApprovedRestaurants.get(Item.restaurant);\r\n        if(ar){\r\n        this.__Restaurants.add(ar);\r\n        }\r\n        this.Order_Status.push(OrderStatus[0]);\r\n    }\r\n\r\n    Track_Order(){\r\n        return this.Order_Status;\r\n    }\r\n\r\n    updateOrderStatus(status:number, Item : Item|null = null){\r\n        switch (status){\r\n            case 0:\r\n                break;\r\n            case 1:\r\n                for(let i of this.Order_Status)\r\n                    i=OrderStatus[status];\r\n                for(let i of Array.from(this.__Restaurants)){\r\n                    i.orderlist.push(this);\r\n                }\r\n                break;\r\n            case 2:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n            case 3:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n            case 4:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n            case 5:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n            case 6:\r\n                if(Item!=null){\r\n                    let index = this.__selectedItems.indexOf(Item);\r\n                    this.Order_Status[index] = OrderStatus[index];\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    getCustomer(){\r\n        return this.__customer;\r\n    }\r\n\r\n    getAgent(){\r\n        return this.__agent;\r\n    }\r\n\r\n    getSeatNumber(){\r\n        return this.__seatNumber;\r\n    }\r\n\r\n    getTrain(){\r\n        return this.__train;\r\n    }\r\n\r\n    getDeliveryStation(){\r\n        return this.__deliveryStation;\r\n    }\r\n\r\n    getItems(){\r\n        return this.__selectedItems;\r\n    }\r\n\r\n    getReciept(){\r\n        return this.orderId;\r\n    }\r\n\r\n    getItemList(Restaurant : Restaurant) : Array<Item>{\r\n        let x = [];\r\n        for(let i of this.__selectedItems){\r\n            if(Management.ApprovedRestaurants.get(i.restaurant)==Restaurant){\r\n                x.push(i);\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n\r\n    getOrderStatus() : [Array<Item>, Array<string>]{\r\n        if(!this.__OrderTime.sum(new Time(0,15)).lessThanEqual(Time.getCurrentTime())){\r\n            let j=0;\r\n            for(let i of this.__selectedItems){\r\n                if(this.Order_Status[j]==OrderStatus[1]){\r\n                    this.updateOrderStatus(3,i);\r\n                }\r\n            }\r\n        }\r\n        return [this.__selectedItems,this.Order_Status];\r\n    }\r\n    //getOrderStations(Restaurant : Restaurant) : Array<Station>{\r\n    //    let list = new Set<Station>();\r\n    //    let route = this.__train.Return_RouteStation();\r\n    //    let time = this.__train.Return_RouteTime();\r\n    //    for (let i of Array.from(route.keys())){\r\n    //        if(time.get(i)?.lessThanEqual(Time.getCurrentTime())){\r\n    //            for(let k of this.__selectedItems){\r\n    //                let temp = route.get(i);\r\n    //                if(temp)\r\n    //                if(Management.stationList.get(temp)?.getItem().indexOf(k)!=-1 && Restaurant.getPrice(k.name)!=-1){\r\n    //                    let temp2 = Management.stationList.get(temp);\r\n    //                    if(temp2)\r\n    //                    list.add(temp2);\r\n    //                }\r\n    //            }\r\n    //        }\r\n    //    }\r\n    //    return Array.from(list);\r\n    //}\r\n    static readOrder(order : Order,customer : Customer){\r\n        let x = new Order(customer,0,new Array<Item>(),order[\"__seatNumber\"],order[\"__train\"]);\r\n        for(let i of order[\"__selectedItems\"])\r\n            x.addItem(Object.setPrototypeOf(i, Item.prototype));\r\n            x.__OrderTime = Object.setPrototypeOf(order[\"__OrderTime\"], Time.prototype);\r\n            x.Order_Status = order[\"Order_Status\"];\r\n            x.__agent = order[\"__agent\"];\r\n            x.orderId = order[\"orderId\"];\r\n            x.__deliveryStation = order[\"__deliveryStation\"];  \r\n            Customer.unique = Math.max(Customer.unique,order[\"orderId\"]+1);\r\n    }\r\n\r\n}\r\n// var c= new Customer(\"a\",\"B\",\"C\",\"d\");\r\n// var n= new Agent();\r\n// var m=new Map();\r\n// m.set(\"!1\",\"Try\");\r\n// var t=new Train(\"train\",m);\r\n// var s=new Station(\"asdd\");\r\n// var item=[\"x\",\"y\",\"z\"];\r\n// var o= new Order(c,1,n,\"a11\",t,s,item);\r\n// console.log(o.Track_Order());\r\n"]},"metadata":{},"sourceType":"module"}