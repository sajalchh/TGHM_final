{"ast":null,"code":"import { AccountType, AgentStatus } from \"./Enum\";\nimport { Account } from \"./Account\";\nimport { Management } from \"./Management\";\nexport class Agent extends Account {\n  constructor(name, username, password, restaurant, location = null, allottedOrder = null) {\n    super(name, username, new Date(), AccountType.Agent, password);\n    this.__location = void 0;\n    this.__allottedorder = void 0;\n    this.IsFree = void 0;\n    this.restaurant = void 0;\n    this.deliveredCount = 0;\n    this.failedCount = 0;\n    this.__location = location;\n    this.__allottedorder = allottedOrder;\n    this.restaurant = restaurant.getID();\n    this.IsFree = AgentStatus[0];\n    Management.agentList.set(this.getID(), this);\n    Management.agentListForStoring.push(this);\n    restaurant.AddAgent(this);\n    Management.loginA.set(username, this);\n  }\n\n  addRestaurant(restaurant) {\n    this.restaurant = restaurant.getID();\n  }\n\n  Update_Location(loc) {\n    this.__location = loc;\n  }\n\n  get_Location() {\n    return this.__location;\n  }\n\n  updateAllotedOrder(order) {\n    this.__allottedorder = order;\n  }\n\n  getAllotedOrder() {\n    return this.__allottedorder;\n  }\n\n  updateOrderStatus(Status) {\n    if (this.__allottedorder) {\n      let ar = Management.ApprovedRestaurants.get(this.restaurant);\n\n      if (ar) {\n        let items = ar.getOrderDetails(this.__allottedorder.orderId);\n\n        if (items) {\n          for (let i of items) this.__allottedorder.updateOrderStatus(Status, i);\n        }\n      }\n    }\n  }\n\n  updateStatus(status) {\n    let r = Management.ApprovedRestaurants.get(this.restaurant);\n    if (r) r.updateAgentStatus(this, status);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Agent.ts"],"names":["AccountType","AgentStatus","Account","Management","Agent","constructor","name","username","password","restaurant","location","allottedOrder","Date","__location","__allottedorder","IsFree","deliveredCount","failedCount","getID","agentList","set","agentListForStoring","push","AddAgent","loginA","addRestaurant","Update_Location","loc","get_Location","updateAllotedOrder","order","getAllotedOrder","updateOrderStatus","Status","ar","ApprovedRestaurants","get","items","getOrderDetails","orderId","i","updateStatus","status","r","updateAgentStatus"],"mappings":"AAGA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,QAAvC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAO,MAAMC,KAAN,SAAoBF,OAApB,CAA2B;AAO9BG,EAAAA,WAAW,CAACC,IAAD,EAAaC,QAAb,EAA6BC,QAA7B,EAA6CC,UAA7C,EAAqEC,QAAsB,GAAG,IAA9F,EAAoGC,aAAyB,GAAG,IAAhI,EAAqI;AAC5I,UAAML,IAAN,EAAWC,QAAX,EAAoB,IAAIK,IAAJ,EAApB,EAA+BZ,WAAW,CAACI,KAA3C,EAAiDI,QAAjD;AAD4I,SANxIK,UAMwI;AAAA,SALxIC,eAKwI;AAAA,SAJhJC,MAIgJ;AAAA,SAHhJN,UAGgJ;AAAA,SAFhJO,cAEgJ,GAFtH,CAEsH;AAAA,SADhJC,WACgJ,GADzH,CACyH;AAE5I,SAAKJ,UAAL,GAAkBH,QAAlB;AACA,SAAKI,eAAL,GAAuBH,aAAvB;AACA,SAAKF,UAAL,GAAkBA,UAAU,CAACS,KAAX,EAAlB;AACA,SAAKH,MAAL,GAAcd,WAAW,CAAC,CAAD,CAAzB;AACAE,IAAAA,UAAU,CAACgB,SAAX,CAAqBC,GAArB,CAAyB,KAAKF,KAAL,EAAzB,EAAuC,IAAvC;AACAf,IAAAA,UAAU,CAACkB,mBAAX,CAA+BC,IAA/B,CAAoC,IAApC;AACAb,IAAAA,UAAU,CAACc,QAAX,CAAoB,IAApB;AACApB,IAAAA,UAAU,CAACqB,MAAX,CAAkBJ,GAAlB,CAAsBb,QAAtB,EAAgC,IAAhC;AACH;;AAEDkB,EAAAA,aAAa,CAAChB,UAAD,EAAyB;AAClC,SAAKA,UAAL,GAAkBA,UAAU,CAACS,KAAX,EAAlB;AACH;;AAEDQ,EAAAA,eAAe,CAACC,GAAD,EAAc;AACzB,SAAKd,UAAL,GAAgBc,GAAhB;AACH;;AAEDC,EAAAA,YAAY,GAAE;AACV,WAAO,KAAKf,UAAZ;AACH;;AAEDgB,EAAAA,kBAAkB,CAACC,KAAD,EAAc;AAC5B,SAAKhB,eAAL,GAAuBgB,KAAvB;AACH;;AAEDC,EAAAA,eAAe,GAAE;AACb,WAAO,KAAKjB,eAAZ;AACH;;AAEDkB,EAAAA,iBAAiB,CAACC,MAAD,EAAiB;AAC9B,QAAI,KAAKnB,eAAT,EAA0B;AACtB,UAAIoB,EAAE,GAAC/B,UAAU,CAACgC,mBAAX,CAA+BC,GAA/B,CAAmC,KAAK3B,UAAxC,CAAP;;AACA,UAAGyB,EAAH,EAAM;AACF,YAAIG,KAAK,GAAGH,EAAE,CAACI,eAAH,CAAmB,KAAKxB,eAAL,CAAqByB,OAAxC,CAAZ;;AACA,YAAIF,KAAJ,EAAW;AACP,eAAK,IAAIG,CAAT,IAAcH,KAAd,EACI,KAAKvB,eAAL,CAAqBkB,iBAArB,CAAuCC,MAAvC,EAA+CO,CAA/C;AACP;AACJ;AACJ;AACJ;;AACDC,EAAAA,YAAY,CAACC,MAAD,EAAgB;AACxB,QAAIC,CAAC,GAAGxC,UAAU,CAACgC,mBAAX,CAA+BC,GAA/B,CAAmC,KAAK3B,UAAxC,CAAR;AACA,QAAGkC,CAAH,EACIA,CAAC,CAACC,iBAAF,CAAoB,IAApB,EAAyBF,MAAzB;AACP;;AAvD6B","sourcesContent":["import {Location} from \"./Location\";\r\nimport {Order} from \"./Order\"\r\nimport { Restaurant } from \"./Restaurant\";\r\nimport {AccountType, AgentStatus} from \"./Enum\"\r\nimport { Account } from \"./Account\";\r\nimport { Management } from \"./Management\";\r\nexport class Agent extends Account{\r\n    private __location: Location|null;\r\n    private __allottedorder : Order|null;\r\n    IsFree : string;\r\n    restaurant : number;\r\n    deliveredCount : number = 0;\r\n    failedCount : number = 0;\r\n    constructor(name:string,username:string,password:string,restaurant: Restaurant, location:Location|null = null, allottedOrder: Order|null = null){\r\n        super(name,username,new Date(),AccountType.Agent,password);\r\n        this.__location = location;\r\n        this.__allottedorder = allottedOrder;\r\n        this.restaurant = restaurant.getID();\r\n        this.IsFree = AgentStatus[0];\r\n        Management.agentList.set(this.getID(), this);\r\n        Management.agentListForStoring.push(this);\r\n        restaurant.AddAgent(this);\r\n        Management.loginA.set(username, this);\r\n    }\r\n\r\n    addRestaurant(restaurant : Restaurant){\r\n        this.restaurant = restaurant.getID();\r\n    }\r\n\r\n    Update_Location(loc:Location){\r\n        this.__location=loc;\r\n    }\r\n\r\n    get_Location(){\r\n        return this.__location;\r\n    }\r\n\r\n    updateAllotedOrder(order: Order){\r\n        this.__allottedorder = order;\r\n    }\r\n\r\n    getAllotedOrder(){\r\n        return this.__allottedorder;\r\n    }\r\n\r\n    updateOrderStatus(Status : number){\r\n        if (this.__allottedorder) {\r\n            let ar=Management.ApprovedRestaurants.get(this.restaurant);\r\n            if(ar){\r\n                let items = ar.getOrderDetails(this.__allottedorder.orderId);\r\n                if (items) {\r\n                    for (let i of items)\r\n                        this.__allottedorder.updateOrderStatus(Status, i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateStatus(status: number){\r\n        let r = Management.ApprovedRestaurants.get(this.restaurant);\r\n        if(r)\r\n            r.updateAgentStatus(this,status);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}