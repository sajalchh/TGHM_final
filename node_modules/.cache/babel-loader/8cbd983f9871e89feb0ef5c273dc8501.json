{"ast":null,"code":"import { Account } from \"./Account\";\nimport { AccountType, ApprovalStatus } from \"./Enum\";\nexport class Management extends Account {\n  constructor() {\n    super(\"Management\", \"Manager\", new Date(), AccountType.Management, \"admin\");\n    this.ApprovedRestaurants = new Map();\n    this.Application = [];\n    this.Customers = new Map();\n    this.stationList = new Map();\n    this.trainList = new Map();\n    this.agentList = new Map();\n    this.loginC = new Map();\n    this.loginR = new Map();\n    this.loginA = new Map();\n    this.trainNo = new Map();\n  }\n\n  static getInstance() {\n    if (this.instance == null) {\n      this.instance = new Management();\n    }\n\n    return this.instance;\n  }\n\n  addStation(Station) {\n    this.stationList.set(Station.getID(), Station);\n  }\n\n  removeStation(Station) {\n    this.stationList.delete(Station.getID());\n  }\n\n  addTrain(Train) {\n    this.trainList.set(Train.getID(), Train);\n  }\n\n  removeTrain(Train) {\n    this.trainList.delete(Train.getID());\n  }\n\n  updateRestarantStatus(Restarant, status) {\n    let x = this.Application.indexOf(Restarant);\n    Restarant.accetanceStatus = ApprovalStatus[status];\n    this.Application.splice(x, 1);\n\n    if (status != ApprovalStatus.Rejected) {\n      this.ApprovedRestaurants.set(Restarant.getID(), Restarant);\n      Management.restaurantForStoring.push(Restarant);\n    }\n  }\n\n}\nManagement.instance = null;\nManagement.CustomersForStoring = new Array();\nManagement.stationListForStoring = new Array();\nManagement.trainListForStoring = new Array();\nManagement.agentListForStoring = new Array();\nManagement.restaurantForStoring = new Array();\nvar m = Management.getInstance();","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Management.ts"],"names":["Account","AccountType","ApprovalStatus","Management","constructor","Date","ApprovedRestaurants","Map","Application","Customers","stationList","trainList","agentList","loginC","loginR","loginA","trainNo","getInstance","instance","addStation","Station","set","getID","removeStation","delete","addTrain","Train","removeTrain","updateRestarantStatus","Restarant","status","x","indexOf","accetanceStatus","splice","Rejected","restaurantForStoring","push","CustomersForStoring","Array","stationListForStoring","trainListForStoring","agentListForStoring","m"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,WAAtB;AACA,SAAQC,WAAR,EAAqBC,cAArB,QAA0C,QAA1C;AAMA,OAAO,MAAMC,UAAN,SAAyBH,OAAzB,CAAgC;AAoB3BI,EAAAA,WAAW,GAAE;AACjB,UAAM,YAAN,EAAmB,SAAnB,EAA6B,IAAIC,IAAJ,EAA7B,EAAwCJ,WAAW,CAACE,UAApD,EAA+D,OAA/D;AADiB,SAlBrBG,mBAkBqB,GAlB0B,IAAIC,GAAJ,EAkB1B;AAAA,SAjBrBC,WAiBqB,GAjBY,EAiBZ;AAAA,SAhBrBC,SAgBqB,GAhBa,IAAIF,GAAJ,EAgBb;AAAA,SAfrBG,WAeqB,GAfc,IAAIH,GAAJ,EAed;AAAA,SAdrBI,SAcqB,GAdU,IAAIJ,GAAJ,EAcV;AAAA,SAbrBK,SAaqB,GAbW,IAAIL,GAAJ,EAaX;AAAA,SAXrBM,MAWqB,GAXY,IAAIN,GAAJ,EAWZ;AAAA,SAVrBO,MAUqB,GAVc,IAAIP,GAAJ,EAUd;AAAA,SATrBQ,MASqB,GATS,IAAIR,GAAJ,EAST;AAAA,SARrBS,OAQqB,GARS,IAAIT,GAAJ,EAQT;AAEpB;;AACiB,SAAXU,WAAW,GAAe;AAC7B,QAAI,KAAKC,QAAL,IAAe,IAAnB,EAAwB;AACpB,WAAKA,QAAL,GAAgB,IAAIf,UAAJ,EAAhB;AACH;;AACD,WAAO,KAAKe,QAAZ;AACH;;AAGDC,EAAAA,UAAU,CAACC,OAAD,EAAwB;AAC9B,SAAKV,WAAL,CAAiBW,GAAjB,CAAqBD,OAAO,CAACE,KAAR,EAArB,EAAsCF,OAAtC;AAEH;;AACDG,EAAAA,aAAa,CAACH,OAAD,EAAwB;AACjC,SAAKV,WAAL,CAAiBc,MAAjB,CAAwBJ,OAAO,CAACE,KAAR,EAAxB;AACH;;AACDG,EAAAA,QAAQ,CAACC,KAAD,EAAoB;AACxB,SAAKf,SAAL,CAAeU,GAAf,CAAmBK,KAAK,CAACJ,KAAN,EAAnB,EAAkCI,KAAlC;AAEH;;AACDC,EAAAA,WAAW,CAACD,KAAD,EAAoB;AAC3B,SAAKf,SAAL,CAAea,MAAf,CAAsBE,KAAK,CAACJ,KAAN,EAAtB;AACH;;AAEDM,EAAAA,qBAAqB,CAACC,SAAD,EAAsBC,MAAtB,EAA2C;AAC5D,QAAIC,CAAC,GAAG,KAAKvB,WAAL,CAAiBwB,OAAjB,CAAyBH,SAAzB,CAAR;AACAA,IAAAA,SAAS,CAACI,eAAV,GAA4B/B,cAAc,CAAC4B,MAAD,CAA1C;AACA,SAAKtB,WAAL,CAAiB0B,MAAjB,CAAwBH,CAAxB,EAA0B,CAA1B;;AACA,QAAGD,MAAM,IAAI5B,cAAc,CAACiC,QAA5B,EAAqC;AACjC,WAAK7B,mBAAL,CAAyBe,GAAzB,CAA6BQ,SAAS,CAACP,KAAV,EAA7B,EAAgDO,SAAhD;AACA1B,MAAAA,UAAU,CAACiC,oBAAX,CAAgCC,IAAhC,CAAqCR,SAArC;AACH;AACJ;;AAtDkC;AAA1B1B,U,CACFe,Q,GAA4B,I;AAD1Bf,U,CAcFmC,mB,GAAuC,IAAIC,KAAJ,E;AAdrCpC,U,CAeFqC,qB,GAAwC,IAAID,KAAJ,E;AAftCpC,U,CAgBFsC,mB,GAAoC,IAAIF,KAAJ,E;AAhBlCpC,U,CAiBFuC,mB,GAAqC,IAAIH,KAAJ,E;AAjBnCpC,U,CAkBFiC,oB,GAA2C,IAAIG,KAAJ,E;AAsCtD,IAAII,CAAC,GAAGxC,UAAU,CAACc,WAAX,EAAR","sourcesContent":["import {Account} from \"./Account\";\r\nimport {AccountType, ApprovalStatus} from \"./Enum\";\r\nimport {Station} from \"./Station\";\r\nimport {Train} from \"./Train\";\r\nimport {Restaurant} from \"./Restaurant\";\r\nimport { Customer } from \"./Customer\";\r\nimport { Agent } from \"./Agent\";\r\nexport class Management extends Account{\r\n    static instance: Management|null = null;\r\n    ApprovedRestaurants : Map<number,Restaurant> = new Map<number,Restaurant>();\r\n    Application: Array<Restaurant> = [];\r\n    Customers :Map<number,Customer> = new Map<number,Customer>();\r\n    stationList: Map<number,Station> = new Map<number,Station>();\r\n    trainList: Map<number,Train> = new Map<number,Train>();\r\n    agentList : Map<number,Agent> = new Map<number,Agent>();\r\n\r\n    loginC : Map<string, Customer> = new Map<string, Customer>();\r\n    loginR : Map<string, Restaurant> = new Map<string, Restaurant>();\r\n    loginA : Map<string, Agent> = new Map<string, Agent>();\r\n    trainNo : Map<string,Train> = new Map<string,Train>();\r\n\r\n    static CustomersForStoring :Array<Customer> = new Array<Customer>();\r\n    static stationListForStoring: Array<Station> = new Array<Station>();\r\n    static trainListForStoring: Array<Train> = new Array<Train>();\r\n    static agentListForStoring : Array<Agent> = new Array<Agent>();\r\n    static restaurantForStoring : Array<Restaurant> = new Array<Restaurant>();\r\n\r\n    private constructor(){\r\n        super(\"Management\",\"Manager\",new Date(),AccountType.Management,\"admin\");\r\n    }\r\n    static getInstance() : Management{\r\n        if (this.instance==null){\r\n            this.instance = new Management();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n\r\n    addStation(Station:Station) : void{\r\n        this.stationList.set(Station.getID(),(Station));\r\n       \r\n    }\r\n    removeStation(Station:Station) : void{\r\n        this.stationList.delete(Station.getID());\r\n    }\r\n    addTrain(Train:Train) : void{\r\n        this.trainList.set(Train.getID(),(Train));\r\n\r\n    }\r\n    removeTrain(Train:Train) : void{\r\n        this.trainList.delete(Train.getID());\r\n    }\r\n\r\n    updateRestarantStatus(Restarant:Restaurant,status:number) : void{\r\n        let x = this.Application.indexOf(Restarant);\r\n        Restarant.accetanceStatus = ApprovalStatus[status];\r\n        this.Application.splice(x,1);\r\n        if(status != ApprovalStatus.Rejected){\r\n            this.ApprovedRestaurants.set(Restarant.getID(),(Restarant));\r\n            Management.restaurantForStoring.push(Restarant);\r\n        }\r\n    }\r\n}\r\nvar m = Management.getInstance();"]},"metadata":{},"sourceType":"module"}