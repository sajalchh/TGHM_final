{"ast":null,"code":"import { Account } from \"./Account\";\nimport { AccountType, AgentStatus, ApprovalStatus, FoodType } from \"./Enum\";\nimport { Menu } from \"./Menu\";\nimport { Management } from \"./Management\";\nimport { Item } from \"./Item\";\nimport { System } from \"./System\";\nexport class Restaurant extends Account {\n  //private __agentTimeToGetBack : Array<number> = [];\n  constructor(name, username, password, station, ID = -1) {\n    super(name, username, new Date(), AccountType.Restaurant, password, ID);\n    this.orderlist = [];\n    this.__timeToReach = [];\n    this.__agent = [];\n    this.__agentStatus = [];\n    this.accetanceStatus = ApprovalStatus[0];\n    this.Menu = new Menu();\n    this.certi = [];\n    this.servingStation = void 0;\n    let m = Management.getInstance();\n    m.Application.push(this); //this.__timeToReach = timeToReach;\n\n    this.servingStation = station.getID();\n    Management.getInstance().loginR.set(username, this);\n  }\n\n  getPrice(s) {\n    return this.Menu.getPrice(s);\n  }\n\n  addItem(s, price, type) {\n    let item = new Item(s, price, type, this.getID());\n    this.Menu.addItem(item);\n    let m = Management.getInstance();\n    let ms = m.stationList.get(this.servingStation);\n    if (ms) ms.addItem(item);\n  }\n\n  removeItem(item) {\n    this.Menu.removeItem(item);\n    let m = Management.getInstance();\n    let ms = m.stationList.get(this.servingStation);\n    if (ms) ms.removeItem(item);\n  }\n\n  provideCerti(file) {\n    this.certi.push(file);\n  }\n\n  AddAgent(agent) {\n    this.__agent.push(agent.getID());\n\n    this.__agentStatus.push(AgentStatus[0]);\n\n    System.active_agent.push(agent);\n    agent.addRestaurant(this);\n  }\n\n  removeAgent(agent) {\n    let index = this.__agent.indexOf(agent.getID());\n\n    this.__agent.slice(index); //this.__agentTimeToGetBack.slice(index);\n\n\n    this.__agentStatus.splice(index);\n\n    System.active_agent.slice(System.active_agent.indexOf(agent));\n  }\n\n  getAgents() {\n    return this.__agent;\n  } //getClosestAgent(){\n  //    return Math.min.apply(Math,this.__agentTimeToGetBack);   \n  //}\n\n\n  allotAgent(order, agent, time = null) {\n    let index = this.__agent.indexOf(agent.getID());\n\n    let m = Management.getInstance();\n    let ag = m.agentList.get(this.__agent[index]);\n    if (ag) ag.updateAllotedOrder(order);\n  }\n\n  updateOrderStatus(orderId, status, Item) {\n    for (let i of this.orderlist) {\n      if (i.orderId == orderId) {\n        i.updateOrderStatus(status, Item);\n      }\n    }\n  } //addStation(Station : Station, time:Time){\n  //    Station.addRestaurant(this);\n  //    this.__timeToReach.push(time);\n  //    for(let i of this.Menu.getMenuItems()){\n  //        Station.addItem(i);\n  //    }\n  //    this.servingStation.push(Station.getID());\n  // }\n\n\n  addBrand(newuser, password, Station) {\n    let s = new Restaurant(this._name, newuser, password, Station);\n\n    for (let i of this.Menu.getMenuItems()) {\n      let type = i.type;\n      s.addItem(i.name, i.price, FoodType[i.type]);\n    }\n  }\n\n  getOrderDetails(orderId) {\n    for (let i of this.orderlist) {\n      if (i.orderId == orderId) {\n        return i.getItemList(this);\n      }\n    }\n  }\n\n  getOrderStations(orderId) {\n    for (let i of this.orderlist) {\n      if (i.orderId == orderId) {\n        return this.servingStation;\n      }\n    }\n\n    return null;\n  }\n\n  updateAgentStatus(agent, status) {\n    let index = this.__agent.indexOf(agent.getID());\n\n    this.__agentStatus[index] = AgentStatus[status];\n  }\n\n  getFreeAgents() {\n    let i = 0;\n    let v = [];\n\n    for (let x of this.__agentStatus) {\n      if (x == AgentStatus[0]) {\n        let m = Management.getInstance();\n        let y = m.agentList.get(this.__agent[i]);\n        if (y) v.push(y);\n      }\n\n      i++;\n    }\n\n    return v;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Restaurant.ts"],"names":["Account","AccountType","AgentStatus","ApprovalStatus","FoodType","Menu","Management","Item","System","Restaurant","constructor","name","username","password","station","ID","Date","orderlist","__timeToReach","__agent","__agentStatus","accetanceStatus","certi","servingStation","m","getInstance","Application","push","getID","loginR","set","getPrice","s","addItem","price","type","item","ms","stationList","get","removeItem","provideCerti","file","AddAgent","agent","active_agent","addRestaurant","removeAgent","index","indexOf","slice","splice","getAgents","allotAgent","order","time","ag","agentList","updateAllotedOrder","updateOrderStatus","orderId","status","i","addBrand","newuser","Station","_name","getMenuItems","getOrderDetails","getItemList","getOrderStations","updateAgentStatus","getFreeAgents","v","x","y"],"mappings":"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","sourcesContent":["import {Account} from \"./Account\"\r\nimport {AccountType,AgentStatus,ApprovalStatus,FoodType} from \"./Enum\"\r\nimport {Menu} from \"./Menu\"\r\nimport {Management} from \"./Management\"\r\nimport {Item} from \"./Item\"\r\nimport {Agent} from \"./Agent\"\r\nimport {Certi} from \"./Certificate\"\r\nimport {Station} from \"./Station\"\r\nimport {Order} from \"./Order\"\r\nimport {System} from \"./System\"\r\nimport { Time } from \"./Time\"\r\n\r\nexport class Restaurant extends Account{\r\n    orderlist : Array<Order> = [];\r\n    private __timeToReach : Array<Time> = [];\r\n    private __agent : Array<number> = [];\r\n    private __agentStatus: Array<string> = [];\r\n    //private __agentTimeToGetBack : Array<number> = [];\r\n    accetanceStatus = ApprovalStatus[0];\r\n    Menu = new Menu();\r\n    certi: Array<Certi> = [];\r\n    servingStation : number;\r\n    \r\n    constructor(name:string,username:string,password:string,station:Station,ID:number = -1) {\r\n        super(name,username,new Date(),AccountType.Restaurant,password,ID);\r\n        let m = Management.getInstance();\r\n        m.Application.push(this);\r\n        //this.__timeToReach = timeToReach;\r\n        this.servingStation = station.getID();\r\n        Management.getInstance().loginR.set(username, this);\r\n    }\r\n    getPrice(s : string){\r\n        return this.Menu.getPrice(s);\r\n    }\r\n    addItem(s : string , price : number, type:number){\r\n        let item = new Item(s, price, type, this.getID());\r\n        this.Menu.addItem(item);\r\n        let m = Management.getInstance();\r\n        let ms=m.stationList.get(this.servingStation);\r\n        if(ms)\r\n        ms.addItem(item);\r\n    }\r\n    removeItem(item:Item){\r\n        this.Menu.removeItem(item);\r\n        let m = Management.getInstance();\r\n        let ms=m.stationList.get(this.servingStation);\r\n        if(ms)\r\n        ms.removeItem(item);\r\n    }\r\n    provideCerti(file : Certi){\r\n        this.certi.push(file);\r\n    }\r\n    AddAgent(agent : Agent){\r\n        this.__agent.push(agent.getID());\r\n        this.__agentStatus.push(AgentStatus[0]);\r\n        System.active_agent.push(agent);\r\n        agent.addRestaurant(this);\r\n    }\r\n    removeAgent(agent : Agent){\r\n        let index = this.__agent.indexOf(agent.getID());\r\n        this.__agent.slice(index);\r\n        //this.__agentTimeToGetBack.slice(index);\r\n        this.__agentStatus.splice(index);\r\n        System.active_agent.slice(System.active_agent.indexOf(agent));\r\n    }\r\n\r\n    getAgents(){\r\n        return this.__agent;\r\n    }\r\n\r\n    //getClosestAgent(){\r\n    //    return Math.min.apply(Math,this.__agentTimeToGetBack);   \r\n    //}\r\n    allotAgent(order: Order,agent : Agent,time : number|null = null){\r\n        let index = this.__agent.indexOf(agent.getID());\r\n        let m = Management.getInstance();\r\n        let ag=m.agentList.get(this.__agent[index]);\r\n        if(ag)\r\n            ag.updateAllotedOrder(order);\r\n         \r\n    }\r\n    updateOrderStatus(orderId : number,status : number, Item : Item){\r\n        for(let i of this.orderlist){\r\n            if(i.orderId ==orderId){\r\n                i.updateOrderStatus(status,Item);\r\n            }\r\n        }\r\n    }\r\n    //addStation(Station : Station, time:Time){\r\n    //    Station.addRestaurant(this);\r\n    //    this.__timeToReach.push(time);\r\n    //    for(let i of this.Menu.getMenuItems()){\r\n    //        Station.addItem(i);\r\n    //    }\r\n    //    this.servingStation.push(Station.getID());\r\n    // }\r\n    addBrand(newuser : string,password : string,Station : Station){\r\n        let s = new Restaurant(this._name,newuser,password,Station);\r\n        for(let i of this.Menu.getMenuItems()){\r\n            let type : string = i.type\r\n            s.addItem(i.name,i.price,(<any>FoodType)[i.type]);\r\n        }\r\n    }\r\n    getOrderDetails(orderId : number){\r\n        for(let i of this.orderlist){\r\n            if(i.orderId ==orderId){\r\n                return i.getItemList(this);\r\n            }\r\n        }\r\n    }\r\n    getOrderStations(orderId: number){\r\n        for(let i of this.orderlist){\r\n            if(i.orderId ==orderId){\r\n                return this.servingStation;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    updateAgentStatus(agent : Agent,status: number){\r\n        let index = this.__agent.indexOf(agent.getID());\r\n        this.__agentStatus[index] = AgentStatus[status];\r\n    }\r\n\r\n    getFreeAgents() : Array<Agent>{\r\n        let i=0;\r\n        let v : Array<Agent> = [];\r\n        for(let x of this.__agentStatus){\r\n            if(x==AgentStatus[0]){\r\n                let m = Management.getInstance();\r\n                let y = m.agentList.get(this.__agent[i]);\r\n                if(y)\r\n                v.push(y);\r\n            }\r\n            i++;\r\n        }\r\n        return v;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}