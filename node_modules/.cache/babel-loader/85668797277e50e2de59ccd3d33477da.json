{"ast":null,"code":"import { Account } from \"./Account\";\nimport { AccountType, AgentStatus, ApprovalStatus } from \"./Enum\";\nimport { Menu } from \"./Menu\";\nimport { Management } from \"./Management\";\nimport { Item } from \"./Item\";\nimport { System } from \"./System\";\nexport class Restaurant extends Account {\n  //private __agentTimeToGetBack : Array<number> = [];\n  constructor(name, username, password) {\n    super(name, username, new Date(), AccountType.Restaurant, password);\n    this.orderlist = [];\n    this.__timeToReach = [];\n    this.__agent = [];\n    this.__agentStatus = [];\n    this.accetanceStatus = ApprovalStatus[0];\n    this.Menu = new Menu();\n    this.certi = [];\n    this.servingStation = [];\n    Management.Application.push(this); //this.__timeToReach = timeToReach;\n\n    Management.loginR.set(username, this);\n  }\n\n  getPrice(s) {\n    return this.Menu.getPrice(s);\n  }\n\n  addItem(s, price, type) {\n    let item = new Item(s, price, type, this.getID());\n    this.Menu.addItem(item);\n\n    for (let i of this.servingStation) {\n      let ms = Management.stationList.get(i);\n      if (ms) ms.addItem(item);\n    }\n  }\n\n  removeItem(item) {\n    this.Menu.removeItem(item);\n\n    for (let i of this.servingStation) {\n      let ms = Management.stationList.get(i);\n      if (ms) ms.removeItem(item);\n    }\n  }\n\n  provideCerti(file) {\n    this.certi.push(file);\n  }\n\n  AddAgent(agent) {\n    this.__agent.push(agent.getID());\n\n    this.__agentStatus.push(AgentStatus[0]); //this.__agentTimeToGetBack.push(0);\n\n\n    System.active_agent.push(agent);\n    agent.addRestaurant(this);\n  }\n\n  removeAgent(agent) {\n    let index = this.__agent.indexOf(agent.getID());\n\n    this.__agent.slice(index); //this.__agentTimeToGetBack.slice(index);\n\n\n    this.__agentStatus.splice(index);\n\n    System.active_agent.slice(System.active_agent.indexOf(agent));\n  }\n\n  getAgents() {\n    return this.__agent;\n  } //getClosestAgent(){\n  //    return Math.min.apply(Math,this.__agentTimeToGetBack);   \n  //}\n\n\n  allotAgent(order, agent, time = null) {\n    let index = this.__agent.indexOf(agent.getID());\n\n    let ag = Management.agentList.get(this.__agent[index]);\n    if (ag) ag.updateAllotedOrder(order);\n  }\n\n  updateOrderStatus(orderId, status, Item) {\n    for (let i of this.orderlist) {\n      if (i.orderId == orderId) {\n        i.updateOrderStatus(status, Item);\n      }\n    }\n  }\n\n  addStation(Station, time) {\n    Station.addRestaurant(this);\n\n    this.__timeToReach.push(time);\n\n    for (let i of this.Menu.getMenuItems()) {\n      Station.addItem(i);\n    }\n\n    this.servingStation.push(Station.getID());\n  }\n\n  getOrderDetails(orderId) {\n    for (let i of this.orderlist) {\n      if (i.orderId == orderId) {\n        return i.getItemList(this);\n      }\n    }\n  }\n\n  getOrderStations(orderId) {\n    for (let i of this.orderlist) {\n      if (i.orderId == orderId) {\n        return i.getOrderStations(this);\n      }\n    }\n  }\n\n  updateAgentStatus(agent, status) {\n    let index = this.__agent.indexOf(agent.getID());\n\n    this.__agentStatus[index] = AgentStatus[status];\n  }\n\n  getFreeAgents() {\n    let i = 0;\n    let v = [];\n\n    for (let x of this.__agentStatus) {\n      if (x == AgentStatus[0]) {\n        let y = Management.agentList.get(this.__agent[i]);\n        if (y) v.push(y);\n      }\n\n      i++;\n    }\n\n    return v;\n  }\n\n}","map":{"version":3,"sources":["/home/sajal/SE/project_final/TGHM_final/src/Logic/Restaurant.ts"],"names":["Account","AccountType","AgentStatus","ApprovalStatus","Menu","Management","Item","System","Restaurant","constructor","name","username","password","Date","orderlist","__timeToReach","__agent","__agentStatus","accetanceStatus","certi","servingStation","Application","push","loginR","set","getPrice","s","addItem","price","type","item","getID","i","ms","stationList","get","removeItem","provideCerti","file","AddAgent","agent","active_agent","addRestaurant","removeAgent","index","indexOf","slice","splice","getAgents","allotAgent","order","time","ag","agentList","updateAllotedOrder","updateOrderStatus","orderId","status","addStation","Station","getMenuItems","getOrderDetails","getItemList","getOrderStations","updateAgentStatus","getFreeAgents","v","x","y"],"mappings":"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","sourcesContent":["import {Account} from \"./Account\"\nimport {AccountType,AgentStatus,ApprovalStatus,FoodType} from \"./Enum\"\nimport {Menu} from \"./Menu\"\nimport {Management} from \"./Management\"\nimport {Item} from \"./Item\"\nimport {Agent} from \"./Agent\"\nimport {Certi} from \"./Certificate\"\nimport {Station} from \"./Station\"\nimport {Order} from \"./Order\"\nimport {System} from \"./System\"\nimport { Time } from \"./Time\"\n\nexport class Restaurant extends Account{\n    orderlist : Array<Order> = [];\n    private __timeToReach : Array<Time> = [];\n    private __agent : Array<number> = [];\n    private __agentStatus: Array<string> = [];\n    //private __agentTimeToGetBack : Array<number> = [];\n    accetanceStatus = ApprovalStatus[0];\n    Menu = new Menu();\n    certi: Array<Certi> = [];\n    servingStation : Array<number> = [];\n    \n    constructor(name:string,username:string,password:string) {\n        super(name,username,new Date(),AccountType.Restaurant,password);\n        Management.Application.push(this);\n        //this.__timeToReach = timeToReach;\n        Management.loginR.set(username, this);\n    }\n    getPrice(s : string){\n        return this.Menu.getPrice(s);\n    }\n    addItem(s : string , price : number, type:number){\n        let item = new Item(s, price, type, this.getID());\n        this.Menu.addItem(item);\n        for(let i of this.servingStation){\n            let ms=Management.stationList.get(i);\n            if(ms)\n            ms.addItem(item);\n        }\n    }\n    removeItem(item:Item){\n        this.Menu.removeItem(item);\n        for(let i of this.servingStation){\n            let ms=Management.stationList.get(i);\n            if(ms)\n            ms.removeItem(item);\n        }\n    }\n    provideCerti(file : Certi){\n        this.certi.push(file);\n    }\n    AddAgent(agent : Agent){\n        this.__agent.push(agent.getID());\n        this.__agentStatus.push(AgentStatus[0]);\n        //this.__agentTimeToGetBack.push(0);\n        System.active_agent.push(agent);\n        agent.addRestaurant(this);\n    }\n    removeAgent(agent : Agent){\n        let index = this.__agent.indexOf(agent.getID());\n        this.__agent.slice(index);\n        //this.__agentTimeToGetBack.slice(index);\n        this.__agentStatus.splice(index);\n        System.active_agent.slice(System.active_agent.indexOf(agent));\n    }\n\n    getAgents(){\n        return this.__agent;\n    }\n\n    //getClosestAgent(){\n    //    return Math.min.apply(Math,this.__agentTimeToGetBack);   \n    //}\n    allotAgent(order: Order,agent : Agent,time : number|null = null){\n        let index = this.__agent.indexOf(agent.getID());\n        let ag=Management.agentList.get(this.__agent[index]);\n        if(ag)\n            ag.updateAllotedOrder(order);\n         \n    }\n    updateOrderStatus(orderId : number,status : number, Item : Item){\n        for(let i of this.orderlist){\n            if(i.orderId ==orderId){\n                i.updateOrderStatus(status,Item);\n            }\n        }\n    }\n    addStation(Station : Station, time:Time){\n        Station.addRestaurant(this);\n        this.__timeToReach.push(time);\n        for(let i of this.Menu.getMenuItems()){\n            Station.addItem(i);\n        }\n        this.servingStation.push(Station.getID());\n    }\n    getOrderDetails(orderId : number){\n        for(let i of this.orderlist){\n            if(i.orderId ==orderId){\n                return i.getItemList(this);\n            }\n        }\n    }\n    getOrderStations(orderId: number){\n        for(let i of this.orderlist){\n            if(i.orderId ==orderId){\n                return i.getOrderStations(this);\n            }\n        }\n    }\n    updateAgentStatus(agent : Agent,status: number){\n        let index = this.__agent.indexOf(agent.getID());\n        this.__agentStatus[index] = AgentStatus[status];\n    }\n\n    getFreeAgents() : Array<Agent>{\n        let i=0;\n        let v : Array<Agent> = [];\n        for(let x of this.__agentStatus){\n            if(x==AgentStatus[0]){\n                let y = Management.agentList.get(this.__agent[i])\n                if(y)\n                v.push(y);\n            }\n            i++;\n        }\n        return v;\n    }\n\n}"]},"metadata":{},"sourceType":"module"}