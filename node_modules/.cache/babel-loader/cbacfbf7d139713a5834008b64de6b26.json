{"ast":null,"code":"import { Account } from \"./Account\";\nimport { AccountType } from \"./Enum\";\nimport { Management } from \"./Management\";\nexport class Customer extends Account {\n  constructor(name, username, password, phoneNo) {\n    super(name, username, new Date(), AccountType.Customer, password);\n    this.__seatNO = void 0;\n    this.__Train = void 0;\n    this.__Orders = [];\n    this.__allotedAgent = void 0;\n    this.__phoneNumber = void 0;\n    this.__phoneNumber = phoneNo;\n    Management.loginC.set(this._username, this);\n    Management.Customers.set(this.getID(), this);\n    Management.CustomersForStoring.push(this);\n  } // static converfrmObj(obj:Object) {\n  //     let c: Customer = new Customer(obj._name, obj._password, obj._phoneNo);\n  // }\n\n\n  addOrder(Order) {\n    this.__Orders.push(Order);\n  }\n\n  updateOrderStatus(orderId, status) {\n    for (let i of this.__Orders) {\n      if (i.orderId === orderId) {\n        i.updateOrderStatus(status);\n      }\n    }\n  }\n\n  getReciept(orderId) {\n    for (let i of this.__Orders) {\n      if (i.orderId === orderId) {\n        return i.getReciept();\n      }\n    }\n  }\n\n  getOrder(orderId) {\n    for (let i of this.__Orders) {\n      if (i.orderId === orderId) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  updateTrain(seatNo, train) {\n    this.__Train = train;\n    this.__seatNO = seatNo;\n  }\n\n  getOrderStatus(orderId) {\n    for (let i of this.__Orders) {\n      if (i.orderId == orderId) {\n        return i.getOrderStatus();\n      }\n    }\n  }\n\n  checkPasswords(userName, password) {}\n\n  getOrderList() {\n    return this.__Orders;\n  }\n\n}","map":{"version":3,"sources":["/home/sajal/SE/project_final/TGHM_final/src/Logic/Customer.ts"],"names":["Account","AccountType","Management","Customer","constructor","name","username","password","phoneNo","Date","__seatNO","__Train","__Orders","__allotedAgent","__phoneNumber","loginC","set","_username","Customers","getID","CustomersForStoring","push","addOrder","Order","updateOrderStatus","orderId","status","i","getReciept","getOrder","updateTrain","seatNo","train","getOrderStatus","checkPasswords","userName","getOrderList"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,WAAtB;AAEA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAIA,OAAO,MAAMC,QAAN,SAAuBH,OAAvB,CAA8B;AAMjCI,EAAAA,WAAW,CAACC,IAAD,EAAaC,QAAb,EAAgCC,QAAhC,EAAiDC,OAAjD,EAAkE;AACzE,UAAMH,IAAN,EAAWC,QAAX,EAAoB,IAAIG,IAAJ,EAApB,EAA+BR,WAAW,CAACE,QAA3C,EAAoDI,QAApD;AADyE,SALrEG,QAKqE;AAAA,SAJrEC,OAIqE;AAAA,SAHrEC,QAGqE,GAH3C,EAG2C;AAAA,SAFrEC,cAEqE;AAAA,SADrEC,aACqE;AAEzE,SAAKA,aAAL,GAAqBN,OAArB;AACAN,IAAAA,UAAU,CAACa,MAAX,CAAkBC,GAAlB,CAAsB,KAAKC,SAA3B,EAAsC,IAAtC;AACAf,IAAAA,UAAU,CAACgB,SAAX,CAAqBF,GAArB,CAAyB,KAAKG,KAAL,EAAzB,EAAuC,IAAvC;AACAjB,IAAAA,UAAU,CAACkB,mBAAX,CAA+BC,IAA/B,CAAoC,IAApC;AACH,GAZgC,CAajC;AACA;AACA;;;AACAC,EAAAA,QAAQ,CAACC,KAAD,EAAoB;AACxB,SAAKX,QAAL,CAAcS,IAAd,CAAmBE,KAAnB;AACH;;AACDC,EAAAA,iBAAiB,CAACC,OAAD,EAAmBC,MAAnB,EAA0C;AACvD,SAAI,IAAIC,CAAR,IAAa,KAAKf,QAAlB,EAA2B;AACvB,UAAGe,CAAC,CAACF,OAAF,KAAcA,OAAjB,EAAyB;AACrBE,QAAAA,CAAC,CAACH,iBAAF,CAAoBE,MAApB;AACH;AACJ;AACJ;;AACDE,EAAAA,UAAU,CAACH,OAAD,EAAkB;AACxB,SAAI,IAAIE,CAAR,IAAa,KAAKf,QAAlB,EAA2B;AACvB,UAAGe,CAAC,CAACF,OAAF,KAAcA,OAAjB,EAAyB;AACrB,eAAOE,CAAC,CAACC,UAAF,EAAP;AACH;AACJ;AACJ;;AACDC,EAAAA,QAAQ,CAACJ,OAAD,EAA+B;AACnC,SAAI,IAAIE,CAAR,IAAa,KAAKf,QAAlB,EAA2B;AACvB,UAAGe,CAAC,CAACF,OAAF,KAAcA,OAAjB,EAAyB;AACrB,eAAOE,CAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH;;AACDG,EAAAA,WAAW,CAACC,MAAD,EAAkBC,KAAlB,EAAgC;AACvC,SAAKrB,OAAL,GAAeqB,KAAf;AACA,SAAKtB,QAAL,GAAgBqB,MAAhB;AACH;;AAEDE,EAAAA,cAAc,CAACR,OAAD,EAAkB;AAC5B,SAAI,IAAIE,CAAR,IAAa,KAAKf,QAAlB,EAA2B;AACvB,UAAGe,CAAC,CAACF,OAAF,IAAaA,OAAhB,EAAwB;AACpB,eAAOE,CAAC,CAACM,cAAF,EAAP;AACH;AACJ;AACJ;;AACDC,EAAAA,cAAc,CAACC,QAAD,EAAmB5B,QAAnB,EAAqC,CAElD;;AACD6B,EAAAA,YAAY,GAAiB;AACzB,WAAO,KAAKxB,QAAZ;AACH;;AA1DgC","sourcesContent":["import {Account} from \"./Account\"\nimport { Agent } from \"./Agent\";\nimport { AccountType } from \"./Enum\"\nimport { Management } from \"./Management\";\nimport { Order } from \"./Order\";\nimport {Train} from \"./Train\"\n\nexport class Customer extends Account{\n    private __seatNO : string | undefined;\n    private __Train : Train | undefined;\n    private __Orders : Array<Order> = [];\n    private __allotedAgent : Agent | undefined;\n    private __phoneNumber : string;\n    constructor(name:string,username : string, password:string, phoneNo : string){\n        super(name,username,new Date(),AccountType.Customer,password);\n        this.__phoneNumber = phoneNo;\n        Management.loginC.set(this._username, this);\n        Management.Customers.set(this.getID(),(this));\n        Management.CustomersForStoring.push(this);\n    }\n    // static converfrmObj(obj:Object) {\n    //     let c: Customer = new Customer(obj._name, obj._password, obj._phoneNo);\n    // }\n    addOrder(Order:Order) : void{\n        this.__Orders.push(Order);\n    }\n    updateOrderStatus(orderId : number, status : number) : void{\n        for(let i of this.__Orders){\n            if(i.orderId === orderId){\n                i.updateOrderStatus(status);\n            }\n        }\n    }\n    getReciept(orderId : number){\n        for(let i of this.__Orders){\n            if(i.orderId === orderId){\n                return i.getReciept();\n            }\n        }\n    }\n    getOrder(orderId : number) : Order|null{\n        for(let i of this.__Orders){\n            if(i.orderId === orderId){\n                return i;\n            }\n        }\n        return null;\n    }\n    updateTrain(seatNo : string, train : Train){\n        this.__Train = train;\n        this.__seatNO = seatNo;\n    }\n\n    getOrderStatus(orderId : number){\n        for(let i of this.__Orders){\n            if(i.orderId == orderId){\n                return i.getOrderStatus();\n            }\n        }\n    }\n    checkPasswords(userName : string,password : string){\n\n    }\n    getOrderList() : Array<Order>{\n        return this.__Orders;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}