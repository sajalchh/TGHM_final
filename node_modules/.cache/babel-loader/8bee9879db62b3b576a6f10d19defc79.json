{"ast":null,"code":"import { Time } from './Time';\nimport { Management } from './Management';\n// const fs = require(\"fs\");\n// const CircularJSON = require('circular-json');\nexport class Database {\n  constructor() {}\n\n  static getInstance() {\n    if (this.instance == null) {\n      this.instance = new Database();\n    }\n\n    return this.instance;\n  } // static async writeState() {\n  //     try {\n  //         var FileSaver = require('file-saver');\n  //         FileSaver.saveFile(\"./data/Customers.json\", JSON.stringify(Management.getInstance().Customers), function (){})\n  //         FileSaver.writeFile(\"./data/Restaurants.json\", JSON.stringify(Management.getInstance().Application), function (){})\n  //         FileSaver.writeFile(\"./data/Stations.json\", JSON.stringify(Management.stationList), function (){})\n  //         FileSaver.writeFile(\"./data/Trains.json\", JSON.stringify(Management.trainList), function (){})\n  //         FileSaver.writeFile('./data/Customers.json', JSON.stringify(Management.Customers));\n  //         console.log(Management.Customers);\n  //     } catch (err) {\n  //         console.error(err)\n  //     }\n  // }\n\n\n  static readState() {\n    try {} catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n  /*\r\n      static readState(){\r\n          try {\r\n              let arrCust = CustomerData;\r\n              for (let i=0;i<arrCust.length;i++){\r\n                  let x = Object.setPrototypeOf(arrCust[i], Customer.prototype);\r\n                  Management.Customers.set(x.getID(),(x));\r\n                  Management.loginC.set(x.getUsername(),x);\r\n                  Account.unique= Math.max(x.getID(),Account.unique);\r\n                  Account.unique++;\r\n              }\r\n              let arrRest = RestaurantData;\r\n              for (let i=0;i<arrRest.length;i++){\r\n                  let x = Object.setPrototypeOf(arrRest[i], Restaurant.prototype);\r\n                  Management.ApprovedRestaurants.set(x.getID(),(x));\r\n                  Management.loginR.set(x.getUsername(), x);\r\n                  Account.unique= Math.max(x.getID(),Account.unique);\r\n                  Account.unique++;\r\n              }\r\n              let arrStation = StationsData;\r\n              for (let i=0;i<arrStation.length;i++){\r\n                  let x = Object.setPrototypeOf(arrStation[i], Station.prototype)\r\n                  Management.stationList.set(x.getID(), (x));\r\n              }\r\n              let arrTrains = TrainsData;\r\n              for (let i=0;i<arrTrains.length;i++){\r\n                  let x = Object.setPrototypeOf(arrTrains[i], Train.prototype);\r\n                  Management.trainList.set(x.getID(), (x));\r\n                  Management.trainNo.set(x.TrainNo, x);\r\n              }\r\n              Management.trainListForStoring = Array.from(Management.trainList.values());\r\n              let arrAgent = AgentData;\r\n              for (let i=0;i<arrAgent.length;i++){\r\n                  let x = Object.setPrototypeOf(arrAgent[i], Agent.prototype);\r\n                  Management.agentList.set(x.getID(), (x));\r\n                  Management.loginA.set(x.getUsername(), x);\r\n                  System.active_agent.push(x);\r\n              }\r\n          } catch (err) {\r\n              console.error(err)\r\n              return false\r\n          }\r\n      }\r\n  */\n\n\n  static AuthenticateUser(username, password, management) {\n    let l = management.loginC.get(username);\n    console.log(l);\n\n    if (l !== undefined) {\n      if (l.checkPassword(password)) return l.getUsername();\n    }\n\n    let r = management.loginR.get(username);\n    console.log(management.loginR);\n    console.log(r);\n\n    if (r !== undefined) {\n      if (r.checkPassword(password)) return r.getUsername();\n    }\n\n    let a = management.loginA.get(username);\n\n    if (a !== undefined) {\n      if (a.checkPassword(password)) return a.getUsername();\n    }\n\n    if (username === \"manager\") {\n      if (password === \"123\") {\n        return \"manager\";\n      }\n    }\n\n    return null;\n  }\n\n  static getMenu(train, timemax = new Time(23, 59)) {\n    let timemin = new Time();\n    timemin.updateTime();\n    const rStation = train.Return_RouteStation();\n    let rTime = new Map(train.Return_RouteTime());\n    let reqStations = [];\n    let time = []; // console.log(rTime);\n    // console.log(timemin);\n    // console.log(timemax);\n    // console.log(typeof rTime);\n    // console.log(rTime.keys());\n\n    for (let key of Array.from(train.routeTime.keys())) {\n      let t = rTime.get(key); // console.log(t);\n\n      if (t) {\n        if (t.lessThanEqual(timemax) && timemin.lessThanEqual(t)) {\n          reqStations.push(key);\n          time.push(t);\n        }\n      }\n    }\n\n    console.log(reqStations);\n    let items = Array();\n    let times = Array();\n    let i = 0;\n\n    for (let stat of reqStations) {\n      // console.log(stat);\n      let rs = rStation.get(stat); // console.log(rs);\n\n      if (rs) {\n        let ms = Management.getInstance().stationList.get(rs);\n        console.log(typeof ms);\n\n        if (ms) {\n          console.log(ms.getID());\n          Array.prototype.push.apply(items, ms.getItem());\n\n          for (let x of ms.getItem()) {\n            times.push(time[i]);\n          } // console.log(ms.getItem());\n\n        }\n      }\n\n      i++;\n    }\n\n    let final = new Map([]);\n    let final2 = new Map([]);\n    i = 0;\n\n    for (let x of items) {\n      let c = final.get(x.type);\n      let d = final2.get(x.type);\n\n      if (c && d) {\n        c.push(x);\n        d.push(times[i]);\n        final.set(x.type, c);\n        final2.set(x.type, d);\n      } else {\n        c = new Array();\n        c.push(x);\n        final.set(x.type, c);\n        d = new Array();\n        d.push(times[i]);\n        final2.set(x.type, d);\n      }\n\n      i++;\n    }\n\n    console.log(items); // console.log(final);\n\n    return [final, final2];\n  }\n\n  getRestaurant(username) {\n    return null;\n  }\n\n  getAgent(username) {\n    return null;\n  }\n\n} // let c = new Customer(\"Shashvat\", \"Shash\", \"123\", \"123456789\");\n// let r = new Restaurant(\"Dominos\", \"Dom\", \"234\", 15);\n// Database.writeState();\n//\n//\n//\n// Database.readState();\n\nDatabase.instance = null;","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Database.ts"],"names":["Time","Management","Database","constructor","getInstance","instance","readState","err","console","error","AuthenticateUser","username","password","management","l","loginC","get","log","undefined","checkPassword","getUsername","r","loginR","a","loginA","getMenu","train","timemax","timemin","updateTime","rStation","Return_RouteStation","rTime","Map","Return_RouteTime","reqStations","time","key","Array","from","routeTime","keys","t","lessThanEqual","push","items","times","i","stat","rs","ms","stationList","getID","prototype","apply","getItem","x","final","final2","c","type","d","set","getRestaurant","getAgent"],"mappings":"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","sourcesContent":["\r\nimport { Agent } from './Agent';\r\nimport { Customer } from './Customer';\r\nimport { AccountType } from './Enum';\r\nimport { Item } from './Item';\r\nimport { Menu } from './Menu';\r\nimport { Restaurant } from './Restaurant';\r\nimport { Station } from './Station';\r\nimport { Time } from './Time';\r\nimport {Train} from './Train';\r\nimport {Management} from './Management';\r\nimport { readFile } from 'node:fs';\r\nimport { Account } from './Account';\r\nimport { System } from './System';\r\nimport CustomerData from \"./data/Customers.json\";\r\nimport RestaurantData from \"./data/Restaurants.json\";\r\nimport StationsData from \"./data/Stations.json\";\r\nimport TrainsData from \"./data/Trains.json\";\r\nimport AgentData from \"./data/Agents.json\";\r\n\r\n\r\n// const fs = require(\"fs\");\r\n// const CircularJSON = require('circular-json');\r\n\r\n\r\nexport class Database{\r\n    static instance: Database|null = null;\r\n\r\n    private constructor(){\r\n    }\r\n\r\n    static getInstance() : Database{\r\n        if (this.instance==null){\r\n            this.instance = new Database();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    // static async writeState() {\r\n    //     try {\r\n    //         var FileSaver = require('file-saver');\r\n    //         FileSaver.saveFile(\"./data/Customers.json\", JSON.stringify(Management.getInstance().Customers), function (){})\r\n    //         FileSaver.writeFile(\"./data/Restaurants.json\", JSON.stringify(Management.getInstance().Application), function (){})\r\n    //         FileSaver.writeFile(\"./data/Stations.json\", JSON.stringify(Management.stationList), function (){})\r\n    //         FileSaver.writeFile(\"./data/Trains.json\", JSON.stringify(Management.trainList), function (){})\r\n    //         FileSaver.writeFile('./data/Customers.json', JSON.stringify(Management.Customers));\r\n    //         console.log(Management.Customers);\r\n    //     } catch (err) {\r\n    //         console.error(err)\r\n    //     }\r\n    // }\r\n\r\n\r\n    static readState(){\r\n        try {\r\n            \r\n            }\r\n    catch (err) {\r\n    console.error(err)\r\n            return false\r\n        }\r\n    }\r\n\r\n/*\r\n    static readState(){\r\n        try {\r\n            let arrCust = CustomerData;\r\n            for (let i=0;i<arrCust.length;i++){\r\n                let x = Object.setPrototypeOf(arrCust[i], Customer.prototype);\r\n                Management.Customers.set(x.getID(),(x));\r\n                Management.loginC.set(x.getUsername(),x);\r\n                Account.unique= Math.max(x.getID(),Account.unique);\r\n                Account.unique++;\r\n            }\r\n            let arrRest = RestaurantData;\r\n            for (let i=0;i<arrRest.length;i++){\r\n                let x = Object.setPrototypeOf(arrRest[i], Restaurant.prototype);\r\n                Management.ApprovedRestaurants.set(x.getID(),(x));\r\n                Management.loginR.set(x.getUsername(), x);\r\n                Account.unique= Math.max(x.getID(),Account.unique);\r\n                Account.unique++;\r\n            }\r\n            let arrStation = StationsData;\r\n            for (let i=0;i<arrStation.length;i++){\r\n                let x = Object.setPrototypeOf(arrStation[i], Station.prototype)\r\n                Management.stationList.set(x.getID(), (x));\r\n            }\r\n            let arrTrains = TrainsData;\r\n            for (let i=0;i<arrTrains.length;i++){\r\n                let x = Object.setPrototypeOf(arrTrains[i], Train.prototype);\r\n                Management.trainList.set(x.getID(), (x));\r\n                Management.trainNo.set(x.TrainNo, x);\r\n            }\r\n            Management.trainListForStoring = Array.from(Management.trainList.values());\r\n            let arrAgent = AgentData;\r\n            for (let i=0;i<arrAgent.length;i++){\r\n                let x = Object.setPrototypeOf(arrAgent[i], Agent.prototype);\r\n                Management.agentList.set(x.getID(), (x));\r\n                Management.loginA.set(x.getUsername(), x);\r\n                System.active_agent.push(x);\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n            return false\r\n        }\r\n    }\r\n*/\r\n    static AuthenticateUser(username:string, password:string, management:Management): string|null{\r\n        let l = management.loginC.get(username);\r\n        console.log(l);\r\n        if (l !== undefined){\r\n            if (l.checkPassword(password)) return l.getUsername();\r\n        }\r\n        let r = management.loginR.get(username);\r\n        console.log(management.loginR);\r\n        console.log(r);\r\n        if (r !== undefined){\r\n            if (r.checkPassword(password)) return r.getUsername();\r\n        }\r\n        let a = management.loginA.get(username);\r\n        if (a !== undefined){\r\n            if (a.checkPassword(password)) return a.getUsername();\r\n        }\r\n        if (username===\"manager\"){\r\n            if (password===\"123\"){\r\n                return \"manager\";\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static getMenu(train : Train,  timemax : Time=new Time(23,59)) : [Map<string,Array<Item>>,Map<string,Array<Time>>]{\r\n        let timemin = new Time();\r\n        timemin.updateTime();\r\n        const rStation=train.Return_RouteStation();\r\n        let rTime:Map<string, Time> = new Map<string, Time> (train.Return_RouteTime());\r\n        let reqStations = [];\r\n        let time = [];\r\n        // console.log(rTime);\r\n        // console.log(timemin);\r\n        // console.log(timemax);\r\n        // console.log(typeof rTime);\r\n        // console.log(rTime.keys());\r\n        for(let key of Array.from(train.routeTime.keys())) {\r\n            let t = rTime.get(key);\r\n            // console.log(t);\r\n            if(t){\r\n                if(t.lessThanEqual(timemax)&&timemin.lessThanEqual(t)){\r\n                    reqStations.push(key);\r\n                    time.push(t);\r\n                }\r\n            }\r\n        }\r\n        console.log(reqStations);\r\n        let items= Array <Item>();\r\n        let times =  Array <Time>();\r\n        let i=0;\r\n        for(let stat of reqStations){\r\n            // console.log(stat);\r\n            let rs=rStation.get(stat);\r\n            // console.log(rs);\r\n            if(rs){\r\n                let ms=Management.getInstance().stationList.get(rs);\r\n                console.log(typeof ms);\r\n                if(ms){\r\n                    console.log(ms.getID());\r\n                    Array.prototype.push.apply(items,ms.getItem());\r\n                    for(let x of ms.getItem()){\r\n                        times.push(time[i]);\r\n                    }\r\n                    // console.log(ms.getItem());\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        let final=new Map<string,Array<Item>>([]);\r\n        let final2 = new Map<string,Array<Time>>([]);\r\n        i=0;\r\n        for(let x of items){\r\n            let c = final.get(x.type);\r\n            let d = final2.get(x.type);\r\n            if(c && d) {\r\n                c.push(x);\r\n                d.push(times[i]);\r\n                final.set(x.type, c);\r\n                final2.set(x.type, d);\r\n            }\r\n            else{\r\n                c = new Array<Item>();\r\n                c.push(x);\r\n                final.set(x.type, c);\r\n                d = new Array<Time>();\r\n                d.push(times[i]);\r\n                final2.set(x.type, d);\r\n            }\r\n            i++;\r\n        }\r\n        console.log(items);\r\n        // console.log(final);\r\n        return [final,final2];\r\n    }\r\n    getRestaurant(username:string) : Restaurant|null{\r\n        return null;    \r\n    }\r\n    getAgent(username:string) : Agent|null{\r\n        return null;\r\n    }\r\n}\r\n\r\n// let c = new Customer(\"Shashvat\", \"Shash\", \"123\", \"123456789\");\r\n// let r = new Restaurant(\"Dominos\", \"Dom\", \"234\", 15);\r\n// Database.writeState();\r\n//\r\n//\r\n//\r\n// Database.readState();\r\n"]},"metadata":{},"sourceType":"module"}