{"ast":null,"code":"import { Account } from \"./Account\";\nimport { AccountType } from \"./Enum\";\nimport { Order } from \"./Order\";\nexport class Customer extends Account {\n  constructor(name, username, password, phoneNo, ID = -1) {\n    super(name, username, new Date(), AccountType.Customer, password, ID);\n    this.__seatNO = void 0;\n    this.__Train = void 0;\n    this.__Orders = [];\n    this.__allotedAgent = void 0;\n    this.__phoneNumber = void 0;\n    this.__phoneNumber = phoneNo;\n  }\n\n  addOrder(Order) {\n    this.__Orders.push(Order);\n  }\n\n  updateOrderStatus(orderId, status) {\n    for (let i of this.__Orders) {\n      if (i.orderId === orderId) {\n        i.updateOrderStatus(status);\n      }\n    }\n  }\n\n  getReciept(orderId) {\n    for (let i of this.__Orders) {\n      if (i.orderId === orderId) {\n        return i.getReciept();\n      }\n    }\n  }\n\n  getOrder(orderId) {\n    for (let i of this.__Orders) {\n      if (i.orderId === orderId) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  updateTrain(seatNo, train) {\n    this.__Train = train;\n    this.__seatNO = seatNo;\n  }\n\n  getOrderStatus(orderId) {\n    for (let i of this.__Orders) {\n      if (i.orderId == orderId) {\n        return i.getOrderStatus();\n      }\n    }\n  }\n\n  checkPasswords(userName, password) {}\n\n  getOrderList() {\n    return this.__Orders;\n  }\n\n  static ReadCustomer(customer) {\n    let x = new Customer(customer[\"_name\"], customer[\"_username\"], customer[\"_password\"], customer[\"__phoneNumber\"]);\n    x.__Train = customer[\"__Train\"];\n    x.__seatNO = customer[\"__seatNO\"];\n    x.__allotedAgent = customer[\"__allotedAgent\"];\n    x._ID = customer[\"_ID\"];\n\n    for (let i of x.__Orders) Order.readOrder(i, x);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Customer.ts"],"names":["Account","AccountType","Order","Customer","constructor","name","username","password","phoneNo","ID","Date","__seatNO","__Train","__Orders","__allotedAgent","__phoneNumber","addOrder","push","updateOrderStatus","orderId","status","i","getReciept","getOrder","updateTrain","seatNo","train","getOrderStatus","checkPasswords","userName","getOrderList","ReadCustomer","customer","x","_ID","readOrder"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,WAAtB;AAEA,SAASC,WAAT,QAA4B,QAA5B;AAEA,SAASC,KAAT,QAAsB,SAAtB;AAGA,OAAO,MAAMC,QAAN,SAAuBH,OAAvB,CAA8B;AAMjCI,EAAAA,WAAW,CAACC,IAAD,EAAaC,QAAb,EAAgCC,QAAhC,EAAiDC,OAAjD,EAAmEC,EAAW,GAAG,CAAC,CAAlF,EAAoF;AAC3F,UAAMJ,IAAN,EAAWC,QAAX,EAAoB,IAAII,IAAJ,EAApB,EAA+BT,WAAW,CAACE,QAA3C,EAAoDI,QAApD,EAA6DE,EAA7D;AAD2F,SALvFE,QAKuF;AAAA,SAJvFC,OAIuF;AAAA,SAHvFC,QAGuF,GAH7D,EAG6D;AAAA,SAFvFC,cAEuF;AAAA,SADvFC,aACuF;AAE3F,SAAKA,aAAL,GAAqBP,OAArB;AAEH;;AACDQ,EAAAA,QAAQ,CAACd,KAAD,EAAoB;AACxB,SAAKW,QAAL,CAAcI,IAAd,CAAmBf,KAAnB;AACH;;AACDgB,EAAAA,iBAAiB,CAACC,OAAD,EAAmBC,MAAnB,EAA0C;AACvD,SAAI,IAAIC,CAAR,IAAa,KAAKR,QAAlB,EAA2B;AACvB,UAAGQ,CAAC,CAACF,OAAF,KAAcA,OAAjB,EAAyB;AACrBE,QAAAA,CAAC,CAACH,iBAAF,CAAoBE,MAApB;AACH;AACJ;AACJ;;AACDE,EAAAA,UAAU,CAACH,OAAD,EAAkB;AACxB,SAAI,IAAIE,CAAR,IAAa,KAAKR,QAAlB,EAA2B;AACvB,UAAGQ,CAAC,CAACF,OAAF,KAAcA,OAAjB,EAAyB;AACrB,eAAOE,CAAC,CAACC,UAAF,EAAP;AACH;AACJ;AACJ;;AACDC,EAAAA,QAAQ,CAACJ,OAAD,EAA+B;AACnC,SAAI,IAAIE,CAAR,IAAa,KAAKR,QAAlB,EAA2B;AACvB,UAAGQ,CAAC,CAACF,OAAF,KAAcA,OAAjB,EAAyB;AACrB,eAAOE,CAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH;;AACDG,EAAAA,WAAW,CAACC,MAAD,EAAkBC,KAAlB,EAAgC;AACvC,SAAKd,OAAL,GAAec,KAAf;AACA,SAAKf,QAAL,GAAgBc,MAAhB;AACH;;AAEDE,EAAAA,cAAc,CAACR,OAAD,EAAkB;AAC5B,SAAI,IAAIE,CAAR,IAAa,KAAKR,QAAlB,EAA2B;AACvB,UAAGQ,CAAC,CAACF,OAAF,IAAaA,OAAhB,EAAwB;AACpB,eAAOE,CAAC,CAACM,cAAF,EAAP;AACH;AACJ;AACJ;;AACDC,EAAAA,cAAc,CAACC,QAAD,EAAmBtB,QAAnB,EAAqC,CAElD;;AACDuB,EAAAA,YAAY,GAAiB;AACzB,WAAO,KAAKjB,QAAZ;AACH;;AACkB,SAAZkB,YAAY,CAACC,QAAD,EAAqB;AACpC,QAAIC,CAAC,GAAG,IAAI9B,QAAJ,CAAa6B,QAAQ,CAAC,OAAD,CAArB,EAA+BA,QAAQ,CAAC,WAAD,CAAvC,EAAqDA,QAAQ,CAAC,WAAD,CAA7D,EAA2EA,QAAQ,CAAC,eAAD,CAAnF,CAAR;AACAC,IAAAA,CAAC,CAACrB,OAAF,GAAYoB,QAAQ,CAAC,SAAD,CAApB;AACAC,IAAAA,CAAC,CAACtB,QAAF,GAAaqB,QAAQ,CAAC,UAAD,CAArB;AACAC,IAAAA,CAAC,CAACnB,cAAF,GAAmBkB,QAAQ,CAAC,gBAAD,CAA3B;AACAC,IAAAA,CAAC,CAACC,GAAF,GAAQF,QAAQ,CAAC,KAAD,CAAhB;;AACA,SAAI,IAAIX,CAAR,IAAaY,CAAC,CAACpB,QAAf,EACIX,KAAK,CAACiC,SAAN,CAAgBd,CAAhB,EAAkBY,CAAlB;AACP;;AA9DgC","sourcesContent":["import {Account} from \"./Account\"\r\nimport { Agent } from \"./Agent\";\r\nimport { AccountType } from \"./Enum\"\r\nimport { Management } from \"./Management\";\r\nimport { Order } from \"./Order\";\r\nimport {Train} from \"./Train\"\r\n\r\nexport class Customer extends Account{\r\n    private __seatNO : string | undefined;\r\n    private __Train : Train | undefined;\r\n    private __Orders : Array<Order> = [];\r\n    private __allotedAgent : Agent | undefined;\r\n    private __phoneNumber : string;\r\n    constructor(name:string,username : string, password:string, phoneNo : string, ID : number = -1){\r\n        super(name,username,new Date(),AccountType.Customer,password,ID);\r\n        this.__phoneNumber = phoneNo;\r\n\r\n    }\r\n    addOrder(Order:Order) : void{\r\n        this.__Orders.push(Order);\r\n    }\r\n    updateOrderStatus(orderId : number, status : number) : void{\r\n        for(let i of this.__Orders){\r\n            if(i.orderId === orderId){\r\n                i.updateOrderStatus(status);\r\n            }\r\n        }\r\n    }\r\n    getReciept(orderId : number){\r\n        for(let i of this.__Orders){\r\n            if(i.orderId === orderId){\r\n                return i.getReciept();\r\n            }\r\n        }\r\n    }\r\n    getOrder(orderId : number) : Order|null{\r\n        for(let i of this.__Orders){\r\n            if(i.orderId === orderId){\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    updateTrain(seatNo : string, train : Train){\r\n        this.__Train = train;\r\n        this.__seatNO = seatNo;\r\n    }\r\n\r\n    getOrderStatus(orderId : number){\r\n        for(let i of this.__Orders){\r\n            if(i.orderId == orderId){\r\n                return i.getOrderStatus();\r\n            }\r\n        }\r\n    }\r\n    checkPasswords(userName : string,password : string){\r\n\r\n    }\r\n    getOrderList() : Array<Order>{\r\n        return this.__Orders;\r\n    }\r\n    static ReadCustomer(customer : Customer){\r\n        let x = new Customer(customer[\"_name\"],customer[\"_username\"],customer[\"_password\"],customer[\"__phoneNumber\"]);\r\n        x.__Train = customer[\"__Train\"];\r\n        x.__seatNO = customer[\"__seatNO\"];\r\n        x.__allotedAgent = customer[\"__allotedAgent\"];\r\n        x._ID = customer[\"_ID\"];\r\n        for(let i of x.__Orders)\r\n            Order.readOrder(i,x);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}