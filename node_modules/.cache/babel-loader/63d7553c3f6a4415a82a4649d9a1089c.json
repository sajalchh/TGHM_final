{"ast":null,"code":"import { Account } from \"./Account\";\nimport { AccountType, ApprovalStatus } from \"./Enum\";\nexport class Management extends Account {\n  constructor() {\n    super(\"Management\", \"Manager\", new Date(), AccountType.Management, \"admin\");\n  }\n\n  static getInstance() {\n    if (this.instance == null) {\n      this.instance = new Management();\n    }\n\n    return this.instance;\n  }\n\n  addStation(Station) {\n    Management.stationList.set(Station.getID(), Station);\n  }\n\n  removeStation(Station) {\n    Management.stationList.delete(Station.getID());\n  }\n\n  addTrain(Train) {\n    Management.trainList.set(Train.getID(), Train);\n  }\n\n  removeTrain(Train) {\n    Management.trainList.delete(Train.getID());\n  }\n\n  updateRestarantStatus(Restarant, status) {\n    let x = Management.Application.indexOf(Restarant);\n    Restarant.accetanceStatus = ApprovalStatus[status];\n    Management.Application.splice(x, 1);\n\n    if (status != ApprovalStatus.Rejected) {\n      Management.ApprovedRestaurants.set(Restarant.getID(), Restarant);\n      Management.restaurantForStoring.push(Restarant);\n    }\n  }\n\n}\nManagement.instance = null;\nManagement.ApprovedRestaurants = new Map();\nManagement.Application = [];\nManagement.Customers = new Map();\nManagement.stationList = new Map();\nManagement.trainList = new Map();\nManagement.agentList = new Map();\nManagement.loginC = new Map();\nManagement.loginR = new Map();\nManagement.loginA = new Map();\nManagement.trainNo = new Map();\nManagement.CustomersForStoring = new Array();\nManagement.stationListForStoring = new Array();\nManagement.trainListForStoring = new Array();\nManagement.agentListForStoring = new Array();\nManagement.restaurantForStoring = new Array();\nvar m = Management.getInstance();","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Management.ts"],"names":["Account","AccountType","ApprovalStatus","Management","constructor","Date","getInstance","instance","addStation","Station","stationList","set","getID","removeStation","delete","addTrain","Train","trainList","removeTrain","updateRestarantStatus","Restarant","status","x","Application","indexOf","accetanceStatus","splice","Rejected","ApprovedRestaurants","restaurantForStoring","push","Map","Customers","agentList","loginC","loginR","loginA","trainNo","CustomersForStoring","Array","stationListForStoring","trainListForStoring","agentListForStoring","m"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,WAAtB;AACA,SAAQC,WAAR,EAAqBC,cAArB,QAA0C,QAA1C;AAMA,OAAO,MAAMC,UAAN,SAAyBH,OAAzB,CAAgC;AAoB3BI,EAAAA,WAAW,GAAE;AACjB,UAAM,YAAN,EAAmB,SAAnB,EAA6B,IAAIC,IAAJ,EAA7B,EAAwCJ,WAAW,CAACE,UAApD,EAA+D,OAA/D;AACH;;AACiB,SAAXG,WAAW,GAAe;AAC7B,QAAI,KAAKC,QAAL,IAAe,IAAnB,EAAwB;AACpB,WAAKA,QAAL,GAAgB,IAAIJ,UAAJ,EAAhB;AACH;;AACD,WAAO,KAAKI,QAAZ;AACH;;AAGDC,EAAAA,UAAU,CAACC,OAAD,EAAwB;AAC9BN,IAAAA,UAAU,CAACO,WAAX,CAAuBC,GAAvB,CAA2BF,OAAO,CAACG,KAAR,EAA3B,EAA4CH,OAA5C;AAEH;;AACDI,EAAAA,aAAa,CAACJ,OAAD,EAAwB;AACjCN,IAAAA,UAAU,CAACO,WAAX,CAAuBI,MAAvB,CAA8BL,OAAO,CAACG,KAAR,EAA9B;AACH;;AACDG,EAAAA,QAAQ,CAACC,KAAD,EAAoB;AACxBb,IAAAA,UAAU,CAACc,SAAX,CAAqBN,GAArB,CAAyBK,KAAK,CAACJ,KAAN,EAAzB,EAAwCI,KAAxC;AAEH;;AACDE,EAAAA,WAAW,CAACF,KAAD,EAAoB;AAC3Bb,IAAAA,UAAU,CAACc,SAAX,CAAqBH,MAArB,CAA4BE,KAAK,CAACJ,KAAN,EAA5B;AACH;;AAEDO,EAAAA,qBAAqB,CAACC,SAAD,EAAsBC,MAAtB,EAA2C;AAC5D,QAAIC,CAAC,GAAGnB,UAAU,CAACoB,WAAX,CAAuBC,OAAvB,CAA+BJ,SAA/B,CAAR;AACAA,IAAAA,SAAS,CAACK,eAAV,GAA4BvB,cAAc,CAACmB,MAAD,CAA1C;AACAlB,IAAAA,UAAU,CAACoB,WAAX,CAAuBG,MAAvB,CAA8BJ,CAA9B,EAAgC,CAAhC;;AACA,QAAGD,MAAM,IAAInB,cAAc,CAACyB,QAA5B,EAAqC;AACjCxB,MAAAA,UAAU,CAACyB,mBAAX,CAA+BjB,GAA/B,CAAmCS,SAAS,CAACR,KAAV,EAAnC,EAAsDQ,SAAtD;AACAjB,MAAAA,UAAU,CAAC0B,oBAAX,CAAgCC,IAAhC,CAAqCV,SAArC;AACH;AACJ;;AAtDkC;AAA1BjB,U,CACFI,Q,GAA4B,I;AAD1BJ,U,CAEFyB,mB,GAA+C,IAAIG,GAAJ,E;AAF7C5B,U,CAGFoB,W,GAAiC,E;AAH/BpB,U,CAIF6B,S,GAAkC,IAAID,GAAJ,E;AAJhC5B,U,CAKFO,W,GAAmC,IAAIqB,GAAJ,E;AALjC5B,U,CAMFc,S,GAA+B,IAAIc,GAAJ,E;AAN7B5B,U,CAOF8B,S,GAAgC,IAAIF,GAAJ,E;AAP9B5B,U,CASF+B,M,GAAiC,IAAIH,GAAJ,E;AAT/B5B,U,CAUFgC,M,GAAmC,IAAIJ,GAAJ,E;AAVjC5B,U,CAWFiC,M,GAA8B,IAAIL,GAAJ,E;AAX5B5B,U,CAYFkC,O,GAA8B,IAAIN,GAAJ,E;AAZ5B5B,U,CAcFmC,mB,GAAuC,IAAIC,KAAJ,E;AAdrCpC,U,CAeFqC,qB,GAAwC,IAAID,KAAJ,E;AAftCpC,U,CAgBFsC,mB,GAAoC,IAAIF,KAAJ,E;AAhBlCpC,U,CAiBFuC,mB,GAAqC,IAAIH,KAAJ,E;AAjBnCpC,U,CAkBF0B,oB,GAA2C,IAAIU,KAAJ,E;AAsCtD,IAAII,CAAC,GAAGxC,UAAU,CAACG,WAAX,EAAR","sourcesContent":["import {Account} from \"./Account\";\r\nimport {AccountType, ApprovalStatus} from \"./Enum\";\r\nimport {Station} from \"./Station\";\r\nimport {Train} from \"./Train\";\r\nimport {Restaurant} from \"./Restaurant\";\r\nimport { Customer } from \"./Customer\";\r\nimport { Agent } from \"./Agent\";\r\nexport class Management extends Account{\r\n    static instance: Management|null = null;\r\n    static ApprovedRestaurants : Map<number,Restaurant> = new Map<number,Restaurant>();\r\n    static Application: Array<Restaurant> = [];\r\n    static Customers :Map<number,Customer> = new Map<number,Customer>();\r\n    static stationList: Map<number,Station> = new Map<number,Station>();\r\n    static trainList: Map<number,Train> = new Map<number,Train>();\r\n    static agentList : Map<number,Agent> = new Map<number,Agent>();\r\n\r\n    static loginC : Map<string, Customer> = new Map<string, Customer>();\r\n    static loginR : Map<string, Restaurant> = new Map<string, Restaurant>();\r\n    static loginA : Map<string, Agent> = new Map<string, Agent>();\r\n    static trainNo : Map<string,Train> = new Map<string,Train>();\r\n\r\n    static CustomersForStoring :Array<Customer> = new Array<Customer>();\r\n    static stationListForStoring: Array<Station> = new Array<Station>();\r\n    static trainListForStoring: Array<Train> = new Array<Train>();\r\n    static agentListForStoring : Array<Agent> = new Array<Agent>();\r\n    static restaurantForStoring : Array<Restaurant> = new Array<Restaurant>();\r\n\r\n    private constructor(){\r\n        super(\"Management\",\"Manager\",new Date(),AccountType.Management,\"admin\");\r\n    }\r\n    static getInstance() : Management{\r\n        if (this.instance==null){\r\n            this.instance = new Management();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n\r\n    addStation(Station:Station) : void{\r\n        Management.stationList.set(Station.getID(),(Station));\r\n       \r\n    }\r\n    removeStation(Station:Station) : void{\r\n        Management.stationList.delete(Station.getID());\r\n    }\r\n    addTrain(Train:Train) : void{\r\n        Management.trainList.set(Train.getID(),(Train));\r\n\r\n    }\r\n    removeTrain(Train:Train) : void{\r\n        Management.trainList.delete(Train.getID());\r\n    }\r\n\r\n    updateRestarantStatus(Restarant:Restaurant,status:number) : void{\r\n        let x = Management.Application.indexOf(Restarant);\r\n        Restarant.accetanceStatus = ApprovalStatus[status];\r\n        Management.Application.splice(x,1);\r\n        if(status != ApprovalStatus.Rejected){\r\n            Management.ApprovedRestaurants.set(Restarant.getID(),(Restarant));\r\n            Management.restaurantForStoring.push(Restarant);\r\n        }\r\n    }\r\n}\r\nvar m = Management.getInstance();"]},"metadata":{},"sourceType":"module"}