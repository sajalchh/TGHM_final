{"ast":null,"code":"import { Agent } from './Agent';\nimport { Customer } from './Customer';\nimport { Restaurant } from './Restaurant';\nimport { Station } from './Station';\nimport { Time } from './Time';\nimport { Train } from './Train';\nimport { Management } from './Management';\nimport { Account } from './Account';\nimport { System } from './System';\nimport CustomerData from \"./data/Customers.json\";\nimport RestaurantData from \"./data/Restaurants.json\";\nimport StationsData from \"./data/Stations.json\";\nimport TrainsData from \"./data/Trains.json\";\nimport AgentData from \"./data/Agents.json\"; // const fs = require(\"fs\");\n// const CircularJSON = require('circular-json');\n\nexport class Database {\n  constructor() {}\n\n  static getInstance() {\n    if (this.instance == null) {\n      this.instance = new Database();\n    }\n\n    return this.instance;\n  }\n\n  static async writeState() {\n    try {\n      // fs.writeFile(\"./data/Customers.json\", JSON.stringify(Management.Customers), function (){})\n      // fs.writeFile(\"./data/Restaurants.json\", JSON.stringify(Management.Application), function (){})\n      // fs.writeFile(\"./data/Stations.json\", JSON.stringify(Management.stationList), function (){})\n      // fs.writeFile(\"./data/Trains.json\", JSON.stringify(Management.trainList), function (){})\n      // await writeJsonFile('./data/Customers.json', JSON.stringify(Management.Customers));\n      console.log(Management.Customers);\n    } catch (err) {\n      console.error(err);\n    }\n  } // static readState(){\n  //     try {\n  //         let arrCust = CustomerData;\n  //         for (let i=0;i<arrCust.length;i++){\n  //             Management.Customers.push(Object.setPrototypeOf(arrCust[i], Customer.prototype));\n  //             Management.loginC.set(arrCust[i]._username, Object.setPrototypeOf(arrCust[i], Customer.prototype))\n  //         }\n  //         let arrRest = RestaurantData;\n  //         console.log(RestaurantData);\n  //         for (let i=0;i<arrRest.length;i++){\n  //             Management.Application.push(Object.setPrototypeOf(arrRest[i], Restaurant.prototype));\n  //             Management.loginR.set(arrRest[i]._username, Object.setPrototypeOf(arrRest[i], Restaurant.prototype))\n  //         }\n  //         console.log(Management.loginR);\n  //         let arrStation = StationsData;\n  //         for (let i=0;i<arrStation.length;i++){\n  //             Management.stationList.push(Object.setPrototypeOf(arrStation[i], Station.prototype));\n  //         }\n  //         let arrTrain = TrainsData;\n  //         for (let i=0;i<arrTrain.length;i++){\n  //             Management.trainList.push(Object.setPrototypeOf(arrTrain[i], Train.prototype));\n  //         }\n  //     } catch (err) {\n  //         console.error(err)\n  //         return false\n  //     }\n  // }\n\n\n  static readState() {\n    try {\n      let arrCust = CustomerData;\n\n      for (let i = 0; i < arrCust.length; i++) {\n        let x = Object.setPrototypeOf(arrCust[i], Customer.prototype);\n        Management.Customers.set(x.getID(), x);\n        Management.loginC.set(x.getUsername(), x);\n        Account.unique = Math.max(x.getID(), Account.unique);\n        Account.unique++;\n      }\n\n      let arrRest = RestaurantData;\n\n      for (let i = 0; i < arrRest.length; i++) {\n        let x = Object.setPrototypeOf(arrRest[i], Restaurant.prototype);\n        Management.ApprovedRestaurants.set(x.getID(), x);\n        Management.loginR.set(x.getUsername(), x);\n        Account.unique = Math.max(x.getID(), Account.unique);\n        Account.unique++;\n      }\n\n      let arrStation = StationsData;\n\n      for (let i = 0; i < arrStation.length; i++) {\n        let x = Object.setPrototypeOf(arrStation[i], Station.prototype);\n        Management.stationList.set(x.getID(), x);\n      }\n\n      let arrTrains = TrainsData;\n\n      for (let i = 0; i < arrTrains.length; i++) {\n        let x = Object.setPrototypeOf(arrTrains[i], Train.prototype);\n        Management.trainList.set(x.getID(), x);\n        Management.trainNo.set(x.TrainNo, x);\n      }\n\n      Management.trainListForStoring = Array.from(Management.trainList.values());\n      let arrAgent = AgentData;\n\n      for (let i = 0; i < arrAgent.length; i++) {\n        let x = Object.setPrototypeOf(arrAgent[i], Agent.prototype);\n        Management.agentList.set(x.getID(), x);\n        Management.loginA.set(x.getUsername(), x);\n        System.active_agent.push(x);\n      }\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n\n  static AuthenticateUser(username, password) {\n    let l = Management.loginC.get(username);\n    console.log(l);\n\n    if (l !== undefined) {\n      if (l.checkPassword(password)) return l.getUsername();\n    }\n\n    let r = Management.loginR.get(username);\n    console.log(Management.loginR);\n    console.log(r);\n\n    if (r !== undefined) {\n      if (r.checkPassword(password)) return r.getUsername();\n    }\n\n    let a = Management.loginA.get(username);\n\n    if (a !== undefined) {\n      if (a.checkPassword(password)) return a.getUsername();\n    }\n\n    if (username === \"manager\") {\n      if (password === \"123\") {\n        return \"manager\";\n      }\n    }\n\n    return null;\n  }\n\n  static getMenu(train, timemax = new Time(23, 59)) {\n    let timemin = new Time();\n    timemin.updateTime();\n    const rStation = train.Return_RouteStation();\n    let rTime = new Map(train.Return_RouteTime());\n    let reqStations = [];\n    let time = []; // console.log(rTime);\n    // console.log(timemin);\n    // console.log(timemax);\n    // console.log(typeof rTime);\n    // console.log(rTime.keys());\n\n    for (let key of Array.from(train.routeTime.keys())) {\n      let t = rTime.get(key); // console.log(t);\n\n      if (t) {\n        if (t.lessThanEqual(timemax) && timemin.lessThanEqual(t)) {\n          reqStations.push(key);\n          time.push(t);\n        }\n      }\n    }\n\n    console.log(reqStations);\n    let items = Array();\n    let times = Array();\n    let i = 0;\n\n    for (let stat of reqStations) {\n      // console.log(stat);\n      let rs = rStation.get(stat); // console.log(rs);\n\n      if (rs) {\n        let ms = Management.stationList.get(rs);\n        console.log(typeof ms);\n\n        if (ms) {\n          console.log(ms.getID());\n          Array.prototype.push.apply(items, ms.getItem());\n\n          for (let x of ms.getItem()) {\n            times.push(time[i]);\n          } // console.log(ms.getItem());\n\n        }\n      }\n\n      i++;\n    }\n\n    let final = new Map([]);\n    let final2 = new Map([]);\n    i = 0;\n\n    for (let x of items) {\n      let c = final.get(x.type);\n      let d = final2.get(x.type);\n\n      if (c && d) {\n        c.push(x);\n        d.push(times[i]);\n        final.set(x.type, c);\n        final2.set(x.type, d);\n      } else {\n        c = new Array();\n        c.push(x);\n        final.set(x.type, c);\n        d = new Array();\n        d.push(times[i]);\n        final2.set(x.type, d);\n      }\n\n      i++;\n    }\n\n    console.log(items);\n    console.log(final);\n    return [final, final2];\n  }\n\n  getRestaurant(username) {\n    return null;\n  }\n\n  getAgent(username) {\n    return null;\n  }\n\n} // let c = new Customer(\"Shashvat\", \"Shash\", \"123\", \"123456789\");\n// let r = new Restaurant(\"Dominos\", \"Dom\", \"234\", 15);\n// Database.writeState();\n//\n//\n//\n// Database.readState();\n\nDatabase.instance = null;","map":{"version":3,"sources":["/home/sajal/SE/project_final/TGHM_final/src/Logic/Database.ts"],"names":["Agent","Customer","Restaurant","Station","Time","Train","Management","Account","System","CustomerData","RestaurantData","StationsData","TrainsData","AgentData","Database","constructor","getInstance","instance","writeState","console","log","Customers","err","error","readState","arrCust","i","length","x","Object","setPrototypeOf","prototype","set","getID","loginC","getUsername","unique","Math","max","arrRest","ApprovedRestaurants","loginR","arrStation","stationList","arrTrains","trainList","trainNo","TrainNo","trainListForStoring","Array","from","values","arrAgent","agentList","loginA","active_agent","push","AuthenticateUser","username","password","l","get","undefined","checkPassword","r","a","getMenu","train","timemax","timemin","updateTime","rStation","Return_RouteStation","rTime","Map","Return_RouteTime","reqStations","time","key","routeTime","keys","t","lessThanEqual","items","times","stat","rs","ms","apply","getItem","final","final2","c","type","d","getRestaurant","getAgent"],"mappings":"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","sourcesContent":["\nimport { Agent } from './Agent';\nimport { Customer } from './Customer';\nimport { AccountType } from './Enum';\nimport { Item } from './Item';\nimport { Menu } from './Menu';\nimport { Restaurant } from './Restaurant';\nimport { Station } from './Station';\nimport { Time } from './Time';\nimport {Train} from './Train';\nimport {Management} from './Management';\nimport { readFile } from 'node:fs';\nimport { Account } from './Account';\nimport { System } from './System';\nimport CustomerData from \"./data/Customers.json\";\nimport RestaurantData from \"./data/Restaurants.json\";\nimport StationsData from \"./data/Stations.json\";\nimport TrainsData from \"./data/Trains.json\";\nimport AgentData from \"./data/Agents.json\";\n\n\n// const fs = require(\"fs\");\n// const CircularJSON = require('circular-json');\n\nexport class Database{\n    static instance: Database|null = null;\n\n    private constructor(){\n    }\n\n    static getInstance() : Database{\n        if (this.instance==null){\n            this.instance = new Database();\n        }\n        return this.instance;\n    }\n\n    static async writeState() {\n        try {\n            // fs.writeFile(\"./data/Customers.json\", JSON.stringify(Management.Customers), function (){})\n            // fs.writeFile(\"./data/Restaurants.json\", JSON.stringify(Management.Application), function (){})\n            // fs.writeFile(\"./data/Stations.json\", JSON.stringify(Management.stationList), function (){})\n            // fs.writeFile(\"./data/Trains.json\", JSON.stringify(Management.trainList), function (){})\n            // await writeJsonFile('./data/Customers.json', JSON.stringify(Management.Customers));\n            console.log(Management.Customers);\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n\n    // static readState(){\n    //     try {\n    //         let arrCust = CustomerData;\n    //         for (let i=0;i<arrCust.length;i++){\n    //             Management.Customers.push(Object.setPrototypeOf(arrCust[i], Customer.prototype));\n    //             Management.loginC.set(arrCust[i]._username, Object.setPrototypeOf(arrCust[i], Customer.prototype))\n    //         }\n    //         let arrRest = RestaurantData;\n    //         console.log(RestaurantData);\n    //         for (let i=0;i<arrRest.length;i++){\n    //             Management.Application.push(Object.setPrototypeOf(arrRest[i], Restaurant.prototype));\n    //             Management.loginR.set(arrRest[i]._username, Object.setPrototypeOf(arrRest[i], Restaurant.prototype))\n    //         }\n    //         console.log(Management.loginR);\n    //         let arrStation = StationsData;\n    //         for (let i=0;i<arrStation.length;i++){\n    //             Management.stationList.push(Object.setPrototypeOf(arrStation[i], Station.prototype));\n    //         }\n    //         let arrTrain = TrainsData;\n    //         for (let i=0;i<arrTrain.length;i++){\n    //             Management.trainList.push(Object.setPrototypeOf(arrTrain[i], Train.prototype));\n    //         }\n    //     } catch (err) {\n    //         console.error(err)\n    //         return false\n    //     }\n    // }\n\n\n    static readState(){\n        try {\n            let arrCust = CustomerData;\n            for (let i=0;i<arrCust.length;i++){\n                let x = Object.setPrototypeOf(arrCust[i], Customer.prototype);\n                Management.Customers.set(x.getID(),(x));\n                Management.loginC.set(x.getUsername(),x);\n                Account.unique= Math.max(x.getID(),Account.unique);\n                Account.unique++;\n            }\n            let arrRest = RestaurantData;\n            for (let i=0;i<arrRest.length;i++){\n                let x = Object.setPrototypeOf(arrRest[i], Restaurant.prototype);\n                Management.ApprovedRestaurants.set(x.getID(),(x));\n                Management.loginR.set(x.getUsername(), x);\n                Account.unique= Math.max(x.getID(),Account.unique);\n                Account.unique++;\n            }\n            let arrStation = StationsData;\n            for (let i=0;i<arrStation.length;i++){\n                let x = Object.setPrototypeOf(arrStation[i], Station.prototype)\n                Management.stationList.set(x.getID(), (x));\n            }\n            let arrTrains = TrainsData;\n            for (let i=0;i<arrTrains.length;i++){\n                let x = Object.setPrototypeOf(arrTrains[i], Train.prototype);\n                Management.trainList.set(x.getID(), (x));\n                Management.trainNo.set(x.TrainNo, x);\n            }\n            Management.trainListForStoring = Array.from(Management.trainList.values());\n            let arrAgent = AgentData;\n            for (let i=0;i<arrAgent.length;i++){\n                let x = Object.setPrototypeOf(arrAgent[i], Agent.prototype);\n                Management.agentList.set(x.getID(), (x));\n                Management.loginA.set(x.getUsername(), x);\n                System.active_agent.push(x);\n            }\n        } catch (err) {\n            console.error(err)\n            return false\n        }\n    }\n\n    static AuthenticateUser(username:string, password:string): string|null{\n        let l = Management.loginC.get(username);\n        console.log(l);\n        if (l !== undefined){\n            if (l.checkPassword(password)) return l.getUsername();\n        }\n        let r = Management.loginR.get(username);\n        console.log(Management.loginR);\n        console.log(r);\n        if (r !== undefined){\n            if (r.checkPassword(password)) return r.getUsername();\n        }\n        let a = Management.loginA.get(username);\n        if (a !== undefined){\n            if (a.checkPassword(password)) return a.getUsername();\n        }\n        if (username===\"manager\"){\n            if (password===\"123\"){\n                return \"manager\";\n            }\n        }\n        return null;\n    }\n\n    static getMenu(train : Train,  timemax : Time=new Time(23,59)) : [Map<string,Array<Item>>,Map<string,Array<Time>>]{\n        let timemin = new Time();\n        timemin.updateTime();\n        const rStation=train.Return_RouteStation();\n        let rTime:Map<string, Time> = new Map<string, Time> (train.Return_RouteTime());\n        let reqStations = [];\n        let time = [];\n        // console.log(rTime);\n        // console.log(timemin);\n        // console.log(timemax);\n        // console.log(typeof rTime);\n        // console.log(rTime.keys());\n        for(let key of Array.from(train.routeTime.keys())) {\n            let t = rTime.get(key);\n            // console.log(t);\n            if(t){\n                if(t.lessThanEqual(timemax)&&timemin.lessThanEqual(t)){\n                    reqStations.push(key);\n                    time.push(t);\n                }\n            }\n        }\n        console.log(reqStations);\n        let items= Array <Item>();\n        let times =  Array <Time>();\n        let i=0;\n        for(let stat of reqStations){\n            // console.log(stat);\n            let rs=rStation.get(stat);\n            // console.log(rs);\n            if(rs){\n                let ms=Management.stationList.get(rs);\n                console.log(typeof ms);\n                if(ms){\n                    console.log(ms.getID());\n                    Array.prototype.push.apply(items,ms.getItem());\n                    for(let x of ms.getItem()){\n                        times.push(time[i]);\n                    }\n                    // console.log(ms.getItem());\n                }\n            }\n            i++;\n        }\n        let final=new Map<string,Array<Item>>([]);\n        let final2 = new Map<string,Array<Time>>([]);\n        i=0;\n        for(let x of items){\n            let c = final.get(x.type);\n            let d = final2.get(x.type);\n            if(c && d) {\n                c.push(x);\n                d.push(times[i]);\n                final.set(x.type, c);\n                final2.set(x.type, d);\n            }\n            else{\n                c = new Array<Item>();\n                c.push(x);\n                final.set(x.type, c);\n                d = new Array<Time>();\n                d.push(times[i]);\n                final2.set(x.type, d);\n            }\n            i++;\n        }\n        console.log(items);\n        console.log(final);\n        return [final,final2];\n    }\n    getRestaurant(username:string) : Restaurant|null{\n        return null;    \n    }\n    getAgent(username:string) : Agent|null{\n        return null;\n    }\n}\n\n// let c = new Customer(\"Shashvat\", \"Shash\", \"123\", \"123456789\");\n// let r = new Restaurant(\"Dominos\", \"Dom\", \"234\", 15);\n// Database.writeState();\n//\n//\n//\n// Database.readState();\n"]},"metadata":{},"sourceType":"module"}