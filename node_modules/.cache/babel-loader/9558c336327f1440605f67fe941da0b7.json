{"ast":null,"code":"import { Agent } from './Agent';\nimport { Customer } from './Customer';\nimport { Restaurant } from './Restaurant';\nimport { Station } from './Station';\nimport { Time } from './Time';\nimport { Train } from './Train';\nimport { Management } from './Management';\nimport { Account } from './Account';\nimport { System } from './System';\nimport CustomerData from \"./data/Customers.json\";\nimport RestaurantData from \"./data/Restaurants.json\";\nimport StationsData from \"./data/Stations.json\";\nimport TrainsData from \"./data/Trains.json\";\nimport AgentData from \"./data/Agents.json\";\n\nconst fs = require(\"fs\");\n\nconst CircularJSON = require('circular-json');\n\nexport class Database {\n  constructor() {}\n\n  static getInstance() {\n    if (this.instance == null) {\n      this.instance = new Database();\n    }\n\n    return this.instance;\n  }\n\n  static async writeState() {\n    try {\n      var FileSaver = require('file-saver');\n\n      FileSaver.saveFile(\"./data/Customers.json\", JSON.stringify(Management.Customers), function () {});\n      FileSaver.writeFile(\"./data/Restaurants.json\", JSON.stringify(Management.Application), function () {});\n      FileSaver.writeFile(\"./data/Stations.json\", JSON.stringify(Management.stationList), function () {});\n      FileSaver.writeFile(\"./data/Trains.json\", JSON.stringify(Management.trainList), function () {});\n      FileSaver.writeFile('./data/Customers.json', JSON.stringify(Management.Customers));\n      console.log(Management.Customers);\n    } catch (err) {\n      console.error(err);\n    }\n  } // static readState(){\n  //     try {\n  //         let arrCust = CustomerData;\n  //         for (let i=0;i<arrCust.length;i++){\n  //             Management.Customers.push(Object.setPrototypeOf(arrCust[i], Customer.prototype));\n  //             Management.loginC.set(arrCust[i]._username, Object.setPrototypeOf(arrCust[i], Customer.prototype))\n  //         }\n  //         let arrRest = RestaurantData;\n  //         console.log(RestaurantData);\n  //         for (let i=0;i<arrRest.length;i++){\n  //             Management.Application.push(Object.setPrototypeOf(arrRest[i], Restaurant.prototype));\n  //             Management.loginR.set(arrRest[i]._username, Object.setPrototypeOf(arrRest[i], Restaurant.prototype))\n  //         }\n  //         console.log(Management.loginR);\n  //         let arrStation = StationsData;\n  //         for (let i=0;i<arrStation.length;i++){\n  //             Management.stationList.push(Object.setPrototypeOf(arrStation[i], Station.prototype));\n  //         }\n  //         let arrTrain = TrainsData;\n  //         for (let i=0;i<arrTrain.length;i++){\n  //             Management.trainList.push(Object.setPrototypeOf(arrTrain[i], Train.prototype));\n  //         }\n  //     } catch (err) {\n  //         console.error(err)\n  //         return false\n  //     }\n  // }\n\n\n  static readState() {\n    try {\n      let arrCust = CustomerData;\n\n      for (let i = 0; i < arrCust.length; i++) {\n        let x = Object.setPrototypeOf(arrCust[i], Customer.prototype);\n        Management.Customers.set(x.getID(), x);\n        Management.loginC.set(x.getUsername(), x);\n        Account.unique = Math.max(x.getID(), Account.unique);\n        Account.unique++;\n      }\n\n      let arrRest = RestaurantData;\n\n      for (let i = 0; i < arrRest.length; i++) {\n        let x = Object.setPrototypeOf(arrRest[i], Restaurant.prototype);\n        Management.ApprovedRestaurants.set(x.getID(), x);\n        Management.loginR.set(x.getUsername(), x);\n        Account.unique = Math.max(x.getID(), Account.unique);\n        Account.unique++;\n      }\n\n      let arrStation = StationsData;\n\n      for (let i = 0; i < arrStation.length; i++) {\n        let x = Object.setPrototypeOf(arrStation[i], Station.prototype);\n        Management.stationList.set(x.getID(), x);\n      }\n\n      let arrTrains = TrainsData;\n\n      for (let i = 0; i < arrTrains.length; i++) {\n        let x = Object.setPrototypeOf(arrTrains[i], Train.prototype);\n        Management.trainList.set(x.getID(), x);\n        Management.trainNo.set(x.TrainNo, x);\n      }\n\n      Management.trainListForStoring = Array.from(Management.trainList.values());\n      let arrAgent = AgentData;\n\n      for (let i = 0; i < arrAgent.length; i++) {\n        let x = Object.setPrototypeOf(arrAgent[i], Agent.prototype);\n        Management.agentList.set(x.getID(), x);\n        Management.loginA.set(x.getUsername(), x);\n        System.active_agent.push(x);\n      }\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n\n  static AuthenticateUser(username, password) {\n    let l = Management.loginC.get(username);\n    console.log(l);\n\n    if (l !== undefined) {\n      if (l.checkPassword(password)) return l.getUsername();\n    }\n\n    let r = Management.loginR.get(username);\n    console.log(Management.loginR);\n    console.log(r);\n\n    if (r !== undefined) {\n      if (r.checkPassword(password)) return r.getUsername();\n    }\n\n    let a = Management.loginA.get(username);\n\n    if (a !== undefined) {\n      if (a.checkPassword(password)) return a.getUsername();\n    }\n\n    if (username === \"manager\") {\n      if (password === \"123\") {\n        return \"manager\";\n      }\n    }\n\n    return null;\n  }\n\n  static getMenu(train, timemax = new Time(23, 59)) {\n    let timemin = new Time();\n    timemin.updateTime();\n    const rStation = train.Return_RouteStation();\n    let rTime = new Map(train.Return_RouteTime());\n    let reqStations = [];\n    let time = []; // console.log(rTime);\n    // console.log(timemin);\n    // console.log(timemax);\n    // console.log(typeof rTime);\n    // console.log(rTime.keys());\n\n    for (let key of Array.from(train.routeTime.keys())) {\n      let t = rTime.get(key); // console.log(t);\n\n      if (t) {\n        if (t.lessThanEqual(timemax) && timemin.lessThanEqual(t)) {\n          reqStations.push(key);\n          time.push(t);\n        }\n      }\n    }\n\n    console.log(reqStations);\n    let items = Array();\n    let times = Array();\n    let i = 0;\n\n    for (let stat of reqStations) {\n      // console.log(stat);\n      let rs = rStation.get(stat); // console.log(rs);\n\n      if (rs) {\n        let ms = Management.stationList.get(rs);\n        console.log(typeof ms);\n\n        if (ms) {\n          console.log(ms.getID());\n          Array.prototype.push.apply(items, ms.getItem());\n\n          for (let x of ms.getItem()) {\n            times.push(time[i]);\n          } // console.log(ms.getItem());\n\n        }\n      }\n\n      i++;\n    }\n\n    let final = new Map([]);\n    let final2 = new Map([]);\n    i = 0;\n\n    for (let x of items) {\n      let c = final.get(x.type);\n      let d = final2.get(x.type);\n\n      if (c && d) {\n        c.push(x);\n        d.push(times[i]);\n        final.set(x.type, c);\n        final2.set(x.type, d);\n      } else {\n        c = new Array();\n        c.push(x);\n        final.set(x.type, c);\n        d = new Array();\n        d.push(times[i]);\n        final2.set(x.type, d);\n      }\n\n      i++;\n    }\n\n    console.log(items);\n    console.log(final);\n    return [final, final2];\n  }\n\n  getRestaurant(username) {\n    return null;\n  }\n\n  getAgent(username) {\n    return null;\n  }\n\n} // let c = new Customer(\"Shashvat\", \"Shash\", \"123\", \"123456789\");\n// let r = new Restaurant(\"Dominos\", \"Dom\", \"234\", 15);\n// Database.writeState();\n//\n//\n//\n// Database.readState();\n\nDatabase.instance = null;","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Database.ts"],"names":["Agent","Customer","Restaurant","Station","Time","Train","Management","Account","System","CustomerData","RestaurantData","StationsData","TrainsData","AgentData","fs","require","CircularJSON","Database","constructor","getInstance","instance","writeState","FileSaver","saveFile","JSON","stringify","Customers","writeFile","Application","stationList","trainList","console","log","err","error","readState","arrCust","i","length","x","Object","setPrototypeOf","prototype","set","getID","loginC","getUsername","unique","Math","max","arrRest","ApprovedRestaurants","loginR","arrStation","arrTrains","trainNo","TrainNo","trainListForStoring","Array","from","values","arrAgent","agentList","loginA","active_agent","push","AuthenticateUser","username","password","l","get","undefined","checkPassword","r","a","getMenu","train","timemax","timemin","updateTime","rStation","Return_RouteStation","rTime","Map","Return_RouteTime","reqStations","time","key","routeTime","keys","t","lessThanEqual","items","times","stat","rs","ms","apply","getItem","final","final2","c","type","d","getRestaurant","getAgent"],"mappings":"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","sourcesContent":["\r\nimport { Agent } from './Agent';\r\nimport { Customer } from './Customer';\r\nimport { AccountType } from './Enum';\r\nimport { Item } from './Item';\r\nimport { Menu } from './Menu';\r\nimport { Restaurant } from './Restaurant';\r\nimport { Station } from './Station';\r\nimport { Time } from './Time';\r\nimport {Train} from './Train';\r\nimport {Management} from './Management';\r\nimport { readFile } from 'node:fs';\r\nimport { Account } from './Account';\r\nimport { System } from './System';\r\nimport CustomerData from \"./data/Customers.json\";\r\nimport RestaurantData from \"./data/Restaurants.json\";\r\nimport StationsData from \"./data/Stations.json\";\r\nimport TrainsData from \"./data/Trains.json\";\r\nimport AgentData from \"./data/Agents.json\";\r\n\r\n\r\nconst fs = require(\"fs\");\r\nconst CircularJSON = require('circular-json');\r\n\r\n\r\nexport class Database{\r\n    static instance: Database|null = null;\r\n\r\n    private constructor(){\r\n    }\r\n\r\n    static getInstance() : Database{\r\n        if (this.instance==null){\r\n            this.instance = new Database();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    static async writeState() {\r\n        try {\r\n            var FileSaver = require('file-saver');\r\n            FileSaver.saveFile(\"./data/Customers.json\", JSON.stringify(Management.Customers), function (){})\r\n            FileSaver.writeFile(\"./data/Restaurants.json\", JSON.stringify(Management.Application), function (){})\r\n            FileSaver.writeFile(\"./data/Stations.json\", JSON.stringify(Management.stationList), function (){})\r\n            FileSaver.writeFile(\"./data/Trains.json\", JSON.stringify(Management.trainList), function (){})\r\n            FileSaver.writeFile('./data/Customers.json', JSON.stringify(Management.Customers));\r\n            console.log(Management.Customers);\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n\r\n    // static readState(){\r\n    //     try {\r\n    //         let arrCust = CustomerData;\r\n    //         for (let i=0;i<arrCust.length;i++){\r\n    //             Management.Customers.push(Object.setPrototypeOf(arrCust[i], Customer.prototype));\r\n    //             Management.loginC.set(arrCust[i]._username, Object.setPrototypeOf(arrCust[i], Customer.prototype))\r\n    //         }\r\n    //         let arrRest = RestaurantData;\r\n    //         console.log(RestaurantData);\r\n    //         for (let i=0;i<arrRest.length;i++){\r\n    //             Management.Application.push(Object.setPrototypeOf(arrRest[i], Restaurant.prototype));\r\n    //             Management.loginR.set(arrRest[i]._username, Object.setPrototypeOf(arrRest[i], Restaurant.prototype))\r\n    //         }\r\n    //         console.log(Management.loginR);\r\n    //         let arrStation = StationsData;\r\n    //         for (let i=0;i<arrStation.length;i++){\r\n    //             Management.stationList.push(Object.setPrototypeOf(arrStation[i], Station.prototype));\r\n    //         }\r\n    //         let arrTrain = TrainsData;\r\n    //         for (let i=0;i<arrTrain.length;i++){\r\n    //             Management.trainList.push(Object.setPrototypeOf(arrTrain[i], Train.prototype));\r\n    //         }\r\n    //     } catch (err) {\r\n    //         console.error(err)\r\n    //         return false\r\n    //     }\r\n    // }\r\n\r\n\r\n    static readState(){\r\n        try {\r\n            let arrCust = CustomerData;\r\n            for (let i=0;i<arrCust.length;i++){\r\n                let x = Object.setPrototypeOf(arrCust[i], Customer.prototype);\r\n                Management.Customers.set(x.getID(),(x));\r\n                Management.loginC.set(x.getUsername(),x);\r\n                Account.unique= Math.max(x.getID(),Account.unique);\r\n                Account.unique++;\r\n            }\r\n            let arrRest = RestaurantData;\r\n            for (let i=0;i<arrRest.length;i++){\r\n                let x = Object.setPrototypeOf(arrRest[i], Restaurant.prototype);\r\n                Management.ApprovedRestaurants.set(x.getID(),(x));\r\n                Management.loginR.set(x.getUsername(), x);\r\n                Account.unique= Math.max(x.getID(),Account.unique);\r\n                Account.unique++;\r\n            }\r\n            let arrStation = StationsData;\r\n            for (let i=0;i<arrStation.length;i++){\r\n                let x = Object.setPrototypeOf(arrStation[i], Station.prototype)\r\n                Management.stationList.set(x.getID(), (x));\r\n            }\r\n            let arrTrains = TrainsData;\r\n            for (let i=0;i<arrTrains.length;i++){\r\n                let x = Object.setPrototypeOf(arrTrains[i], Train.prototype);\r\n                Management.trainList.set(x.getID(), (x));\r\n                Management.trainNo.set(x.TrainNo, x);\r\n            }\r\n            Management.trainListForStoring = Array.from(Management.trainList.values());\r\n            let arrAgent = AgentData;\r\n            for (let i=0;i<arrAgent.length;i++){\r\n                let x = Object.setPrototypeOf(arrAgent[i], Agent.prototype);\r\n                Management.agentList.set(x.getID(), (x));\r\n                Management.loginA.set(x.getUsername(), x);\r\n                System.active_agent.push(x);\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n            return false\r\n        }\r\n    }\r\n\r\n    static AuthenticateUser(username:string, password:string): string|null{\r\n        let l = Management.loginC.get(username);\r\n        console.log(l);\r\n        if (l !== undefined){\r\n            if (l.checkPassword(password)) return l.getUsername();\r\n        }\r\n        let r = Management.loginR.get(username);\r\n        console.log(Management.loginR);\r\n        console.log(r);\r\n        if (r !== undefined){\r\n            if (r.checkPassword(password)) return r.getUsername();\r\n        }\r\n        let a = Management.loginA.get(username);\r\n        if (a !== undefined){\r\n            if (a.checkPassword(password)) return a.getUsername();\r\n        }\r\n        if (username===\"manager\"){\r\n            if (password===\"123\"){\r\n                return \"manager\";\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static getMenu(train : Train,  timemax : Time=new Time(23,59)) : [Map<string,Array<Item>>,Map<string,Array<Time>>]{\r\n        let timemin = new Time();\r\n        timemin.updateTime();\r\n        const rStation=train.Return_RouteStation();\r\n        let rTime:Map<string, Time> = new Map<string, Time> (train.Return_RouteTime());\r\n        let reqStations = [];\r\n        let time = [];\r\n        // console.log(rTime);\r\n        // console.log(timemin);\r\n        // console.log(timemax);\r\n        // console.log(typeof rTime);\r\n        // console.log(rTime.keys());\r\n        for(let key of Array.from(train.routeTime.keys())) {\r\n            let t = rTime.get(key);\r\n            // console.log(t);\r\n            if(t){\r\n                if(t.lessThanEqual(timemax)&&timemin.lessThanEqual(t)){\r\n                    reqStations.push(key);\r\n                    time.push(t);\r\n                }\r\n            }\r\n        }\r\n        console.log(reqStations);\r\n        let items= Array <Item>();\r\n        let times =  Array <Time>();\r\n        let i=0;\r\n        for(let stat of reqStations){\r\n            // console.log(stat);\r\n            let rs=rStation.get(stat);\r\n            // console.log(rs);\r\n            if(rs){\r\n                let ms=Management.stationList.get(rs);\r\n                console.log(typeof ms);\r\n                if(ms){\r\n                    console.log(ms.getID());\r\n                    Array.prototype.push.apply(items,ms.getItem());\r\n                    for(let x of ms.getItem()){\r\n                        times.push(time[i]);\r\n                    }\r\n                    // console.log(ms.getItem());\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        let final=new Map<string,Array<Item>>([]);\r\n        let final2 = new Map<string,Array<Time>>([]);\r\n        i=0;\r\n        for(let x of items){\r\n            let c = final.get(x.type);\r\n            let d = final2.get(x.type);\r\n            if(c && d) {\r\n                c.push(x);\r\n                d.push(times[i]);\r\n                final.set(x.type, c);\r\n                final2.set(x.type, d);\r\n            }\r\n            else{\r\n                c = new Array<Item>();\r\n                c.push(x);\r\n                final.set(x.type, c);\r\n                d = new Array<Time>();\r\n                d.push(times[i]);\r\n                final2.set(x.type, d);\r\n            }\r\n            i++;\r\n        }\r\n        console.log(items);\r\n        console.log(final);\r\n        return [final,final2];\r\n    }\r\n    getRestaurant(username:string) : Restaurant|null{\r\n        return null;    \r\n    }\r\n    getAgent(username:string) : Agent|null{\r\n        return null;\r\n    }\r\n}\r\n\r\n// let c = new Customer(\"Shashvat\", \"Shash\", \"123\", \"123456789\");\r\n// let r = new Restaurant(\"Dominos\", \"Dom\", \"234\", 15);\r\n// Database.writeState();\r\n//\r\n//\r\n//\r\n// Database.readState();\r\n"]},"metadata":{},"sourceType":"module"}