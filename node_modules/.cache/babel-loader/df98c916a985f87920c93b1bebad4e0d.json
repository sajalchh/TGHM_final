{"ast":null,"code":"var _jsxFileName = \"/home/sajal/SE/project_final/TGHM_final/src/Pages/Dashboard/Dashboard.js\";\nimport React from 'react';\nimport DashBoard from \"../../Components/DashBoard/DashBoard\";\nimport AgentDashRouter from \"../../Routers/AccountDashRoutes/AgentDashRouter\";\nimport RestaurantDashRouter from \"../../Routers/AccountDashRoutes/RestaurantDashRouter\";\nimport ManagementDashRouter from \"../../Routers/AccountDashRoutes/ManagementDashRouter\";\nimport PassengerDashRouter from \"../../Routers/AccountDashRoutes/PassengerDashRouter\";\nimport { Management } from \"../../Logic/Management\";\nimport { Customer } from \"../../Logic/Customer\";\nimport { AccountType } from \"../../Logic/Enum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allAccounts = [{\n  id: 1,\n  name: \"David\",\n  type: \"\",\n  username: \"David123\",\n  password: \"123\"\n}];\nconst AgentLinks = [{\n  link: \"/dashboard/\",\n  item: \"Home\"\n}, {\n  link: \"/dashboard/order\",\n  item: \"Orders\"\n}];\nconst RestaurantLinks = [{\n  link: \"/dashboard/\",\n  item: \"Home\"\n}, {\n  link: \"/dashboard/orders\",\n  item: \"Orders\"\n}, {\n  link: \"/dashboard/menu\",\n  item: \"Menu\"\n}, {\n  link: \"/dashboard/agents\",\n  item: \"Agents\"\n}];\nconst ManagementLinks = [{\n  link: \"/dashboard/\",\n  item: \"Home\"\n}, {\n  link: \"/dashboard/stats\",\n  item: \"Statistics\"\n}, {\n  link: \"/dashboard/railway\",\n  item: \"Railways\"\n}];\nconst PassengerLinks = [{\n  link: \"/dashboard/\",\n  item: \"Home\"\n}, {\n  link: \"/dashboard/order\",\n  item: \"Order\"\n}];\nexport default class Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: {}\n    };\n  }\n\n  componentWillMount() {\n    let tokenString = sessionStorage.getItem('token');\n\n    if (!tokenString) {\n      tokenString = localStorage.getItem('token');\n    }\n\n    const userToken = JSON.parse(tokenString);\n    console.log(userToken);\n\n    if (userToken === \"manager\") {\n      this.setState({\n        account: Management.getInstance()\n      });\n    }\n\n    let l = Management.loginC.get(userToken);\n    console.log(l);\n\n    if (l !== undefined) {\n      this.setState({\n        account: l\n      });\n    }\n\n    let r = Management.loginR.get(userToken);\n    console.log(r);\n\n    if (r !== undefined) {\n      this.setState({\n        account: r\n      });\n    }\n\n    let a = Management.loginA.get(userToken);\n\n    if (a !== undefined) {\n      this.setState({\n        account: a\n      });\n    }\n  }\n\n  renderDashBoard() {\n    if (this.state.account.getType() === AccountType.Agent) {\n      return /*#__PURE__*/_jsxDEV(DashBoard, {\n        menu: AgentLinks,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            minHeight: \"90vh\"\n          },\n          children: /*#__PURE__*/_jsxDEV(AgentDashRouter, {\n            account: this.state.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (this.state.account.getType() === AccountType.Restaurant) {\n      return /*#__PURE__*/_jsxDEV(DashBoard, {\n        menu: RestaurantLinks,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            minHeight: \"90vh\"\n          },\n          children: /*#__PURE__*/_jsxDEV(RestaurantDashRouter, {\n            account: this.state.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (this.state.account.getType() === AccountType.Management) {\n      return /*#__PURE__*/_jsxDEV(DashBoard, {\n        menu: ManagementLinks,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            minHeight: \"90vh\"\n          },\n          children: /*#__PURE__*/_jsxDEV(ManagementDashRouter, {\n            account: this.state.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (this.state.account.getType() === AccountType.Customer) {\n      return /*#__PURE__*/_jsxDEV(DashBoard, {\n        menu: PassengerLinks,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            minHeight: \"90vh\"\n          },\n          children: /*#__PURE__*/_jsxDEV(PassengerDashRouter, {\n            account: this.state.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.renderDashBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/sajal/SE/project_final/TGHM_final/src/Pages/Dashboard/Dashboard.js"],"names":["React","DashBoard","AgentDashRouter","RestaurantDashRouter","ManagementDashRouter","PassengerDashRouter","Management","Customer","AccountType","allAccounts","id","name","type","username","password","AgentLinks","link","item","RestaurantLinks","ManagementLinks","PassengerLinks","Dashboard","Component","constructor","props","state","account","componentWillMount","tokenString","sessionStorage","getItem","localStorage","userToken","JSON","parse","console","log","setState","getInstance","l","loginC","get","undefined","r","loginR","a","loginA","renderDashBoard","getType","Agent","minHeight","Restaurant","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DashBoard from \"../../Components/DashBoard/DashBoard\";\nimport AgentDashRouter from \"../../Routers/AccountDashRoutes/AgentDashRouter\";\nimport RestaurantDashRouter from \"../../Routers/AccountDashRoutes/RestaurantDashRouter\";\nimport ManagementDashRouter from \"../../Routers/AccountDashRoutes/ManagementDashRouter\";\nimport PassengerDashRouter from \"../../Routers/AccountDashRoutes/PassengerDashRouter\";\nimport {Management} from \"../../Logic/Management\";\nimport {Customer} from \"../../Logic/Customer\";\nimport {AccountType} from \"../../Logic/Enum\";\n\nconst allAccounts = [\n    {\n        id: 1,\n        name: \"David\",\n        type: \"\",\n        username: \"David123\",\n        password: \"123\",\n    },\n]\n\nconst AgentLinks = [\n    {link: \"/dashboard/\", item:\"Home\"},\n    {link: \"/dashboard/order\", item:\"Orders\"},\n]\n\nconst RestaurantLinks = [\n    {link: \"/dashboard/\", item:\"Home\"},\n    {link: \"/dashboard/orders\", item:\"Orders\"},\n    {link: \"/dashboard/menu\", item:\"Menu\"},\n    {link: \"/dashboard/agents\", item:\"Agents\"},\n]\n\nconst ManagementLinks = [\n    {link: \"/dashboard/\", item:\"Home\"},\n    {link: \"/dashboard/stats\", item:\"Statistics\"},\n    {link: \"/dashboard/railway\", item:\"Railways\"},\n]\n\nconst PassengerLinks = [\n    {link: \"/dashboard/\", item:\"Home\"},\n    {link: \"/dashboard/order\", item:\"Order\"}\n]\n\nexport default class Dashboard extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: {}\n        };\n    }\n\n    componentWillMount() {\n        let tokenString = sessionStorage.getItem('token');\n        if (!tokenString){\n            tokenString = localStorage.getItem('token');\n        }\n        const userToken = JSON.parse(tokenString);\n        console.log(userToken);\n        if (userToken === \"manager\"){\n            this.setState({account: Management.getInstance()})\n        }\n        let l = Management.loginC.get(userToken);\n        console.log(l);\n        if (l !== undefined){\n            this.setState({account: l});\n        }\n        let r = Management.loginR.get(userToken);\n        console.log(r);\n        if (r !== undefined){\n            this.setState({account: r});\n        }\n        let a = Management.loginA.get(userToken);\n        if (a !== undefined){\n            this.setState({account: a});\n        }\n    };\n\n    renderDashBoard(){\n        if (this.state.account.getType() === AccountType.Agent){\n            return (\n                <DashBoard menu={AgentLinks}>\n                    <div style={{minHeight: \"90vh\"}}>\n                        <AgentDashRouter account = {this.state.account} />\n                    </div>\n                </DashBoard>\n            );\n        }\n        if (this.state.account.getType() === AccountType.Restaurant){\n            return (\n                <DashBoard menu={RestaurantLinks}>\n                    <div style={{minHeight: \"90vh\"}}>\n                        <RestaurantDashRouter account = {this.state.account} />\n                    </div>\n                </DashBoard>\n            );\n        }\n        if (this.state.account.getType() === AccountType.Management){\n            return (\n                <DashBoard menu={ManagementLinks}>\n                    <div style={{minHeight: \"90vh\"}}>\n                        <ManagementDashRouter account = {this.state.account} />\n                    </div>\n                </DashBoard>\n            )\n        }\n        if (this.state.account.getType() === AccountType.Customer){\n            return (\n                <DashBoard menu={PassengerLinks}>\n                    <div style={{minHeight: \"90vh\"}}>\n                        <PassengerDashRouter account = {this.state.account} />\n                    </div>\n                </DashBoard>\n            )\n        }\n    }\n\n\n    render(){\n        console.log(this.state);\n        return(\n            <div>\n                {this.renderDashBoard()}\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}