{"ast":null,"code":"import { Account } from \"./Account\";\nimport { Management } from \"./Management\";\nimport { Time } from \"./Time\";\nexport class Train {\n  constructor(name, TrainNo, route, routeStation, ID = -1) {\n    this.Name = void 0;\n    this.TrainNo = void 0;\n    this.routeTime = void 0;\n    this.routeStation = void 0;\n    this.__Id = void 0;\n    this.Name = name;\n    this.routeTime = new Map(route);\n    this.routeStation = new Map(routeStation);\n    this.TrainNo = TrainNo;\n    if (ID == -1) this.__Id = Account.unique++;else this.__Id = ID;\n    let m = Management.getInstance();\n    m.trainList.set(this.__Id, this);\n    m.trainNo.set(TrainNo, this);\n    Management.trainListForStoring.push(this);\n  }\n\n  addStation(station, time) {\n    this.routeTime.set(station.name, time);\n    this.routeStation.set(station.name, station.getID()); //console.log(this.routeTime);\n  }\n\n  Return_RouteTime() {\n    return this.routeTime;\n  }\n\n  Return_RouteStation() {\n    return this.routeStation;\n  }\n\n  getID() {\n    return this.__Id;\n  }\n\n  static readTrain(train) {\n    let x = new Train(train[\"Name\"], train[\"TrainNo\"], new Map(), new Map());\n    let i = 0;\n    x.__Id = train[\"__Id\"];\n\n    for (let k of Object.keys(train[\"routeTime\"])) {\n      let m = Management.getInstance();\n      x.addStation(m.stationList.get(train[\"routeStation\"].get(k)), Object.setPrototypeOf(train[\"routeTime\"].get(k), Time.prototype));\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/shash/OneDrive/Desktop/Gits/TGHM_final/src/Logic/Train.ts"],"names":["Account","Management","Time","Train","constructor","name","TrainNo","route","routeStation","ID","Name","routeTime","__Id","Map","unique","m","getInstance","trainList","set","trainNo","trainListForStoring","push","addStation","station","time","getID","Return_RouteTime","Return_RouteStation","readTrain","train","x","i","k","Object","keys","stationList","get","setPrototypeOf","prototype"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAO,MAAMC,KAAN,CAAW;AAMdC,EAAAA,WAAW,CAACC,IAAD,EAAaC,OAAb,EAA4BC,KAA5B,EAAoDC,YAApD,EAAqFC,EAAS,GAAG,CAAC,CAAlG,EAAoG;AAAA,SAL/GC,IAK+G;AAAA,SAJ/GJ,OAI+G;AAAA,SAH/GK,SAG+G;AAAA,SAF/GH,YAE+G;AAAA,SADvGI,IACuG;AAC3G,SAAKF,IAAL,GAAUL,IAAV;AACA,SAAKM,SAAL,GAAiB,IAAIE,GAAJ,CAAQN,KAAR,CAAjB;AACA,SAAKC,YAAL,GAAoB,IAAIK,GAAJ,CAAQL,YAAR,CAApB;AACA,SAAKF,OAAL,GAAeA,OAAf;AACA,QAAGG,EAAE,IAAE,CAAC,CAAR,EACI,KAAKG,IAAL,GAAaZ,OAAO,CAACc,MAAR,EAAb,CADJ,KAGI,KAAKF,IAAL,GAAaH,EAAb;AACJ,QAAIM,CAAC,GAAGd,UAAU,CAACe,WAAX,EAAR;AACAD,IAAAA,CAAC,CAACE,SAAF,CAAYC,GAAZ,CAAgB,KAAKN,IAArB,EAA2B,IAA3B;AACAG,IAAAA,CAAC,CAACI,OAAF,CAAUD,GAAV,CAAcZ,OAAd,EAAsB,IAAtB;AACAL,IAAAA,UAAU,CAACmB,mBAAX,CAA+BC,IAA/B,CAAoC,IAApC;AACH;;AACDC,EAAAA,UAAU,CAACC,OAAD,EAAkBC,IAAlB,EAA8B;AACpC,SAAKb,SAAL,CAAeO,GAAf,CAAmBK,OAAO,CAAClB,IAA3B,EAAgCmB,IAAhC;AACA,SAAKhB,YAAL,CAAkBU,GAAlB,CAAsBK,OAAO,CAAClB,IAA9B,EAAmCkB,OAAO,CAACE,KAAR,EAAnC,EAFoC,CAGpC;AACH;;AACDC,EAAAA,gBAAgB,GAAqB;AACjC,WAAO,KAAKf,SAAZ;AACH;;AACDgB,EAAAA,mBAAmB,GAAuB;AACtC,WAAO,KAAKnB,YAAZ;AACH;;AACDiB,EAAAA,KAAK,GAAE;AACH,WAAO,KAAKb,IAAZ;AACH;;AACe,SAATgB,SAAS,CAACC,KAAD,EAAe;AAC3B,QAAIC,CAAC,GAAG,IAAI3B,KAAJ,CAAU0B,KAAK,CAAC,MAAD,CAAf,EAAyBA,KAAK,CAAC,SAAD,CAA9B,EAA0C,IAAIhB,GAAJ,EAA1C,EAAmE,IAAIA,GAAJ,EAAnE,CAAR;AACA,QAAIkB,CAAC,GAAG,CAAR;AACAD,IAAAA,CAAC,CAAClB,IAAF,GAASiB,KAAK,CAAC,MAAD,CAAd;;AACA,SAAI,IAAIG,CAAR,IAAaC,MAAM,CAACC,IAAP,CAAaL,KAAK,CAAC,WAAD,CAAlB,CAAb,EAA8C;AAC1C,UAAId,CAAC,GAAGd,UAAU,CAACe,WAAX,EAAR;AACAc,MAAAA,CAAC,CAACR,UAAF,CAAaP,CAAC,CAACoB,WAAF,CAAcC,GAAd,CAAkBP,KAAK,CAAC,cAAD,CAAL,CAAsBO,GAAtB,CAA0BJ,CAA1B,CAAlB,CAAb,EAA+DC,MAAM,CAACI,cAAP,CAAsBR,KAAK,CAAC,WAAD,CAAL,CAAmBO,GAAnB,CAAuBJ,CAAvB,CAAtB,EAAiD9B,IAAI,CAACoC,SAAtD,CAA/D;AACH;AACJ;;AA1Ca","sourcesContent":["import { Account } from \"./Account\";\r\nimport { Management } from \"./Management\";\r\nimport {Station} from \"./Station\";\r\nimport { Time } from \"./Time\";\r\n    \r\nexport class Train{\r\n    Name:string;\r\n    TrainNo : string;\r\n    routeTime:Map<string, Time>;\r\n    routeStation:Map<string,number>;\r\n    private __Id : number;\r\n    constructor(name:string,TrainNo:string,route:Map<string, Time>,routeStation:Map<string, number>,ID:number = -1){\r\n        this.Name=name;\r\n        this.routeTime = new Map(route);\r\n        this.routeStation = new Map(routeStation);\r\n        this.TrainNo = TrainNo;\r\n        if(ID==-1)\r\n            this.__Id  = Account.unique++;\r\n        else\r\n            this.__Id  = ID;   \r\n        let m = Management.getInstance();\r\n        m.trainList.set(this.__Id,(this));\r\n        m.trainNo.set(TrainNo,this);\r\n        Management.trainListForStoring.push(this);\r\n    }\r\n    addStation(station:Station, time : Time){\r\n        this.routeTime.set(station.name,time);\r\n        this.routeStation.set(station.name,station.getID());\r\n        //console.log(this.routeTime);\r\n    }\r\n    Return_RouteTime(): Map<string, Time>{\r\n        return this.routeTime;\r\n    }\r\n    Return_RouteStation(): Map<string, number>{\r\n        return this.routeStation;\r\n    }\r\n    getID(){\r\n        return this.__Id;\r\n    }\r\n    static readTrain(train : Train){\r\n        let x = new Train(train[\"Name\"], train[\"TrainNo\"],new Map<string, Time>(), new Map<string, number>());\r\n        let i = 0;\r\n        x.__Id = train[\"__Id\"];\r\n        for(let k of Object.keys( train[\"routeTime\"])){\r\n            let m = Management.getInstance();\r\n            x.addStation(m.stationList.get(train[\"routeStation\"].get(k)!)!,Object.setPrototypeOf(train[\"routeTime\"].get(k), Time.prototype));\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}